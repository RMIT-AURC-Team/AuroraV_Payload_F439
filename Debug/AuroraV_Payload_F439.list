
AuroraV_Payload_F439.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f00  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080080ac  080080ac  000180ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008164  08008164  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08008164  08008164  00018164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800816c  0800816c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800816c  0800816c  0001816c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008170  08008170  00018170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08008174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          0000055c  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000584  20000584  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a51b  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003a28  00000000  00000000  0003a5b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001530  00000000  00000000  0003dfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001084  00000000  00000000  0003f510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000273f0  00000000  00000000  00040594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bb6b  00000000  00000000  00067984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e7284  00000000  00000000  000834ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005814  00000000  00000000  0016a774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0016ff88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000028 	.word	0x20000028
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008094 	.word	0x08008094

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	08008094 	.word	0x08008094

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <init_accel>:
uint8_t OUT_Y_L 				= 0x2A;
uint8_t OUT_Y_H 				= 0x2B;
uint8_t OUT_Z_L 				= 0x2C;
uint8_t OUT_Z_H 				= 0x2D;

HAL_StatusTypeDef init_accel(I2C_HandleTypeDef* hi2c) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;

	// Reboot memory content
	ret = i2c_write_reg(hi2c, H3LIS331DL_ADDR, &CTRL_REG2, MASK_BOOT);
 8000500:	2118      	movs	r1, #24
 8000502:	2380      	movs	r3, #128	; 0x80
 8000504:	4a0d      	ldr	r2, [pc, #52]	; (800053c <init_accel+0x44>)
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f000 fb97 	bl	8000c3a <i2c_write_reg>
 800050c:	4603      	mov	r3, r0
 800050e:	73fb      	strb	r3, [r7, #15]

	// Write Control Register 1
	ret = i2c_write_reg(hi2c, H3LIS331DL_ADDR, &CTRL_REG1, MASK_1kHz);
 8000510:	2118      	movs	r1, #24
 8000512:	233f      	movs	r3, #63	; 0x3f
 8000514:	4a0a      	ldr	r2, [pc, #40]	; (8000540 <init_accel+0x48>)
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f000 fb8f 	bl	8000c3a <i2c_write_reg>
 800051c:	4603      	mov	r3, r0
 800051e:	73fb      	strb	r3, [r7, #15]

	// Write Control Register 4
	ret = i2c_write_reg(hi2c, H3LIS331DL_ADDR, &CTRL_REG4, MASK_100G);
 8000520:	2118      	movs	r1, #24
 8000522:	2300      	movs	r3, #0
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <init_accel+0x4c>)
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f000 fb87 	bl	8000c3a <i2c_write_reg>
 800052c:	4603      	mov	r3, r0
 800052e:	73fb      	strb	r3, [r7, #15]
	return ret;
 8000530:	7bfb      	ldrb	r3, [r7, #15]
}
 8000532:	4618      	mov	r0, r3
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000001 	.word	0x20000001
 8000540:	20000000 	.word	0x20000000
 8000544:	20000002 	.word	0x20000002

08000548 <readAccelerometer>:

void readAccelerometer(uint8_t values[6], I2C_HandleTypeDef* hi2c) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af02      	add	r7, sp, #8
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < 6; i++) {
 8000552:	2300      	movs	r3, #0
 8000554:	73fb      	strb	r3, [r7, #15]
 8000556:	e007      	b.n	8000568 <readAccelerometer+0x20>
		values[i] = 0x00;
 8000558:	7bfb      	ldrb	r3, [r7, #15]
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	4413      	add	r3, r2
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 6; i++) {
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	3301      	adds	r3, #1
 8000566:	73fb      	strb	r3, [r7, #15]
 8000568:	7bfb      	ldrb	r3, [r7, #15]
 800056a:	2b05      	cmp	r3, #5
 800056c:	d9f4      	bls.n	8000558 <readAccelerometer+0x10>
	}

	i2c_burst_read(hi2c, H3LIS331DL_ADDR, OUT_X_L, 6, values);
 800056e:	2118      	movs	r1, #24
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <readAccelerometer+0x40>)
 8000572:	781a      	ldrb	r2, [r3, #0]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	2306      	movs	r3, #6
 800057a:	6838      	ldr	r0, [r7, #0]
 800057c:	f000 fb28 	bl	8000bd0 <i2c_burst_read>
//	i2c_read_reg(hi2c, &zL, H3LIS331DL_ADDR, &OUT_Z_L);
//	i2c_read_reg(hi2c, &zH, H3LIS331DL_ADDR, &OUT_Z_H);


*****/
}
 8000580:	bf00      	nop
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000004 	.word	0x20000004

0800058c <readAccel_whoami>:

uint8_t readAccel_whoami(I2C_HandleTypeDef* hi2c) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	uint8_t data = 0x00;
 8000594:	2300      	movs	r3, #0
 8000596:	73fb      	strb	r3, [r7, #15]
	i2c_read_reg(hi2c, &data, H3LIS331DL_ADDR, &WHOAMI);
 8000598:	2218      	movs	r2, #24
 800059a:	f107 010f 	add.w	r1, r7, #15
 800059e:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <readAccel_whoami+0x24>)
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f000 faec 	bl	8000b7e <i2c_read_reg>

	return data;
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000003 	.word	0x20000003

080005b4 <init_bme280>:
uint8_t OUT_HUM_H 			= 0xFD;
uint8_t CALIB_ST_1			= 0x88;
uint8_t CALIB_ST_2			= 0xE1;


HAL_StatusTypeDef init_bme280(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	460b      	mov	r3, r1
 80005be:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 80005c0:	78fb      	ldrb	r3, [r7, #3]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f8e0 	bl	8000788 <getBME280Config>
 80005c8:	4603      	mov	r3, r0
 80005ca:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef ret;
	uint8_t control_reg = 0x00;
 80005cc:	2300      	movs	r3, #0
 80005ce:	737b      	strb	r3, [r7, #13]

	// Reset the sensor
	ret =  i2c_write_reg(hi2c, bme_addr, &RST_REG, RST);
 80005d0:	7bf9      	ldrb	r1, [r7, #15]
 80005d2:	23b6      	movs	r3, #182	; 0xb6
 80005d4:	4a19      	ldr	r2, [pc, #100]	; (800063c <init_bme280+0x88>)
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f000 fb2f 	bl	8000c3a <i2c_write_reg>
 80005dc:	4603      	mov	r3, r0
 80005de:	73bb      	strb	r3, [r7, #14]

	// Set humidity control register
	i2c_read_reg(hi2c, &control_reg, bme_addr, &CTRL_HUM_REG);
 80005e0:	7bfa      	ldrb	r2, [r7, #15]
 80005e2:	f107 010d 	add.w	r1, r7, #13
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <init_bme280+0x8c>)
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 fac8 	bl	8000b7e <i2c_read_reg>
	control_reg = control_reg & 0xF8;
 80005ee:	7b7b      	ldrb	r3, [r7, #13]
 80005f0:	f023 0307 	bic.w	r3, r3, #7
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	737b      	strb	r3, [r7, #13]
	control_reg = control_reg | CTRL_HUM_MSK;
 80005f8:	7b7b      	ldrb	r3, [r7, #13]
 80005fa:	f043 0301 	orr.w	r3, r3, #1
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	737b      	strb	r3, [r7, #13]
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_HUM_REG, control_reg);
 8000602:	7b7b      	ldrb	r3, [r7, #13]
 8000604:	7bf9      	ldrb	r1, [r7, #15]
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <init_bme280+0x8c>)
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f000 fb16 	bl	8000c3a <i2c_write_reg>
 800060e:	4603      	mov	r3, r0
 8000610:	73bb      	strb	r3, [r7, #14]

	// Set measure control register
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_MEAS_REG, CTRL_MEAS_MSK);
 8000612:	7bf9      	ldrb	r1, [r7, #15]
 8000614:	2327      	movs	r3, #39	; 0x27
 8000616:	4a0b      	ldr	r2, [pc, #44]	; (8000644 <init_bme280+0x90>)
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f000 fb0e 	bl	8000c3a <i2c_write_reg>
 800061e:	4603      	mov	r3, r0
 8000620:	73bb      	strb	r3, [r7, #14]

	// Set the config register
	ret = i2c_write_reg(hi2c, bme_addr, &CONF_REG, CONF_MSK);
 8000622:	7bf9      	ldrb	r1, [r7, #15]
 8000624:	2300      	movs	r3, #0
 8000626:	4a08      	ldr	r2, [pc, #32]	; (8000648 <init_bme280+0x94>)
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f000 fb06 	bl	8000c3a <i2c_write_reg>
 800062e:	4603      	mov	r3, r0
 8000630:	73bb      	strb	r3, [r7, #14]

	return ret;
 8000632:	7bbb      	ldrb	r3, [r7, #14]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000006 	.word	0x20000006
 8000640:	20000007 	.word	0x20000007
 8000644:	20000008 	.word	0x20000008
 8000648:	20000009 	.word	0x20000009

0800064c <readTempHumPres>:

void readTempHumPres(uint8_t values[6], I2C_HandleTypeDef* hi2c, uint8_t bme) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af02      	add	r7, sp, #8
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	4613      	mov	r3, r2
 8000658:	71fb      	strb	r3, [r7, #7]
	uint8_t readings[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 800065a:	4a27      	ldr	r2, [pc, #156]	; (80006f8 <readTempHumPres+0xac>)
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000664:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	4618      	mov	r0, r3
 800066c:	f000 f88c 	bl	8000788 <getBME280Config>
 8000670:	4603      	mov	r3, r0
 8000672:	777b      	strb	r3, [r7, #29]
	i2c_burst_read(hi2c, bme_addr, OUT_PRESS_H, 8, readings);
 8000674:	4b21      	ldr	r3, [pc, #132]	; (80006fc <readTempHumPres+0xb0>)
 8000676:	781a      	ldrb	r2, [r3, #0]
 8000678:	7f79      	ldrb	r1, [r7, #29]
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2308      	movs	r3, #8
 8000682:	68b8      	ldr	r0, [r7, #8]
 8000684:	f000 faa4 	bl	8000bd0 <i2c_burst_read>

	// Clear the 0 values on the xlsb registers
	uint8_t j = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 8; i++) {
 800068c:	2300      	movs	r3, #0
 800068e:	77bb      	strb	r3, [r7, #30]
 8000690:	e014      	b.n	80006bc <readTempHumPres+0x70>
        if(i != 2 && i != 5) {  // if the index is not 2 or 5
 8000692:	7fbb      	ldrb	r3, [r7, #30]
 8000694:	2b02      	cmp	r3, #2
 8000696:	d00e      	beq.n	80006b6 <readTempHumPres+0x6a>
 8000698:	7fbb      	ldrb	r3, [r7, #30]
 800069a:	2b05      	cmp	r3, #5
 800069c:	d00b      	beq.n	80006b6 <readTempHumPres+0x6a>
        	values[j] = readings[i];
 800069e:	7fba      	ldrb	r2, [r7, #30]
 80006a0:	7ffb      	ldrb	r3, [r7, #31]
 80006a2:	68f9      	ldr	r1, [r7, #12]
 80006a4:	440b      	add	r3, r1
 80006a6:	3220      	adds	r2, #32
 80006a8:	443a      	add	r2, r7
 80006aa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80006ae:	701a      	strb	r2, [r3, #0]
            j++;
 80006b0:	7ffb      	ldrb	r3, [r7, #31]
 80006b2:	3301      	adds	r3, #1
 80006b4:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 8; i++) {
 80006b6:	7fbb      	ldrb	r3, [r7, #30]
 80006b8:	3301      	adds	r3, #1
 80006ba:	77bb      	strb	r3, [r7, #30]
 80006bc:	7fbb      	ldrb	r3, [r7, #30]
 80006be:	2b07      	cmp	r3, #7
 80006c0:	d9e7      	bls.n	8000692 <readTempHumPres+0x46>
        }
    }

    // Swap elements to make the array little endian
    swap(&values[0], &values[1]);
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	3301      	adds	r3, #1
 80006c6:	4619      	mov	r1, r3
 80006c8:	68f8      	ldr	r0, [r7, #12]
 80006ca:	f000 f874 	bl	80007b6 <swap>
    swap(&values[2], &values[3]);
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	1c9a      	adds	r2, r3, #2
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3303      	adds	r3, #3
 80006d6:	4619      	mov	r1, r3
 80006d8:	4610      	mov	r0, r2
 80006da:	f000 f86c 	bl	80007b6 <swap>
    swap(&values[4], &values[5]);
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	1d1a      	adds	r2, r3, #4
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	3305      	adds	r3, #5
 80006e6:	4619      	mov	r1, r3
 80006e8:	4610      	mov	r0, r2
 80006ea:	f000 f864 	bl	80007b6 <swap>
}
 80006ee:	bf00      	nop
 80006f0:	3720      	adds	r7, #32
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	080080ac 	.word	0x080080ac
 80006fc:	2000000a 	.word	0x2000000a

08000700 <readBME280_id_reg>:

uint8_t readBME280_id_reg(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 800070c:	78fb      	ldrb	r3, [r7, #3]
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f83a 	bl	8000788 <getBME280Config>
 8000714:	4603      	mov	r3, r0
 8000716:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0x00;
 8000718:	2300      	movs	r3, #0
 800071a:	73bb      	strb	r3, [r7, #14]
	i2c_read_reg(hi2c, &data, bme_addr, &ID_REG);
 800071c:	7bfa      	ldrb	r2, [r7, #15]
 800071e:	f107 010e 	add.w	r1, r7, #14
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <readBME280_id_reg+0x34>)
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f000 fa2a 	bl	8000b7e <i2c_read_reg>

	return data;
 800072a:	7bbb      	ldrb	r3, [r7, #14]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000005 	.word	0x20000005

08000738 <readBME280_calib>:

void readBME280_calib(I2C_HandleTypeDef* hi2c, uint8_t bme, uint8_t calibration1[CALIB_CNT_1], uint8_t calibration2[CALIB_CNT_2]) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af02      	add	r7, sp, #8
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	607a      	str	r2, [r7, #4]
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	460b      	mov	r3, r1
 8000746:	72fb      	strb	r3, [r7, #11]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 8000748:	7afb      	ldrb	r3, [r7, #11]
 800074a:	4618      	mov	r0, r3
 800074c:	f000 f81c 	bl	8000788 <getBME280Config>
 8000750:	4603      	mov	r3, r0
 8000752:	75fb      	strb	r3, [r7, #23]
	i2c_burst_read(hi2c, bme_addr, CALIB_ST_1, CALIB_CNT_1, calibration1);
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <readBME280_calib+0x48>)
 8000756:	781a      	ldrb	r2, [r3, #0]
 8000758:	7df9      	ldrb	r1, [r7, #23]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	2319      	movs	r3, #25
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f000 fa35 	bl	8000bd0 <i2c_burst_read>
	i2c_burst_read(hi2c, bme_addr, CALIB_ST_2, CALIB_CNT_2, calibration2);
 8000766:	4b07      	ldr	r3, [pc, #28]	; (8000784 <readBME280_calib+0x4c>)
 8000768:	781a      	ldrb	r2, [r3, #0]
 800076a:	7df9      	ldrb	r1, [r7, #23]
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	2307      	movs	r3, #7
 8000772:	68f8      	ldr	r0, [r7, #12]
 8000774:	f000 fa2c 	bl	8000bd0 <i2c_burst_read>
}
 8000778:	bf00      	nop
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	2000000b 	.word	0x2000000b
 8000784:	2000000c 	.word	0x2000000c

08000788 <getBME280Config>:

BME280_Config getBME280Config(uint8_t bme) {
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
	BME280_Config config;
	if (bme == 0) {
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d102      	bne.n	800079e <getBME280Config+0x16>
		config.bme_addr = BME280_ADDR_0;
 8000798:	2376      	movs	r3, #118	; 0x76
 800079a:	733b      	strb	r3, [r7, #12]
 800079c:	e004      	b.n	80007a8 <getBME280Config+0x20>
	} else if (bme == 1) {
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d101      	bne.n	80007a8 <getBME280Config+0x20>
		config.bme_addr = BME280_ADDR_1;
 80007a4:	2377      	movs	r3, #119	; 0x77
 80007a6:	733b      	strb	r3, [r7, #12]
	}
    return config;
 80007a8:	7b3b      	ldrb	r3, [r7, #12]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3714      	adds	r7, #20
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <swap>:

void swap(uint8_t* a, uint8_t* b) {
 80007b6:	b480      	push	{r7}
 80007b8:	b085      	sub	sp, #20
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
 80007be:	6039      	str	r1, [r7, #0]
    uint8_t temp = *a;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	73fb      	strb	r3, [r7, #15]
    *a = *b;
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	701a      	strb	r2, [r3, #0]
    *b = temp;
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	7bfa      	ldrb	r2, [r7, #15]
 80007d2:	701a      	strb	r2, [r3, #0]
}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <check_busy>:
uint8_t FLASH_32K_ERS	= 0x52;			// Erase all memory within a 32K-byte block
uint8_t FLASH_ERASE		= 0xC7;			// Erase the entire chip
uint8_t RST_EN			= 0x66;			// Reset enable
uint8_t DEV_RST			= 0x99;			// Reset device

uint8_t check_busy(SPI_HandleTypeDef *hspi, GPIO_Config config, int timeout) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	1d38      	adds	r0, r7, #4
 80007ea:	e880 0006 	stmia.w	r0, {r1, r2}
 80007ee:	603b      	str	r3, [r7, #0]
	uint8_t ret_val = 0x00;
 80007f0:	2300      	movs	r3, #0
 80007f2:	77fb      	strb	r3, [r7, #31]

    // Get the current time
	uint32_t startTick = HAL_GetTick();
 80007f4:	f002 f8ba 	bl	800296c <HAL_GetTick>
 80007f8:	61b8      	str	r0, [r7, #24]

	// Read the status register to ensure no write is currently in progress
	uint8_t busy = 0x01;
 80007fa:	2301      	movs	r3, #1
 80007fc:	77bb      	strb	r3, [r7, #30]
	while(busy) {
 80007fe:	e015      	b.n	800082c <check_busy+0x4c>
		// Check if there is a write in progress
		busy = (check_status_register(hspi, config) & 0x01);
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000806:	68f8      	ldr	r0, [r7, #12]
 8000808:	f000 f818 	bl	800083c <check_status_register>
 800080c:	4603      	mov	r3, r0
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	77bb      	strb	r3, [r7, #30]

		uint32_t currTick = HAL_GetTick();
 8000814:	f002 f8aa 	bl	800296c <HAL_GetTick>
 8000818:	6178      	str	r0, [r7, #20]

        // Check if the timeout has been reached
		if ((currTick - startTick) >= timeout) {
 800081a:	697a      	ldr	r2, [r7, #20]
 800081c:	69bb      	ldr	r3, [r7, #24]
 800081e:	1ad2      	subs	r2, r2, r3
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	429a      	cmp	r2, r3
 8000824:	d302      	bcc.n	800082c <check_busy+0x4c>
        	ret_val = 0x01;
 8000826:	2301      	movs	r3, #1
 8000828:	77fb      	strb	r3, [r7, #31]
            break;
 800082a:	e002      	b.n	8000832 <check_busy+0x52>
	while(busy) {
 800082c:	7fbb      	ldrb	r3, [r7, #30]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d1e6      	bne.n	8000800 <check_busy+0x20>
        }
	}

	return ret_val;
 8000832:	7ffb      	ldrb	r3, [r7, #31]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <check_status_register>:

uint8_t check_status_register(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af02      	add	r7, sp, #8
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t status_reg = 0x00;
 800084a:	2300      	movs	r3, #0
 800084c:	75fb      	strb	r3, [r7, #23]
	spi_sendOp_readByte(&FLASH_READSR1, hspi, &status_reg, config.GPIOx, config.GPIO_Pin);
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	893b      	ldrh	r3, [r7, #8]
 8000852:	f107 0217 	add.w	r2, r7, #23
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	460b      	mov	r3, r1
 800085a:	68f9      	ldr	r1, [r7, #12]
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <check_status_register+0x30>)
 800085e:	f001 fbe1 	bl	8002024 <spi_sendOp_readByte>
	return status_reg;
 8000862:	7dfb      	ldrb	r3, [r7, #23]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	2000000f 	.word	0x2000000f

08000870 <erase_chip_spi>:
 *      Author: aidencontini
 */

#include "data_output_spi.h"

HAL_StatusTypeDef erase_chip_spi(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	e883 0006 	stmia.w	r3, {r1, r2}
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 800087e:	2305      	movs	r3, #5
 8000880:	1d3a      	adds	r2, r7, #4
 8000882:	ca06      	ldmia	r2, {r1, r2}
 8000884:	68f8      	ldr	r0, [r7, #12]
 8000886:	f7ff ffab 	bl	80007e0 <check_busy>

	write_enable_spi(hspi, config);
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000890:	68f8      	ldr	r0, [r7, #12]
 8000892:	f000 f815 	bl	80008c0 <write_enable_spi>
	perform_operation(&FLASH_ERASE, hspi, config.GPIOx, config.GPIO_Pin);
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	893b      	ldrh	r3, [r7, #8]
 800089a:	68f9      	ldr	r1, [r7, #12]
 800089c:	4806      	ldr	r0, [pc, #24]	; (80008b8 <erase_chip_spi+0x48>)
 800089e:	f001 fbe7 	bl	8002070 <perform_operation>

	check_busy(hspi, config, CHIP_ERASE_TO);
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <erase_chip_spi+0x4c>)
 80008a4:	1d3a      	adds	r2, r7, #4
 80008a6:	ca06      	ldmia	r2, {r1, r2}
 80008a8:	68f8      	ldr	r0, [r7, #12]
 80008aa:	f7ff ff99 	bl	80007e0 <check_busy>

	return HAL_OK;
 80008ae:	2300      	movs	r3, #0
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000012 	.word	0x20000012
 80008bc:	00030d40 	.word	0x00030d40

080008c0 <write_enable_spi>:
	check_busy(hspi, config, BLK_ERS_32K_TO);

	return HAL_OK;
}

void write_enable_spi(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	e883 0006 	stmia.w	r3, {r1, r2}
	perform_operation(&FLASH_WREN, hspi, config.GPIOx, config.GPIO_Pin);
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	893b      	ldrh	r3, [r7, #8]
 80008d2:	68f9      	ldr	r1, [r7, #12]
 80008d4:	4803      	ldr	r0, [pc, #12]	; (80008e4 <write_enable_spi+0x24>)
 80008d6:	f001 fbcb 	bl	8002070 <perform_operation>
}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	2000000d 	.word	0x2000000d

080008e8 <software_reset>:

void write_disable_spi(SPI_HandleTypeDef *hspi, GPIO_Config config) {
	perform_operation(&FLASH_WRDIS, hspi, config.GPIOx, config.GPIO_Pin);
}

void software_reset(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	e883 0006 	stmia.w	r3, {r1, r2}

	check_busy(hspi, config, BSY_TIMEOUT_MS);
 80008f6:	2305      	movs	r3, #5
 80008f8:	1d3a      	adds	r2, r7, #4
 80008fa:	ca06      	ldmia	r2, {r1, r2}
 80008fc:	68f8      	ldr	r0, [r7, #12]
 80008fe:	f7ff ff6f 	bl	80007e0 <check_busy>

	perform_operation(&RST_EN, hspi, config.GPIOx, config.GPIO_Pin);
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	893b      	ldrh	r3, [r7, #8]
 8000906:	68f9      	ldr	r1, [r7, #12]
 8000908:	4807      	ldr	r0, [pc, #28]	; (8000928 <software_reset+0x40>)
 800090a:	f001 fbb1 	bl	8002070 <perform_operation>
	perform_operation(&DEV_RST, hspi, config.GPIOx, config.GPIO_Pin);
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	893b      	ldrh	r3, [r7, #8]
 8000912:	68f9      	ldr	r1, [r7, #12]
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <software_reset+0x44>)
 8000916:	f001 fbab 	bl	8002070 <perform_operation>

	HAL_Delay(5);
 800091a:	2005      	movs	r0, #5
 800091c:	f002 f832 	bl	8002984 <HAL_Delay>
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000013 	.word	0x20000013
 800092c:	20000014 	.word	0x20000014

08000930 <write_data_spi_dma>:
	spi_write_data(&FLASH_PGWR, PAGE_SIZE, page, hspi, addr, config.GPIOx, config.GPIO_Pin);

	return 0;
}

uint8_t write_data_spi_dma(uint8_t page[PAGE_SIZE], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_Config config) {
 8000930:	b082      	sub	sp, #8
 8000932:	b580      	push	{r7, lr}
 8000934:	b088      	sub	sp, #32
 8000936:	af04      	add	r7, sp, #16
 8000938:	60f8      	str	r0, [r7, #12]
 800093a:	60b9      	str	r1, [r7, #8]
 800093c:	607a      	str	r2, [r7, #4]
 800093e:	61fb      	str	r3, [r7, #28]
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000940:	2305      	movs	r3, #5
 8000942:	f107 021c 	add.w	r2, r7, #28
 8000946:	ca06      	ldmia	r2, {r1, r2}
 8000948:	68b8      	ldr	r0, [r7, #8]
 800094a:	f7ff ff49 	bl	80007e0 <check_busy>

	// Send the write enable signal
	write_enable_spi(hspi, config);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000956:	68b8      	ldr	r0, [r7, #8]
 8000958:	f7ff ffb2 	bl	80008c0 <write_enable_spi>
	spi_write_data_dma(&FLASH_PGWR, PAGE_SIZE, page, hspi, addr, config.GPIOx, config.GPIO_Pin);
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	8c3a      	ldrh	r2, [r7, #32]
 8000960:	9202      	str	r2, [sp, #8]
 8000962:	9301      	str	r3, [sp, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <write_data_spi_dma+0x58>)
 8000972:	f001 fbe4 	bl	800213e <spi_write_data_dma>

	return 0;
 8000976:	2300      	movs	r3, #0
}
 8000978:	4618      	mov	r0, r3
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000982:	b002      	add	sp, #8
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	2000000e 	.word	0x2000000e

0800098c <find_next_blank_page>:
 *      Author: aidencontini
 */

#include "data_read_spi.h"

uint32_t find_next_blank_page(SPI_HandleTypeDef *hspi, GPIO_PinState *end_of_flash_ptr, GPIO_Config config) {
 800098c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000990:	b091      	sub	sp, #68	; 0x44
 8000992:	af04      	add	r7, sp, #16
 8000994:	60f8      	str	r0, [r7, #12]
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	4639      	mov	r1, r7
 800099a:	e881 000c 	stmia.w	r1, {r2, r3}
 800099e:	466b      	mov	r3, sp
 80009a0:	461e      	mov	r6, r3
	uint8_t firstBytes = 4;
 80009a2:	2304      	movs	r3, #4
 80009a4:	77fb      	strb	r3, [r7, #31]

	uint8_t page_start[firstBytes];
 80009a6:	7ff9      	ldrb	r1, [r7, #31]
 80009a8:	460b      	mov	r3, r1
 80009aa:	3b01      	subs	r3, #1
 80009ac:	61bb      	str	r3, [r7, #24]
 80009ae:	b2cb      	uxtb	r3, r1
 80009b0:	2200      	movs	r2, #0
 80009b2:	4698      	mov	r8, r3
 80009b4:	4691      	mov	r9, r2
 80009b6:	f04f 0200 	mov.w	r2, #0
 80009ba:	f04f 0300 	mov.w	r3, #0
 80009be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80009c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80009c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80009ca:	b2cb      	uxtb	r3, r1
 80009cc:	2200      	movs	r2, #0
 80009ce:	461c      	mov	r4, r3
 80009d0:	4615      	mov	r5, r2
 80009d2:	f04f 0200 	mov.w	r2, #0
 80009d6:	f04f 0300 	mov.w	r3, #0
 80009da:	00eb      	lsls	r3, r5, #3
 80009dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80009e0:	00e2      	lsls	r2, r4, #3
 80009e2:	460b      	mov	r3, r1
 80009e4:	3307      	adds	r3, #7
 80009e6:	08db      	lsrs	r3, r3, #3
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	ebad 0d03 	sub.w	sp, sp, r3
 80009ee:	ab04      	add	r3, sp, #16
 80009f0:	3300      	adds	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < firstBytes; i++) {
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009f8:	e007      	b.n	8000a0a <find_next_blank_page+0x7e>
		page_start[i] = 0;
 80009fa:	697a      	ldr	r2, [r7, #20]
 80009fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fe:	4413      	add	r3, r2
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < firstBytes; i++) {
 8000a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a06:	3301      	adds	r3, #1
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a0a:	7ffb      	ldrb	r3, [r7, #31]
 8000a0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	dbf3      	blt.n	80009fa <find_next_blank_page+0x6e>
	}

	uint32_t page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	061a      	lsls	r2, r3, #24
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	785b      	ldrb	r3, [r3, #1]
 8000a1c:	041b      	lsls	r3, r3, #16
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	789b      	ldrb	r3, [r3, #2]
 8000a24:	021b      	lsls	r3, r3, #8
 8000a26:	4313      	orrs	r3, r2
 8000a28:	697a      	ldr	r2, [r7, #20]
 8000a2a:	78d2      	ldrb	r2, [r2, #3]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t temp = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t page_address = temp;
 8000a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a36:	623b      	str	r3, [r7, #32]

	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000a38:	e027      	b.n	8000a8a <find_next_blank_page+0xfe>
		page_address = temp;
 8000a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3c:	623b      	str	r3, [r7, #32]

		check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000a3e:	2305      	movs	r3, #5
 8000a40:	463a      	mov	r2, r7
 8000a42:	ca06      	ldmia	r2, {r1, r2}
 8000a44:	68f8      	ldr	r0, [r7, #12]
 8000a46:	f7ff fecb 	bl	80007e0 <check_busy>

		spi_read_data(&FLASH_READEN, firstBytes, page_start, hspi, page_address, config.GPIOx, config.GPIO_Pin);
 8000a4a:	7ffb      	ldrb	r3, [r7, #31]
 8000a4c:	b299      	uxth	r1, r3
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	88ba      	ldrh	r2, [r7, #4]
 8000a52:	9202      	str	r2, [sp, #8]
 8000a54:	9301      	str	r3, [sp, #4]
 8000a56:	6a3b      	ldr	r3, [r7, #32]
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	4816      	ldr	r0, [pc, #88]	; (8000ab8 <find_next_blank_page+0x12c>)
 8000a60:	f001 fb26 	bl	80020b0 <spi_read_data>

		page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	061a      	lsls	r2, r3, #24
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	785b      	ldrb	r3, [r3, #1]
 8000a6e:	041b      	lsls	r3, r3, #16
 8000a70:	431a      	orrs	r2, r3
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	789b      	ldrb	r3, [r3, #2]
 8000a76:	021b      	lsls	r3, r3, #8
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	697a      	ldr	r2, [r7, #20]
 8000a7c:	78d2      	ldrb	r2, [r2, #3]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
		temp += PAGE_SIZE;
 8000a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a90:	d1d3      	bne.n	8000a3a <find_next_blank_page+0xae>
 8000a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a98:	d0cf      	beq.n	8000a3a <find_next_blank_page+0xae>
	}

	if (page_address == (NUM_OF_PAGES * PAGE_SIZE)) {
 8000a9a:	6a3b      	ldr	r3, [r7, #32]
 8000a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aa0:	d102      	bne.n	8000aa8 <find_next_blank_page+0x11c>
		*end_of_flash_ptr = GPIO_PIN_RESET;
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
	}
	return page_address;
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	46b5      	mov	sp, r6
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3734      	adds	r7, #52	; 0x34
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000010 	.word	0x20000010

08000abc <read_page_spi>:

void read_page_spi(uint8_t data_read[PAGE_SIZE], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_Config config) {
 8000abc:	b082      	sub	sp, #8
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b088      	sub	sp, #32
 8000ac2:	af04      	add	r7, sp, #16
 8000ac4:	60f8      	str	r0, [r7, #12]
 8000ac6:	60b9      	str	r1, [r7, #8]
 8000ac8:	607a      	str	r2, [r7, #4]
 8000aca:	61fb      	str	r3, [r7, #28]

	// Read the status register to ensure no write is currently in progress
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000acc:	2305      	movs	r3, #5
 8000ace:	f107 021c 	add.w	r2, r7, #28
 8000ad2:	ca06      	ldmia	r2, {r1, r2}
 8000ad4:	68b8      	ldr	r0, [r7, #8]
 8000ad6:	f7ff fe83 	bl	80007e0 <check_busy>
	spi_read_data(&FLASH_READEN, PAGE_SIZE, data_read, hspi, addr, config.GPIOx, config.GPIO_Pin);
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	8c3a      	ldrh	r2, [r7, #32]
 8000ade:	9202      	str	r2, [sp, #8]
 8000ae0:	9301      	str	r3, [sp, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <read_page_spi+0x48>)
 8000af0:	f001 fade 	bl	80020b0 <spi_read_data>
}
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000afe:	b002      	add	sp, #8
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000010 	.word	0x20000010

08000b08 <read_manufacturer_id>:

void read_manufacturer_id(uint8_t manu[2], SPI_HandleTypeDef *hspi, GPIO_Config config) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af04      	add	r7, sp, #16
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	4639      	mov	r1, r7
 8000b14:	e881 000c 	stmia.w	r1, {r2, r3}

	// Read the status register to ensure no write is currently in progress
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000b18:	2305      	movs	r3, #5
 8000b1a:	463a      	mov	r2, r7
 8000b1c:	ca06      	ldmia	r2, {r1, r2}
 8000b1e:	68b8      	ldr	r0, [r7, #8]
 8000b20:	f7ff fe5e 	bl	80007e0 <check_busy>

	// Read the entire contents of a page starting from the given address
	uint8_t addr = 0x00;
 8000b24:	2300      	movs	r3, #0
 8000b26:	75fb      	strb	r3, [r7, #23]
	spi_read_data(&FLASH_READ_MANU, 2, manu, hspi, addr, config.GPIOx, config.GPIO_Pin);
 8000b28:	7dfb      	ldrb	r3, [r7, #23]
 8000b2a:	683a      	ldr	r2, [r7, #0]
 8000b2c:	88b9      	ldrh	r1, [r7, #4]
 8000b2e:	9102      	str	r1, [sp, #8]
 8000b30:	9201      	str	r2, [sp, #4]
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	2102      	movs	r1, #2
 8000b3a:	4803      	ldr	r0, [pc, #12]	; (8000b48 <read_manufacturer_id+0x40>)
 8000b3c:	f001 fab8 	bl	80020b0 <spi_read_data>
}
 8000b40:	bf00      	nop
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000011 	.word	0x20000011

08000b4c <create_GPIO_Config>:
 */

#include "gpio_struct.h"

// Function to initialize the GPIO_Config struct
GPIO_Config create_GPIO_Config(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000b4c:	b480      	push	{r7}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	4613      	mov	r3, r2
 8000b58:	80fb      	strh	r3, [r7, #6]
    GPIO_Config new_config;
    new_config.GPIOx = GPIOx;
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	613b      	str	r3, [r7, #16]
    new_config.GPIO_Pin = GPIO_Pin;
 8000b5e:	88fb      	ldrh	r3, [r7, #6]
 8000b60:	82bb      	strh	r3, [r7, #20]
    return new_config;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	461a      	mov	r2, r3
 8000b66:	f107 0310 	add.w	r3, r7, #16
 8000b6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b6e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000b72:	68f8      	ldr	r0, [r7, #12]
 8000b74:	371c      	adds	r7, #28
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <i2c_read_reg>:
 *      Author: aidencontini
 */

#include "i2c_driver.h"

HAL_StatusTypeDef i2c_read_reg(I2C_HandleTypeDef* hi2c, uint8_t* data_ptr, uint8_t dev_addr, uint8_t* register_addr) {
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b088      	sub	sp, #32
 8000b82:	af02      	add	r7, sp, #8
 8000b84:	60f8      	str	r0, [r7, #12]
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, register_addr, 1, I2C_TIMEOUT_SML);
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	b299      	uxth	r1, r3
 8000b98:	2301      	movs	r3, #1
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	683a      	ldr	r2, [r7, #0]
 8000ba0:	68f8      	ldr	r0, [r7, #12]
 8000ba2:	f002 ff63 	bl	8003a6c <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_ptr, 1, I2C_TIMEOUT_SML);
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	b21b      	sxth	r3, r3
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	b299      	uxth	r1, r3
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	2301      	movs	r3, #1
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	68f8      	ldr	r0, [r7, #12]
 8000bbe:	f003 f853 	bl	8003c68 <HAL_I2C_Master_Receive>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	75fb      	strb	r3, [r7, #23]
	return hal_status;
 8000bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <i2c_burst_read>:

HAL_StatusTypeDef i2c_burst_read(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t register_addr, uint8_t size, uint8_t data_buffer[size]) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af02      	add	r7, sp, #8
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	4608      	mov	r0, r1
 8000bda:	4611      	mov	r1, r2
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4603      	mov	r3, r0
 8000be0:	70fb      	strb	r3, [r7, #3]
 8000be2:	460b      	mov	r3, r1
 8000be4:	70bb      	strb	r3, [r7, #2]
 8000be6:	4613      	mov	r3, r2
 8000be8:	707b      	strb	r3, [r7, #1]
	// In order to read multiple bytes, it is necessary to assert the most significant bit of the sub-address field.
	uint8_t addr = register_addr | 0x80;
 8000bea:	78bb      	ldrb	r3, [r7, #2]
 8000bec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, &addr, 1, I2C_TIMEOUT_SML);
 8000bf4:	78fb      	ldrb	r3, [r7, #3]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	b299      	uxth	r1, r3
 8000bfe:	f107 020e 	add.w	r2, r7, #14
 8000c02:	2301      	movs	r3, #1
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	2301      	movs	r3, #1
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f002 ff2f 	bl	8003a6c <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status =  HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_buffer, size, I2C_TIMEOUT_LRG);
 8000c0e:	78fb      	ldrb	r3, [r7, #3]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	b21b      	sxth	r3, r3
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	b21b      	sxth	r3, r3
 8000c1a:	b299      	uxth	r1, r3
 8000c1c:	787b      	ldrb	r3, [r7, #1]
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	220a      	movs	r2, #10
 8000c22:	9200      	str	r2, [sp, #0]
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f003 f81e 	bl	8003c68 <HAL_I2C_Master_Receive>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	73fb      	strb	r3, [r7, #15]
	return hal_status;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <i2c_write_reg>:

HAL_StatusTypeDef i2c_write_reg(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t* register_addr, uint8_t data) {
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b088      	sub	sp, #32
 8000c3e:	af02      	add	r7, sp, #8
 8000c40:	60f8      	str	r0, [r7, #12]
 8000c42:	607a      	str	r2, [r7, #4]
 8000c44:	461a      	mov	r2, r3
 8000c46:	460b      	mov	r3, r1
 8000c48:	72fb      	strb	r3, [r7, #11]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	72bb      	strb	r3, [r7, #10]
	uint8_t data_tx[2] = {*register_addr, data};
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	753b      	strb	r3, [r7, #20]
 8000c54:	7abb      	ldrb	r3, [r7, #10]
 8000c56:	757b      	strb	r3, [r7, #21]
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, data_tx, 2, I2C_TIMEOUT_SML);
 8000c58:	7afb      	ldrb	r3, [r7, #11]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	b299      	uxth	r1, r3
 8000c62:	f107 0214 	add.w	r2, r7, #20
 8000c66:	2301      	movs	r3, #1
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	68f8      	ldr	r0, [r7, #12]
 8000c6e:	f002 fefd 	bl	8003a6c <HAL_I2C_Master_Transmit>
 8000c72:	4603      	mov	r3, r0
 8000c74:	75fb      	strb	r3, [r7, #23]
	return hal_status;
 8000c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c86:	f001 fe0b 	bl	80028a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8a:	f000 f8bf 	bl	8000e0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c8e:	f000 fac7 	bl	8001220 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c92:	f000 fa8f 	bl	80011b4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000c96:	f000 f91b 	bl	8000ed0 <MX_I2C1_Init>
  MX_RTC_Init();
 8000c9a:	f000 f999 	bl	8000fd0 <MX_RTC_Init>
  MX_SPI1_Init();
 8000c9e:	f000 f9bd 	bl	800101c <MX_SPI1_Init>
  MX_TIM6_Init();
 8000ca2:	f000 fa27 	bl	80010f4 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000ca6:	f000 fa5b 	bl	8001160 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000caa:	f000 f951 	bl	8000f50 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000cae:	f000 f9eb 	bl	8001088 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000cb2:	f000 fbab 	bl	800140c <systemInit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Handle UART receive flag
	  if(uart2_rec_flag == 0x01) {
 8000cb6:	4b44      	ldr	r3, [pc, #272]	; (8000dc8 <main+0x148>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d101      	bne.n	8000cc2 <main+0x42>
		  handleUART();
 8000cbe:	f000 fcdd 	bl	800167c <handleUART>
	  }

	  // Handle Timer 6 overflow flag
	  if(tim6_overflow_flag == 0x01) {
 8000cc2:	4b42      	ldr	r3, [pc, #264]	; (8000dcc <main+0x14c>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d117      	bne.n	8000cfa <main+0x7a>
		  HAL_GPIO_TogglePin(led_orange.GPIOx, led_orange.GPIO_Pin);		// Toggle LED
 8000cca:	4b41      	ldr	r3, [pc, #260]	; (8000dd0 <main+0x150>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a40      	ldr	r2, [pc, #256]	; (8000dd0 <main+0x150>)
 8000cd0:	8892      	ldrh	r2, [r2, #4]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f002 fd6a 	bl	80037ae <HAL_GPIO_TogglePin>
		  readAllSensors(&hi2c1, &hi2c2, &hrtc);
 8000cda:	4a3e      	ldr	r2, [pc, #248]	; (8000dd4 <main+0x154>)
 8000cdc:	493e      	ldr	r1, [pc, #248]	; (8000dd8 <main+0x158>)
 8000cde:	483f      	ldr	r0, [pc, #252]	; (8000ddc <main+0x15c>)
 8000ce0:	f001 f874 	bl	8001dcc <readAllSensors>
		  tim6_overflow_flag = 0x00;
 8000ce4:	4b39      	ldr	r3, [pc, #228]	; (8000dcc <main+0x14c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]

//		  readTempSensor(&huart2, 0);

		  HAL_GPIO_TogglePin(led_orange.GPIOx, led_orange.GPIO_Pin);		// Toggle LED
 8000cea:	4b39      	ldr	r3, [pc, #228]	; (8000dd0 <main+0x150>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a38      	ldr	r2, [pc, #224]	; (8000dd0 <main+0x150>)
 8000cf0:	8892      	ldrh	r2, [r2, #4]
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f002 fd5a 	bl	80037ae <HAL_GPIO_TogglePin>
	  }

	  // Write data to flash when buffer is full
	  if(byte_tracker > (PAGE_SIZE - READ_SIZE)) {
 8000cfa:	4b39      	ldr	r3, [pc, #228]	; (8000de0 <main+0x160>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	2bec      	cmp	r3, #236	; 0xec
 8000d00:	d952      	bls.n	8000da8 <main+0x128>
		  GPIO_PinState flight_mode = HAL_GPIO_ReadPin(jmp_flight.GPIOx, jmp_flight.GPIO_Pin);
 8000d02:	4b38      	ldr	r3, [pc, #224]	; (8000de4 <main+0x164>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a37      	ldr	r2, [pc, #220]	; (8000de4 <main+0x164>)
 8000d08:	8892      	ldrh	r2, [r2, #4]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f002 fd1d 	bl	800374c <HAL_GPIO_ReadPin>
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
		  if((flight_mode & !(end_of_flash)) == GPIO_PIN_SET) {
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	4a33      	ldr	r2, [pc, #204]	; (8000de8 <main+0x168>)
 8000d1a:	7812      	ldrb	r2, [r2, #0]
 8000d1c:	2a00      	cmp	r2, #0
 8000d1e:	bf0c      	ite	eq
 8000d20:	2201      	moveq	r2, #1
 8000d22:	2200      	movne	r2, #0
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	4013      	ands	r3, r2
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d133      	bne.n	8000d94 <main+0x114>
			  HAL_GPIO_WritePin(led_green.GPIOx, led_green.GPIO_Pin, GPIO_PIN_SET);		// Toggle LED when writing data
 8000d2c:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <main+0x16c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a2e      	ldr	r2, [pc, #184]	; (8000dec <main+0x16c>)
 8000d32:	8891      	ldrh	r1, [r2, #4]
 8000d34:	2201      	movs	r2, #1
 8000d36:	4618      	mov	r0, r3
 8000d38:	f002 fd20 	bl	800377c <HAL_GPIO_WritePin>

			  write_data_spi_dma(data_buffer_tx[buffer_tracker], &hspi1, next_blank_page, cs_spi1);
 8000d3c:	4b2c      	ldr	r3, [pc, #176]	; (8000df0 <main+0x170>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	021b      	lsls	r3, r3, #8
 8000d42:	4a2c      	ldr	r2, [pc, #176]	; (8000df4 <main+0x174>)
 8000d44:	1898      	adds	r0, r3, r2
 8000d46:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <main+0x178>)
 8000d48:	6819      	ldr	r1, [r3, #0]
 8000d4a:	4b2c      	ldr	r3, [pc, #176]	; (8000dfc <main+0x17c>)
 8000d4c:	685a      	ldr	r2, [r3, #4]
 8000d4e:	9200      	str	r2, [sp, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	460a      	mov	r2, r1
 8000d54:	492a      	ldr	r1, [pc, #168]	; (8000e00 <main+0x180>)
 8000d56:	f7ff fdeb 	bl	8000930 <write_data_spi_dma>
			  write_data_spi_dma(data_buffer_tx[buffer_tracker], &hspi2, next_blank_page, cs_spi2);
 8000d5a:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <main+0x170>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	021b      	lsls	r3, r3, #8
 8000d60:	4a24      	ldr	r2, [pc, #144]	; (8000df4 <main+0x174>)
 8000d62:	1898      	adds	r0, r3, r2
 8000d64:	4b24      	ldr	r3, [pc, #144]	; (8000df8 <main+0x178>)
 8000d66:	6819      	ldr	r1, [r3, #0]
 8000d68:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <main+0x184>)
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	9200      	str	r2, [sp, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	460a      	mov	r2, r1
 8000d72:	4925      	ldr	r1, [pc, #148]	; (8000e08 <main+0x188>)
 8000d74:	f7ff fddc 	bl	8000930 <write_data_spi_dma>
			  next_blank_page += PAGE_SIZE;
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <main+0x178>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d80:	4a1d      	ldr	r2, [pc, #116]	; (8000df8 <main+0x178>)
 8000d82:	6013      	str	r3, [r2, #0]

			  HAL_GPIO_WritePin(led_green.GPIOx, led_green.GPIO_Pin, GPIO_PIN_RESET);		// Toggle LED when writing data
 8000d84:	4b19      	ldr	r3, [pc, #100]	; (8000dec <main+0x16c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a18      	ldr	r2, [pc, #96]	; (8000dec <main+0x16c>)
 8000d8a:	8891      	ldrh	r1, [r2, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f002 fcf4 	bl	800377c <HAL_GPIO_WritePin>
		  }

		// Reset the buffer trackers
		buffer_tracker = buffer_tracker ^ 0x01;
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <main+0x170>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	f083 0301 	eor.w	r3, r3, #1
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <main+0x170>)
 8000da0:	701a      	strb	r2, [r3, #0]
		byte_tracker = 0;
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <main+0x160>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	801a      	strh	r2, [r3, #0]
	  }

	  if(next_blank_page == (NUM_OF_PAGES*PAGE_SIZE)) {
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <main+0x178>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db0:	d181      	bne.n	8000cb6 <main+0x36>
		  next_blank_page = find_next_blank_page(&hspi1, &end_of_flash, cs_spi1);
 8000db2:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <main+0x17c>)
 8000db4:	cb0c      	ldmia	r3, {r2, r3}
 8000db6:	490c      	ldr	r1, [pc, #48]	; (8000de8 <main+0x168>)
 8000db8:	4811      	ldr	r0, [pc, #68]	; (8000e00 <main+0x180>)
 8000dba:	f7ff fde7 	bl	800098c <find_next_blank_page>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <main+0x178>)
 8000dc2:	6013      	str	r3, [r2, #0]
	  if(uart2_rec_flag == 0x01) {
 8000dc4:	e777      	b.n	8000cb6 <main+0x36>
 8000dc6:	bf00      	nop
 8000dc8:	2000030e 	.word	0x2000030e
 8000dcc:	2000030f 	.word	0x2000030f
 8000dd0:	20000534 	.word	0x20000534
 8000dd4:	200000ec 	.word	0x200000ec
 8000dd8:	20000098 	.word	0x20000098
 8000ddc:	20000044 	.word	0x20000044
 8000de0:	20000530 	.word	0x20000530
 8000de4:	20000564 	.word	0x20000564
 8000de8:	20000532 	.word	0x20000532
 8000dec:	2000053c 	.word	0x2000053c
 8000df0:	20000510 	.word	0x20000510
 8000df4:	20000310 	.word	0x20000310
 8000df8:	2000052c 	.word	0x2000052c
 8000dfc:	20000544 	.word	0x20000544
 8000e00:	2000010c 	.word	0x2000010c
 8000e04:	20000554 	.word	0x20000554
 8000e08:	20000164 	.word	0x20000164

08000e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b094      	sub	sp, #80	; 0x50
 8000e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e12:	f107 0320 	add.w	r3, r7, #32
 8000e16:	2230      	movs	r2, #48	; 0x30
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f007 f90e 	bl	800803c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <SystemClock_Config+0xbc>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	4a23      	ldr	r2, [pc, #140]	; (8000ec8 <SystemClock_Config+0xbc>)
 8000e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e40:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <SystemClock_Config+0xbc>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <SystemClock_Config+0xc0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e58:	4a1c      	ldr	r2, [pc, #112]	; (8000ecc <SystemClock_Config+0xc0>)
 8000e5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <SystemClock_Config+0xc0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000e6c:	230a      	movs	r3, #10
 8000e6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e70:	2301      	movs	r3, #1
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e74:	2310      	movs	r3, #16
 8000e76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e80:	f107 0320 	add.w	r3, r7, #32
 8000e84:	4618      	mov	r0, r3
 8000e86:	f003 fd23 	bl	80048d0 <HAL_RCC_OscConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000e90:	f000 fd31 	bl	80018f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e94:	230f      	movs	r3, #15
 8000e96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f003 ff86 	bl	8004dc0 <HAL_RCC_ClockConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000eba:	f000 fd1c 	bl	80018f6 <Error_Handler>
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	3750      	adds	r7, #80	; 0x50
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40007000 	.word	0x40007000

08000ed0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000ed6:	4a1c      	ldr	r2, [pc, #112]	; (8000f48 <MX_I2C1_Init+0x78>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000edc:	4a1b      	ldr	r2, [pc, #108]	; (8000f4c <MX_I2C1_Init+0x7c>)
 8000ede:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ee0:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000eee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ef2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000efa:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f00:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f0c:	480d      	ldr	r0, [pc, #52]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000f0e:	f002 fc69 	bl	80037e4 <HAL_I2C_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f18:	f000 fced 	bl	80018f6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4809      	ldr	r0, [pc, #36]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000f20:	f003 fc5a 	bl	80047d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000f2a:	f000 fce4 	bl	80018f6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000f32:	f003 fc8d 	bl	8004850 <HAL_I2CEx_ConfigDigitalFilter>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000f3c:	f000 fcdb 	bl	80018f6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000044 	.word	0x20000044
 8000f48:	40005400 	.word	0x40005400
 8000f4c:	000186a0 	.word	0x000186a0

08000f50 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <MX_I2C2_Init+0x74>)
 8000f56:	4a1c      	ldr	r2, [pc, #112]	; (8000fc8 <MX_I2C2_Init+0x78>)
 8000f58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <MX_I2C2_Init+0x74>)
 8000f5c:	4a1b      	ldr	r2, [pc, #108]	; (8000fcc <MX_I2C2_Init+0x7c>)
 8000f5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f60:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <MX_I2C2_Init+0x74>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <MX_I2C2_Init+0x74>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f6c:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <MX_I2C2_Init+0x74>)
 8000f6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f72:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <MX_I2C2_Init+0x74>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f7a:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <MX_I2C2_Init+0x74>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f80:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <MX_I2C2_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <MX_I2C2_Init+0x74>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <MX_I2C2_Init+0x74>)
 8000f8e:	f002 fc29 	bl	80037e4 <HAL_I2C_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f98:	f000 fcad 	bl	80018f6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4809      	ldr	r0, [pc, #36]	; (8000fc4 <MX_I2C2_Init+0x74>)
 8000fa0:	f003 fc1a 	bl	80047d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000faa:	f000 fca4 	bl	80018f6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <MX_I2C2_Init+0x74>)
 8000fb2:	f003 fc4d 	bl	8004850 <HAL_I2CEx_ConfigDigitalFilter>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000fbc:	f000 fc9b 	bl	80018f6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000098 	.word	0x20000098
 8000fc8:	40005800 	.word	0x40005800
 8000fcc:	000186a0 	.word	0x000186a0

08000fd0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_RTC_Init+0x44>)
 8000fd6:	4a10      	ldr	r2, [pc, #64]	; (8001018 <MX_RTC_Init+0x48>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <MX_RTC_Init+0x44>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <MX_RTC_Init+0x44>)
 8000fe2:	227f      	movs	r2, #127	; 0x7f
 8000fe4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <MX_RTC_Init+0x44>)
 8000fe8:	22ff      	movs	r2, #255	; 0xff
 8000fea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MX_RTC_Init+0x44>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <MX_RTC_Init+0x44>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <MX_RTC_Init+0x44>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_RTC_Init+0x44>)
 8001000:	f004 fa7e 	bl	8005500 <HAL_RTC_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800100a:	f000 fc74 	bl	80018f6 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200000ec 	.word	0x200000ec
 8001018:	40002800 	.word	0x40002800

0800101c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001020:	4b17      	ldr	r3, [pc, #92]	; (8001080 <MX_SPI1_Init+0x64>)
 8001022:	4a18      	ldr	r2, [pc, #96]	; (8001084 <MX_SPI1_Init+0x68>)
 8001024:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001026:	4b16      	ldr	r3, [pc, #88]	; (8001080 <MX_SPI1_Init+0x64>)
 8001028:	f44f 7282 	mov.w	r2, #260	; 0x104
 800102c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <MX_SPI1_Init+0x64>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <MX_SPI1_Init+0x64>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_SPI1_Init+0x64>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <MX_SPI1_Init+0x64>)
 8001042:	2200      	movs	r2, #0
 8001044:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_SPI1_Init+0x64>)
 8001048:	f44f 7200 	mov.w	r2, #512	; 0x200
 800104c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <MX_SPI1_Init+0x64>)
 8001050:	2200      	movs	r2, #0
 8001052:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001054:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <MX_SPI1_Init+0x64>)
 8001056:	2200      	movs	r2, #0
 8001058:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MX_SPI1_Init+0x64>)
 800105c:	2200      	movs	r2, #0
 800105e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <MX_SPI1_Init+0x64>)
 8001062:	2200      	movs	r2, #0
 8001064:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_SPI1_Init+0x64>)
 8001068:	220a      	movs	r2, #10
 800106a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800106c:	4804      	ldr	r0, [pc, #16]	; (8001080 <MX_SPI1_Init+0x64>)
 800106e:	f004 fd53 	bl	8005b18 <HAL_SPI_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001078:	f000 fc3d 	bl	80018f6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	2000010c 	.word	0x2000010c
 8001084:	40013000 	.word	0x40013000

08001088 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <MX_SPI2_Init+0x64>)
 800108e:	4a18      	ldr	r2, [pc, #96]	; (80010f0 <MX_SPI2_Init+0x68>)
 8001090:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <MX_SPI2_Init+0x64>)
 8001094:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001098:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_SPI2_Init+0x64>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_SPI2_Init+0x64>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_SPI2_Init+0x64>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_SPI2_Init+0x64>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_SPI2_Init+0x64>)
 80010b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_SPI2_Init+0x64>)
 80010bc:	2200      	movs	r2, #0
 80010be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <MX_SPI2_Init+0x64>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_SPI2_Init+0x64>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <MX_SPI2_Init+0x64>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_SPI2_Init+0x64>)
 80010d4:	220a      	movs	r2, #10
 80010d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_SPI2_Init+0x64>)
 80010da:	f004 fd1d 	bl	8005b18 <HAL_SPI_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80010e4:	f000 fc07 	bl	80018f6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000164 	.word	0x20000164
 80010f0:	40003800 	.word	0x40003800

080010f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fa:	463b      	mov	r3, r7
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <MX_TIM6_Init+0x64>)
 8001104:	4a15      	ldr	r2, [pc, #84]	; (800115c <MX_TIM6_Init+0x68>)
 8001106:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <MX_TIM6_Init+0x64>)
 800110a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800110e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_TIM6_Init+0x64>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 40;
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <MX_TIM6_Init+0x64>)
 8001118:	2228      	movs	r2, #40	; 0x28
 800111a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_TIM6_Init+0x64>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001122:	480d      	ldr	r0, [pc, #52]	; (8001158 <MX_TIM6_Init+0x64>)
 8001124:	f005 fc16 	bl	8006954 <HAL_TIM_Base_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800112e:	f000 fbe2 	bl	80018f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001132:	2300      	movs	r3, #0
 8001134:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800113a:	463b      	mov	r3, r7
 800113c:	4619      	mov	r1, r3
 800113e:	4806      	ldr	r0, [pc, #24]	; (8001158 <MX_TIM6_Init+0x64>)
 8001140:	f005 fe96 	bl	8006e70 <HAL_TIMEx_MasterConfigSynchronization>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800114a:	f000 fbd4 	bl	80018f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2000027c 	.word	0x2000027c
 800115c:	40001000 	.word	0x40001000

08001160 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001166:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <MX_USART2_UART_Init+0x50>)
 8001168:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 800116c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001170:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001198:	f005 fefa 	bl	8006f90 <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011a2:	f000 fba8 	bl	80018f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200002c4 	.word	0x200002c4
 80011b0:	40004400 	.word	0x40004400

080011b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	4b17      	ldr	r3, [pc, #92]	; (800121c <MX_DMA_Init+0x68>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a16      	ldr	r2, [pc, #88]	; (800121c <MX_DMA_Init+0x68>)
 80011c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b14      	ldr	r3, [pc, #80]	; (800121c <MX_DMA_Init+0x68>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <MX_DMA_Init+0x68>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a0f      	ldr	r2, [pc, #60]	; (800121c <MX_DMA_Init+0x68>)
 80011e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <MX_DMA_Init+0x68>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	200f      	movs	r0, #15
 80011f8:	f001 fcc3 	bl	8002b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80011fc:	200f      	movs	r0, #15
 80011fe:	f001 fcdc 	bl	8002bba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	203b      	movs	r0, #59	; 0x3b
 8001208:	f001 fcbb 	bl	8002b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800120c:	203b      	movs	r0, #59	; 0x3b
 800120e:	f001 fcd4 	bl	8002bba <HAL_NVIC_EnableIRQ>

}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800

08001220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	4b61      	ldr	r3, [pc, #388]	; (80013c0 <MX_GPIO_Init+0x1a0>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a60      	ldr	r2, [pc, #384]	; (80013c0 <MX_GPIO_Init+0x1a0>)
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b5e      	ldr	r3, [pc, #376]	; (80013c0 <MX_GPIO_Init+0x1a0>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b5a      	ldr	r3, [pc, #360]	; (80013c0 <MX_GPIO_Init+0x1a0>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a59      	ldr	r2, [pc, #356]	; (80013c0 <MX_GPIO_Init+0x1a0>)
 800125c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b57      	ldr	r3, [pc, #348]	; (80013c0 <MX_GPIO_Init+0x1a0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	4b53      	ldr	r3, [pc, #332]	; (80013c0 <MX_GPIO_Init+0x1a0>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a52      	ldr	r2, [pc, #328]	; (80013c0 <MX_GPIO_Init+0x1a0>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b50      	ldr	r3, [pc, #320]	; (80013c0 <MX_GPIO_Init+0x1a0>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	4b4c      	ldr	r3, [pc, #304]	; (80013c0 <MX_GPIO_Init+0x1a0>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a4b      	ldr	r2, [pc, #300]	; (80013c0 <MX_GPIO_Init+0x1a0>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b49      	ldr	r3, [pc, #292]	; (80013c0 <MX_GPIO_Init+0x1a0>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	603b      	str	r3, [r7, #0]
 80012aa:	4b45      	ldr	r3, [pc, #276]	; (80013c0 <MX_GPIO_Init+0x1a0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a44      	ldr	r2, [pc, #272]	; (80013c0 <MX_GPIO_Init+0x1a0>)
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b42      	ldr	r3, [pc, #264]	; (80013c0 <MX_GPIO_Init+0x1a0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_WP_GPIO_Port, SPI2_WP_Pin, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2101      	movs	r1, #1
 80012c6:	483f      	ldr	r0, [pc, #252]	; (80013c4 <MX_GPIO_Init+0x1a4>)
 80012c8:	f002 fa58 	bl	800377c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_WP_GPIO_Port, SPI1_WP_Pin, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2110      	movs	r1, #16
 80012d0:	483d      	ldr	r0, [pc, #244]	; (80013c8 <MX_GPIO_Init+0x1a8>)
 80012d2:	f002 fa53 	bl	800377c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	f44f 41a1 	mov.w	r1, #20608	; 0x5080
 80012dc:	483b      	ldr	r0, [pc, #236]	; (80013cc <MX_GPIO_Init+0x1ac>)
 80012de:	f002 fa4d 	bl	800377c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2104      	movs	r1, #4
 80012e6:	483a      	ldr	r0, [pc, #232]	; (80013d0 <MX_GPIO_Init+0x1b0>)
 80012e8:	f002 fa48 	bl	800377c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_WP_Pin */
  GPIO_InitStruct.Pin = SPI2_WP_Pin;
 80012ec:	2301      	movs	r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_WP_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	4830      	ldr	r0, [pc, #192]	; (80013c4 <MX_GPIO_Init+0x1a4>)
 8001304:	f002 f876 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_WP_Pin */
  GPIO_InitStruct.Pin = SPI1_WP_Pin;
 8001308:	2310      	movs	r3, #16
 800130a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001310:	2301      	movs	r3, #1
 8001312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_WP_GPIO_Port, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	482a      	ldr	r0, [pc, #168]	; (80013c8 <MX_GPIO_Init+0x1a8>)
 8001320:	f002 f868 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : JMP_Flight_Pin */
  GPIO_InitStruct.Pin = JMP_Flight_Pin;
 8001324:	2302      	movs	r3, #2
 8001326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001328:	2300      	movs	r3, #0
 800132a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800132c:	2302      	movs	r3, #2
 800132e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(JMP_Flight_GPIO_Port, &GPIO_InitStruct);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4619      	mov	r1, r3
 8001336:	4825      	ldr	r0, [pc, #148]	; (80013cc <MX_GPIO_Init+0x1ac>)
 8001338:	f002 f85c 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800133c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	2301      	movs	r3, #1
 8001344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001346:	2301      	movs	r3, #1
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	481d      	ldr	r0, [pc, #116]	; (80013cc <MX_GPIO_Init+0x1ac>)
 8001356:	f002 f84d 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800135a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800135e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001364:	2302      	movs	r3, #2
 8001366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4619      	mov	r1, r3
 8001372:	4816      	ldr	r0, [pc, #88]	; (80013cc <MX_GPIO_Init+0x1ac>)
 8001374:	f002 f83e 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001378:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800137c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001386:	2303      	movs	r3, #3
 8001388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800138a:	2309      	movs	r3, #9
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	480c      	ldr	r0, [pc, #48]	; (80013c8 <MX_GPIO_Init+0x1a8>)
 8001396:	f002 f82d 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800139a:	2304      	movs	r3, #4
 800139c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	2301      	movs	r3, #1
 80013a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	4807      	ldr	r0, [pc, #28]	; (80013d0 <MX_GPIO_Init+0x1b0>)
 80013b2:	f002 f81f 	bl	80033f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	; 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020800 	.word	0x40020800
 80013c8:	40020000 	.word	0x40020000
 80013cc:	40020400 	.word	0x40020400
 80013d0:	40020c00 	.word	0x40020c00

080013d4 <clean_data_buffer>:

/* USER CODE BEGIN 4 */
void clean_data_buffer(uint16_t array_size, uint8_t data_array[array_size]) {
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < array_size; ++i) {
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	e007      	b.n	80013f6 <clean_data_buffer+0x22>
    	data_array[i] = 0xFF;  // Initialize each element to 0xFF
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	22ff      	movs	r2, #255	; 0xff
 80013ee:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < array_size; ++i) {
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3301      	adds	r3, #1
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	dbf3      	blt.n	80013e6 <clean_data_buffer+0x12>
    }
}
 80013fe:	bf00      	nop
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <systemInit>:

void systemInit() {
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
	gpio_set_config();
 8001412:	f000 f8b9 	bl	8001588 <gpio_set_config>

	HAL_GPIO_WritePin(led_orange.GPIOx, led_orange.GPIO_Pin, GPIO_PIN_RESET);	// Turn LED off
 8001416:	4b47      	ldr	r3, [pc, #284]	; (8001534 <systemInit+0x128>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a46      	ldr	r2, [pc, #280]	; (8001534 <systemInit+0x128>)
 800141c:	8891      	ldrh	r1, [r2, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f002 f9ab 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cs_spi1.GPIOx, cs_spi1.GPIO_Pin, GPIO_PIN_SET);		// SET SPI CS High to disable bus 1
 8001426:	4b44      	ldr	r3, [pc, #272]	; (8001538 <systemInit+0x12c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a43      	ldr	r2, [pc, #268]	; (8001538 <systemInit+0x12c>)
 800142c:	8891      	ldrh	r1, [r2, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	4618      	mov	r0, r3
 8001432:	f002 f9a3 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cs_spi2.GPIOx, cs_spi2.GPIO_Pin, GPIO_PIN_SET);		// SET SPI CS High to disable bus 2
 8001436:	4b41      	ldr	r3, [pc, #260]	; (800153c <systemInit+0x130>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a40      	ldr	r2, [pc, #256]	; (800153c <systemInit+0x130>)
 800143c:	8891      	ldrh	r1, [r2, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	4618      	mov	r0, r3
 8001442:	f002 f99b 	bl	800377c <HAL_GPIO_WritePin>

	// Clean the data buffer and set all values to 0xFF
	next_blank_page = 0;
 8001446:	4b3e      	ldr	r3, [pc, #248]	; (8001540 <systemInit+0x134>)
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]

	clean_data_buffer(PAGE_SIZE, data_buffer_tx[0]);
 800144c:	493d      	ldr	r1, [pc, #244]	; (8001544 <systemInit+0x138>)
 800144e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001452:	f7ff ffbf 	bl	80013d4 <clean_data_buffer>
	clean_data_buffer(PAGE_SIZE, data_buffer_tx[1]);
 8001456:	493c      	ldr	r1, [pc, #240]	; (8001548 <systemInit+0x13c>)
 8001458:	f44f 7080 	mov.w	r0, #256	; 0x100
 800145c:	f7ff ffba 	bl	80013d4 <clean_data_buffer>

	for (uint8_t i = 0; i < 6; i++) {
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]
 8001464:	e00e      	b.n	8001484 <systemInit+0x78>
		accel_data[i] = 0x00;
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	4a38      	ldr	r2, [pc, #224]	; (800154c <systemInit+0x140>)
 800146a:	2100      	movs	r1, #0
 800146c:	54d1      	strb	r1, [r2, r3]
		bme280_data_1[i] = 0x00;
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	4a37      	ldr	r2, [pc, #220]	; (8001550 <systemInit+0x144>)
 8001472:	2100      	movs	r1, #0
 8001474:	54d1      	strb	r1, [r2, r3]
		bme280_data_2[i] = 0x00;
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	4a36      	ldr	r2, [pc, #216]	; (8001554 <systemInit+0x148>)
 800147a:	2100      	movs	r1, #0
 800147c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 6; i++) {
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	3301      	adds	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	2b05      	cmp	r3, #5
 8001488:	d9ed      	bls.n	8001466 <systemInit+0x5a>
	}

	// Initialise the peripherals
	init_accel(&hi2c1);
 800148a:	4833      	ldr	r0, [pc, #204]	; (8001558 <systemInit+0x14c>)
 800148c:	f7ff f834 	bl	80004f8 <init_accel>
	init_bme280(&hi2c2, 0);
 8001490:	2100      	movs	r1, #0
 8001492:	4832      	ldr	r0, [pc, #200]	; (800155c <systemInit+0x150>)
 8001494:	f7ff f88e 	bl	80005b4 <init_bme280>
	init_bme280(&hi2c2, 1);
 8001498:	2101      	movs	r1, #1
 800149a:	4830      	ldr	r0, [pc, #192]	; (800155c <systemInit+0x150>)
 800149c:	f7ff f88a 	bl	80005b4 <init_bme280>
	software_reset(&hspi1, cs_spi1);
 80014a0:	4b25      	ldr	r3, [pc, #148]	; (8001538 <systemInit+0x12c>)
 80014a2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80014a6:	482e      	ldr	r0, [pc, #184]	; (8001560 <systemInit+0x154>)
 80014a8:	f7ff fa1e 	bl	80008e8 <software_reset>
	software_reset(&hspi2, cs_spi2);
 80014ac:	4b23      	ldr	r3, [pc, #140]	; (800153c <systemInit+0x130>)
 80014ae:	e893 0006 	ldmia.w	r3, {r1, r2}
 80014b2:	482c      	ldr	r0, [pc, #176]	; (8001564 <systemInit+0x158>)
 80014b4:	f7ff fa18 	bl	80008e8 <software_reset>

	int next_blank_page0 = find_next_blank_page(&hspi1, &end_of_flash, cs_spi1);
 80014b8:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <systemInit+0x12c>)
 80014ba:	cb0c      	ldmia	r3, {r2, r3}
 80014bc:	492a      	ldr	r1, [pc, #168]	; (8001568 <systemInit+0x15c>)
 80014be:	4828      	ldr	r0, [pc, #160]	; (8001560 <systemInit+0x154>)
 80014c0:	f7ff fa64 	bl	800098c <find_next_blank_page>
 80014c4:	4603      	mov	r3, r0
 80014c6:	60bb      	str	r3, [r7, #8]
	int next_blank_page1 = find_next_blank_page(&hspi2, &end_of_flash, cs_spi2);
 80014c8:	4b1c      	ldr	r3, [pc, #112]	; (800153c <systemInit+0x130>)
 80014ca:	cb0c      	ldmia	r3, {r2, r3}
 80014cc:	4926      	ldr	r1, [pc, #152]	; (8001568 <systemInit+0x15c>)
 80014ce:	4825      	ldr	r0, [pc, #148]	; (8001564 <systemInit+0x158>)
 80014d0:	f7ff fa5c 	bl	800098c <find_next_blank_page>
 80014d4:	4603      	mov	r3, r0
 80014d6:	607b      	str	r3, [r7, #4]

	// Assign the value of next_blank_page to the larger of next_blank_page0 and next_blank_page1
	next_blank_page = (next_blank_page0 > next_blank_page1) ? next_blank_page0 : next_blank_page1;
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	4293      	cmp	r3, r2
 80014de:	bfb8      	it	lt
 80014e0:	4613      	movlt	r3, r2
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b16      	ldr	r3, [pc, #88]	; (8001540 <systemInit+0x134>)
 80014e6:	601a      	str	r2, [r3, #0]

	buffer_ref = 0;
 80014e8:	4b20      	ldr	r3, [pc, #128]	; (800156c <systemInit+0x160>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
	byte_tracker = 0;
 80014ee:	4b20      	ldr	r3, [pc, #128]	; (8001570 <systemInit+0x164>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	801a      	strh	r2, [r3, #0]
	end_of_flash = GPIO_PIN_RESET;
 80014f4:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <systemInit+0x15c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
	uart2_rec_flag = 0;
 80014fa:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <systemInit+0x168>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]

	send_uart_hex(&huart2, systemStatus(&hspi1, &hspi2, &hi2c1, &hi2c2));
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <systemInit+0x150>)
 8001502:	4a15      	ldr	r2, [pc, #84]	; (8001558 <systemInit+0x14c>)
 8001504:	4917      	ldr	r1, [pc, #92]	; (8001564 <systemInit+0x158>)
 8001506:	4816      	ldr	r0, [pc, #88]	; (8001560 <systemInit+0x154>)
 8001508:	f000 f9fa 	bl	8001900 <systemStatus>
 800150c:	4603      	mov	r3, r0
 800150e:	4619      	mov	r1, r3
 8001510:	4819      	ldr	r0, [pc, #100]	; (8001578 <systemInit+0x16c>)
 8001512:	f001 f986 	bl	8002822 <send_uart_hex>

	// Initiate clocks, interrupts and DMA
	HAL_UART_Receive_IT(&huart2, UARTRxData, 2);
 8001516:	2202      	movs	r2, #2
 8001518:	4918      	ldr	r1, [pc, #96]	; (800157c <systemInit+0x170>)
 800151a:	4817      	ldr	r0, [pc, #92]	; (8001578 <systemInit+0x16c>)
 800151c:	f005 fe13 	bl	8007146 <HAL_UART_Receive_IT>
	initialise_rtc_default(&hrtc);
 8001520:	4817      	ldr	r0, [pc, #92]	; (8001580 <systemInit+0x174>)
 8001522:	f000 fd11 	bl	8001f48 <initialise_rtc_default>
	HAL_TIM_Base_Start_IT(&htim6);
 8001526:	4817      	ldr	r0, [pc, #92]	; (8001584 <systemInit+0x178>)
 8001528:	f005 fa64 	bl	80069f4 <HAL_TIM_Base_Start_IT>
}
 800152c:	bf00      	nop
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000534 	.word	0x20000534
 8001538:	20000544 	.word	0x20000544
 800153c:	20000554 	.word	0x20000554
 8001540:	2000052c 	.word	0x2000052c
 8001544:	20000310 	.word	0x20000310
 8001548:	20000410 	.word	0x20000410
 800154c:	20000514 	.word	0x20000514
 8001550:	2000051c 	.word	0x2000051c
 8001554:	20000524 	.word	0x20000524
 8001558:	20000044 	.word	0x20000044
 800155c:	20000098 	.word	0x20000098
 8001560:	2000010c 	.word	0x2000010c
 8001564:	20000164 	.word	0x20000164
 8001568:	20000532 	.word	0x20000532
 800156c:	2000052a 	.word	0x2000052a
 8001570:	20000530 	.word	0x20000530
 8001574:	2000030e 	.word	0x2000030e
 8001578:	200002c4 	.word	0x200002c4
 800157c:	2000030c 	.word	0x2000030c
 8001580:	200000ec 	.word	0x200000ec
 8001584:	2000027c 	.word	0x2000027c

08001588 <gpio_set_config>:

void gpio_set_config() {
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
	// Orange LED (Heartbeat LED)
	led_orange = create_GPIO_Config(GPIOB, GPIO_PIN_14);
 800158e:	4c30      	ldr	r4, [pc, #192]	; (8001650 <gpio_set_config+0xc8>)
 8001590:	463b      	mov	r3, r7
 8001592:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001596:	492f      	ldr	r1, [pc, #188]	; (8001654 <gpio_set_config+0xcc>)
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fad7 	bl	8000b4c <create_GPIO_Config>
 800159e:	4622      	mov	r2, r4
 80015a0:	463b      	mov	r3, r7
 80015a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015a6:	e882 0003 	stmia.w	r2, {r0, r1}

	// Green LED (Hard Drive LED)
	led_green = create_GPIO_Config(GPIOB, GPIO_PIN_7);
 80015aa:	4c2b      	ldr	r4, [pc, #172]	; (8001658 <gpio_set_config+0xd0>)
 80015ac:	463b      	mov	r3, r7
 80015ae:	2280      	movs	r2, #128	; 0x80
 80015b0:	4928      	ldr	r1, [pc, #160]	; (8001654 <gpio_set_config+0xcc>)
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff faca 	bl	8000b4c <create_GPIO_Config>
 80015b8:	4622      	mov	r2, r4
 80015ba:	463b      	mov	r3, r7
 80015bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015c0:	e882 0003 	stmia.w	r2, {r0, r1}

	// SPI Flash 0 CS and WP
	cs_spi1 = create_GPIO_Config(GPIOD, GPIO_PIN_2);		// Change for SRAD
 80015c4:	4c25      	ldr	r4, [pc, #148]	; (800165c <gpio_set_config+0xd4>)
 80015c6:	463b      	mov	r3, r7
 80015c8:	2204      	movs	r2, #4
 80015ca:	4925      	ldr	r1, [pc, #148]	; (8001660 <gpio_set_config+0xd8>)
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fabd 	bl	8000b4c <create_GPIO_Config>
 80015d2:	4622      	mov	r2, r4
 80015d4:	463b      	mov	r3, r7
 80015d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015da:	e882 0003 	stmia.w	r2, {r0, r1}
	wp_spi1 = create_GPIO_Config(GPIOA, GPIO_PIN_4);
 80015de:	4c21      	ldr	r4, [pc, #132]	; (8001664 <gpio_set_config+0xdc>)
 80015e0:	463b      	mov	r3, r7
 80015e2:	2210      	movs	r2, #16
 80015e4:	4920      	ldr	r1, [pc, #128]	; (8001668 <gpio_set_config+0xe0>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fab0 	bl	8000b4c <create_GPIO_Config>
 80015ec:	4622      	mov	r2, r4
 80015ee:	463b      	mov	r3, r7
 80015f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015f4:	e882 0003 	stmia.w	r2, {r0, r1}

	// SPI Flash 1 CS and WP
	cs_spi2 = create_GPIO_Config(GPIOB, GPIO_PIN_12);		// Change for SRAD
 80015f8:	4c1c      	ldr	r4, [pc, #112]	; (800166c <gpio_set_config+0xe4>)
 80015fa:	463b      	mov	r3, r7
 80015fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001600:	4914      	ldr	r1, [pc, #80]	; (8001654 <gpio_set_config+0xcc>)
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff faa2 	bl	8000b4c <create_GPIO_Config>
 8001608:	4622      	mov	r2, r4
 800160a:	463b      	mov	r3, r7
 800160c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001610:	e882 0003 	stmia.w	r2, {r0, r1}
	wp_spi2 = create_GPIO_Config(GPIOC, GPIO_PIN_0);
 8001614:	4c16      	ldr	r4, [pc, #88]	; (8001670 <gpio_set_config+0xe8>)
 8001616:	463b      	mov	r3, r7
 8001618:	2201      	movs	r2, #1
 800161a:	4916      	ldr	r1, [pc, #88]	; (8001674 <gpio_set_config+0xec>)
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fa95 	bl	8000b4c <create_GPIO_Config>
 8001622:	4622      	mov	r2, r4
 8001624:	463b      	mov	r3, r7
 8001626:	e893 0003 	ldmia.w	r3, {r0, r1}
 800162a:	e882 0003 	stmia.w	r2, {r0, r1}

	// Flight Jumper GPIO Input
	jmp_flight = create_GPIO_Config(GPIOB, GPIO_PIN_1);
 800162e:	4c12      	ldr	r4, [pc, #72]	; (8001678 <gpio_set_config+0xf0>)
 8001630:	463b      	mov	r3, r7
 8001632:	2202      	movs	r2, #2
 8001634:	4907      	ldr	r1, [pc, #28]	; (8001654 <gpio_set_config+0xcc>)
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fa88 	bl	8000b4c <create_GPIO_Config>
 800163c:	4622      	mov	r2, r4
 800163e:	463b      	mov	r3, r7
 8001640:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001644:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	bd90      	pop	{r4, r7, pc}
 8001650:	20000534 	.word	0x20000534
 8001654:	40020400 	.word	0x40020400
 8001658:	2000053c 	.word	0x2000053c
 800165c:	20000544 	.word	0x20000544
 8001660:	40020c00 	.word	0x40020c00
 8001664:	2000054c 	.word	0x2000054c
 8001668:	40020000 	.word	0x40020000
 800166c:	20000554 	.word	0x20000554
 8001670:	2000055c 	.word	0x2000055c
 8001674:	40020800 	.word	0x40020800
 8001678:	20000564 	.word	0x20000564

0800167c <handleUART>:

void handleUART() {
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
	UART_HandleTypeDef *huart = &huart2;
 8001682:	4b87      	ldr	r3, [pc, #540]	; (80018a0 <handleUART+0x224>)
 8001684:	607b      	str	r3, [r7, #4]

	// Send Heartbeat to UART (data_rx[0] = "h")
	if (UARTRxData[0] == 0x68) {
 8001686:	4b87      	ldr	r3, [pc, #540]	; (80018a4 <handleUART+0x228>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b68      	cmp	r3, #104	; 0x68
 800168c:	d10e      	bne.n	80016ac <handleUART+0x30>
		heartbeatUART(huart);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f988 	bl	80019a4 <heartbeatUART>
		send_uart_hex(huart, systemStatus(&hspi1, &hspi2, &hi2c1, &hi2c2));
 8001694:	4b84      	ldr	r3, [pc, #528]	; (80018a8 <handleUART+0x22c>)
 8001696:	4a85      	ldr	r2, [pc, #532]	; (80018ac <handleUART+0x230>)
 8001698:	4985      	ldr	r1, [pc, #532]	; (80018b0 <handleUART+0x234>)
 800169a:	4886      	ldr	r0, [pc, #536]	; (80018b4 <handleUART+0x238>)
 800169c:	f000 f930 	bl	8001900 <systemStatus>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4619      	mov	r1, r3
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f001 f8bc 	bl	8002822 <send_uart_hex>
 80016aa:	e0eb      	b.n	8001884 <handleUART+0x208>
	}

/***************************** SPI Flash ************************************************/
	// Erase specified flash chip (data_rx[0]  = "e")
	else if (UARTRxData[0] == 0x65) {
 80016ac:	4b7d      	ldr	r3, [pc, #500]	; (80018a4 <handleUART+0x228>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b65      	cmp	r3, #101	; 0x65
 80016b2:	d11e      	bne.n	80016f2 <handleUART+0x76>
		if(decodeASCII(UARTRxData[1]) == 0) {
 80016b4:	4b7b      	ldr	r3, [pc, #492]	; (80018a4 <handleUART+0x228>)
 80016b6:	785b      	ldrb	r3, [r3, #1]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 f903 	bl	80018c4 <decodeASCII>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d106      	bne.n	80016d2 <handleUART+0x56>
			eraseFlashSPI(&hspi1, huart, cs_spi1);
 80016c4:	4b7c      	ldr	r3, [pc, #496]	; (80018b8 <handleUART+0x23c>)
 80016c6:	cb0c      	ldmia	r3, {r2, r3}
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	487a      	ldr	r0, [pc, #488]	; (80018b4 <handleUART+0x238>)
 80016cc:	f000 f976 	bl	80019bc <eraseFlashSPI>
 80016d0:	e0d8      	b.n	8001884 <handleUART+0x208>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 80016d2:	4b74      	ldr	r3, [pc, #464]	; (80018a4 <handleUART+0x228>)
 80016d4:	785b      	ldrb	r3, [r3, #1]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 f8f4 	bl	80018c4 <decodeASCII>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b01      	cmp	r3, #1
 80016e0:	f040 80d0 	bne.w	8001884 <handleUART+0x208>
			eraseFlashSPI(&hspi2, huart, cs_spi2);
 80016e4:	4b75      	ldr	r3, [pc, #468]	; (80018bc <handleUART+0x240>)
 80016e6:	cb0c      	ldmia	r3, {r2, r3}
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	4871      	ldr	r0, [pc, #452]	; (80018b0 <handleUART+0x234>)
 80016ec:	f000 f966 	bl	80019bc <eraseFlashSPI>
 80016f0:	e0c8      	b.n	8001884 <handleUART+0x208>
		}
	}

	// Read data from specified flash chip (data_rx[0] = "r")
	else if (UARTRxData[0] == 0x72) {
 80016f2:	4b6c      	ldr	r3, [pc, #432]	; (80018a4 <handleUART+0x228>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b72      	cmp	r3, #114	; 0x72
 80016f8:	d11e      	bne.n	8001738 <handleUART+0xbc>
		if(decodeASCII(UARTRxData[1]) == 0) {
 80016fa:	4b6a      	ldr	r3, [pc, #424]	; (80018a4 <handleUART+0x228>)
 80016fc:	785b      	ldrb	r3, [r3, #1]
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f8e0 	bl	80018c4 <decodeASCII>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d106      	bne.n	8001718 <handleUART+0x9c>
			readFlashToUART(&hspi1, huart, cs_spi1);
 800170a:	4b6b      	ldr	r3, [pc, #428]	; (80018b8 <handleUART+0x23c>)
 800170c:	cb0c      	ldmia	r3, {r2, r3}
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	4868      	ldr	r0, [pc, #416]	; (80018b4 <handleUART+0x238>)
 8001712:	f000 f98f 	bl	8001a34 <readFlashToUART>
 8001716:	e0b5      	b.n	8001884 <handleUART+0x208>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 8001718:	4b62      	ldr	r3, [pc, #392]	; (80018a4 <handleUART+0x228>)
 800171a:	785b      	ldrb	r3, [r3, #1]
 800171c:	4618      	mov	r0, r3
 800171e:	f000 f8d1 	bl	80018c4 <decodeASCII>
 8001722:	4603      	mov	r3, r0
 8001724:	2b01      	cmp	r3, #1
 8001726:	f040 80ad 	bne.w	8001884 <handleUART+0x208>
			readFlashToUART(&hspi2, huart, cs_spi2);
 800172a:	4b64      	ldr	r3, [pc, #400]	; (80018bc <handleUART+0x240>)
 800172c:	cb0c      	ldmia	r3, {r2, r3}
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	485f      	ldr	r0, [pc, #380]	; (80018b0 <handleUART+0x234>)
 8001732:	f000 f97f 	bl	8001a34 <readFlashToUART>
 8001736:	e0a5      	b.n	8001884 <handleUART+0x208>
		}
	}

	// Read Manufacturer over SPI (data_rx[0] = "m")
	else if (UARTRxData[0] == 0x6d) {
 8001738:	4b5a      	ldr	r3, [pc, #360]	; (80018a4 <handleUART+0x228>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b6d      	cmp	r3, #109	; 0x6d
 800173e:	d11e      	bne.n	800177e <handleUART+0x102>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001740:	4b58      	ldr	r3, [pc, #352]	; (80018a4 <handleUART+0x228>)
 8001742:	785b      	ldrb	r3, [r3, #1]
 8001744:	4618      	mov	r0, r3
 8001746:	f000 f8bd 	bl	80018c4 <decodeASCII>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d106      	bne.n	800175e <handleUART+0xe2>
			readFlashManuSPI(&hspi1, huart, cs_spi1);
 8001750:	4b59      	ldr	r3, [pc, #356]	; (80018b8 <handleUART+0x23c>)
 8001752:	cb0c      	ldmia	r3, {r2, r3}
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4857      	ldr	r0, [pc, #348]	; (80018b4 <handleUART+0x238>)
 8001758:	f000 f9d8 	bl	8001b0c <readFlashManuSPI>
 800175c:	e092      	b.n	8001884 <handleUART+0x208>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 800175e:	4b51      	ldr	r3, [pc, #324]	; (80018a4 <handleUART+0x228>)
 8001760:	785b      	ldrb	r3, [r3, #1]
 8001762:	4618      	mov	r0, r3
 8001764:	f000 f8ae 	bl	80018c4 <decodeASCII>
 8001768:	4603      	mov	r3, r0
 800176a:	2b01      	cmp	r3, #1
 800176c:	f040 808a 	bne.w	8001884 <handleUART+0x208>
			readFlashManuSPI(&hspi2, huart, cs_spi2);
 8001770:	4b52      	ldr	r3, [pc, #328]	; (80018bc <handleUART+0x240>)
 8001772:	cb0c      	ldmia	r3, {r2, r3}
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	484e      	ldr	r0, [pc, #312]	; (80018b0 <handleUART+0x234>)
 8001778:	f000 f9c8 	bl	8001b0c <readFlashManuSPI>
 800177c:	e082      	b.n	8001884 <handleUART+0x208>
		}
	}

	// Write a page over SPI (data_rx[0] = "w")
	else if (UARTRxData[0] == 0x77) {
 800177e:	4b49      	ldr	r3, [pc, #292]	; (80018a4 <handleUART+0x228>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b77      	cmp	r3, #119	; 0x77
 8001784:	d11d      	bne.n	80017c2 <handleUART+0x146>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001786:	4b47      	ldr	r3, [pc, #284]	; (80018a4 <handleUART+0x228>)
 8001788:	785b      	ldrb	r3, [r3, #1]
 800178a:	4618      	mov	r0, r3
 800178c:	f000 f89a 	bl	80018c4 <decodeASCII>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d106      	bne.n	80017a4 <handleUART+0x128>
			writePageSPI_W(&hspi1, huart, cs_spi1);
 8001796:	4b48      	ldr	r3, [pc, #288]	; (80018b8 <handleUART+0x23c>)
 8001798:	cb0c      	ldmia	r3, {r2, r3}
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	4845      	ldr	r0, [pc, #276]	; (80018b4 <handleUART+0x238>)
 800179e:	f000 f9d5 	bl	8001b4c <writePageSPI_W>
 80017a2:	e06f      	b.n	8001884 <handleUART+0x208>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 80017a4:	4b3f      	ldr	r3, [pc, #252]	; (80018a4 <handleUART+0x228>)
 80017a6:	785b      	ldrb	r3, [r3, #1]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 f88b 	bl	80018c4 <decodeASCII>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d167      	bne.n	8001884 <handleUART+0x208>
			writePageSPI_W(&hspi2, huart, cs_spi2);
 80017b4:	4b41      	ldr	r3, [pc, #260]	; (80018bc <handleUART+0x240>)
 80017b6:	cb0c      	ldmia	r3, {r2, r3}
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	483d      	ldr	r0, [pc, #244]	; (80018b0 <handleUART+0x234>)
 80017bc:	f000 f9c6 	bl	8001b4c <writePageSPI_W>
 80017c0:	e060      	b.n	8001884 <handleUART+0x208>
		}
	}

	// Software reset flash chip over SPI (data_rx[0] = "x")
	else if (UARTRxData[0] == 0x78) {
 80017c2:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <handleUART+0x228>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b78      	cmp	r3, #120	; 0x78
 80017c8:	d11d      	bne.n	8001806 <handleUART+0x18a>
		if(decodeASCII(UARTRxData[1]) == 0) {
 80017ca:	4b36      	ldr	r3, [pc, #216]	; (80018a4 <handleUART+0x228>)
 80017cc:	785b      	ldrb	r3, [r3, #1]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 f878 	bl	80018c4 <decodeASCII>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d106      	bne.n	80017e8 <handleUART+0x16c>
			resetSPIFlash(&hspi1, huart, cs_spi1);
 80017da:	4b37      	ldr	r3, [pc, #220]	; (80018b8 <handleUART+0x23c>)
 80017dc:	cb0c      	ldmia	r3, {r2, r3}
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4834      	ldr	r0, [pc, #208]	; (80018b4 <handleUART+0x238>)
 80017e2:	f000 fa07 	bl	8001bf4 <resetSPIFlash>
 80017e6:	e04d      	b.n	8001884 <handleUART+0x208>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 80017e8:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <handleUART+0x228>)
 80017ea:	785b      	ldrb	r3, [r3, #1]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 f869 	bl	80018c4 <decodeASCII>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d145      	bne.n	8001884 <handleUART+0x208>
			resetSPIFlash(&hspi2, huart, cs_spi2);
 80017f8:	4b30      	ldr	r3, [pc, #192]	; (80018bc <handleUART+0x240>)
 80017fa:	cb0c      	ldmia	r3, {r2, r3}
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	482c      	ldr	r0, [pc, #176]	; (80018b0 <handleUART+0x234>)
 8001800:	f000 f9f8 	bl	8001bf4 <resetSPIFlash>
 8001804:	e03e      	b.n	8001884 <handleUART+0x208>
		}
	}

/*********************************** I2C Accelerometer ***********************************/
	// Read Accelerometer WhoAmI (data_rx[0] = "c")
	else if (UARTRxData[0] == 0x63) {
 8001806:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <handleUART+0x228>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b63      	cmp	r3, #99	; 0x63
 800180c:	d104      	bne.n	8001818 <handleUART+0x19c>
		checkAccelWhoAmI(&hi2c1, huart);
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4826      	ldr	r0, [pc, #152]	; (80018ac <handleUART+0x230>)
 8001812:	f000 fa07 	bl	8001c24 <checkAccelWhoAmI>
 8001816:	e035      	b.n	8001884 <handleUART+0x208>
	}

	// Read the accelerometer and print to the UART[0] (data_rx [0] = "a")
	else if (UARTRxData[0] == 0x61) {
 8001818:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <handleUART+0x228>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b61      	cmp	r3, #97	; 0x61
 800181e:	d103      	bne.n	8001828 <handleUART+0x1ac>
		accelToUART(huart);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 fa13 	bl	8001c4c <accelToUART>
 8001826:	e02d      	b.n	8001884 <handleUART+0x208>
	}

/********************************** I2C BME280 *******************************************/
	// Read the temp sensor ID and print to the UART[0] (data_rx [0]= "b")
	else if (UARTRxData[0] == 0x62) {
 8001828:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <handleUART+0x228>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b62      	cmp	r3, #98	; 0x62
 800182e:	d10b      	bne.n	8001848 <handleUART+0x1cc>
		readTempSensorID(&hi2c2, huart, decodeASCII(UARTRxData[1]));
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <handleUART+0x228>)
 8001832:	785b      	ldrb	r3, [r3, #1]
 8001834:	4618      	mov	r0, r3
 8001836:	f000 f845 	bl	80018c4 <decodeASCII>
 800183a:	4603      	mov	r3, r0
 800183c:	461a      	mov	r2, r3
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4819      	ldr	r0, [pc, #100]	; (80018a8 <handleUART+0x22c>)
 8001842:	f000 fa1f 	bl	8001c84 <readTempSensorID>
 8001846:	e01d      	b.n	8001884 <handleUART+0x208>
	}

	// Read the temp sensor calibration registers and print to the UART (data_rx[0] = "p")
	else if (UARTRxData[0] == 0x70) {
 8001848:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <handleUART+0x228>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b70      	cmp	r3, #112	; 0x70
 800184e:	d10b      	bne.n	8001868 <handleUART+0x1ec>
		readTempCalibration(&hi2c2, huart, decodeASCII(UARTRxData[1]));
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <handleUART+0x228>)
 8001852:	785b      	ldrb	r3, [r3, #1]
 8001854:	4618      	mov	r0, r3
 8001856:	f000 f835 	bl	80018c4 <decodeASCII>
 800185a:	4603      	mov	r3, r0
 800185c:	461a      	mov	r2, r3
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4811      	ldr	r0, [pc, #68]	; (80018a8 <handleUART+0x22c>)
 8001862:	f000 fa24 	bl	8001cae <readTempCalibration>
 8001866:	e00d      	b.n	8001884 <handleUART+0x208>
	}

	// Read the temp sensor and print to the UART[0] (data_rx [0]= "t")
	else if (UARTRxData[0] == 0x74) {
 8001868:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <handleUART+0x228>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b74      	cmp	r3, #116	; 0x74
 800186e:	d109      	bne.n	8001884 <handleUART+0x208>
		readTempSensor(huart, decodeASCII(UARTRxData[1]));
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <handleUART+0x228>)
 8001872:	785b      	ldrb	r3, [r3, #1]
 8001874:	4618      	mov	r0, r3
 8001876:	f000 f825 	bl	80018c4 <decodeASCII>
 800187a:	4603      	mov	r3, r0
 800187c:	4619      	mov	r1, r3
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 fa6c 	bl	8001d5c <readTempSensor>
	}

	uart2_rec_flag = 0x00;
 8001884:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <handleUART+0x244>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
	UARTRxData[0] = 0x00;
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <handleUART+0x228>)
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
	UARTRxData[1] = 0x00;
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <handleUART+0x228>)
 8001892:	2200      	movs	r2, #0
 8001894:	705a      	strb	r2, [r3, #1]
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200002c4 	.word	0x200002c4
 80018a4:	2000030c 	.word	0x2000030c
 80018a8:	20000098 	.word	0x20000098
 80018ac:	20000044 	.word	0x20000044
 80018b0:	20000164 	.word	0x20000164
 80018b4:	2000010c 	.word	0x2000010c
 80018b8:	20000544 	.word	0x20000544
 80018bc:	20000554 	.word	0x20000554
 80018c0:	2000030e 	.word	0x2000030e

080018c4 <decodeASCII>:

uint8_t decodeASCII(uint8_t asciiVal) {
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
	int returnVal = -1;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018d2:	60fb      	str	r3, [r7, #12]
	if ((asciiVal >= 48) && (asciiVal <= 57)) {
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	2b2f      	cmp	r3, #47	; 0x2f
 80018d8:	d905      	bls.n	80018e6 <decodeASCII+0x22>
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	2b39      	cmp	r3, #57	; 0x39
 80018de:	d802      	bhi.n	80018e6 <decodeASCII+0x22>
		returnVal = asciiVal - 48;
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	3b30      	subs	r3, #48	; 0x30
 80018e4:	60fb      	str	r3, [r7, #12]
	}
	return returnVal;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	b2db      	uxtb	r3, r3
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018fa:	b672      	cpsid	i
}
 80018fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018fe:	e7fe      	b.n	80018fe <Error_Handler+0x8>

08001900 <systemStatus>:

#include "peripheral_driver.h"
/***************************************************************************************************************
 * Generic Functions
 */
uint8_t systemStatus(SPI_HandleTypeDef *hspi1, SPI_HandleTypeDef *hspi2, I2C_HandleTypeDef* hi2c1, I2C_HandleTypeDef* hi2c2) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	603b      	str	r3, [r7, #0]
	uint8_t retVal = 0x00;
 800190e:	2300      	movs	r3, #0
 8001910:	75fb      	strb	r3, [r7, #23]

	// Check BME280_1
	if(readBME280_id_reg(hi2c2, 1) != 0x60) {			// Expected 0x60
 8001912:	2101      	movs	r1, #1
 8001914:	6838      	ldr	r0, [r7, #0]
 8001916:	f7fe fef3 	bl	8000700 <readBME280_id_reg>
 800191a:	4603      	mov	r3, r0
 800191c:	2b60      	cmp	r3, #96	; 0x60
 800191e:	d003      	beq.n	8001928 <systemStatus+0x28>
		retVal  = retVal | 0x10;
 8001920:	7dfb      	ldrb	r3, [r7, #23]
 8001922:	f043 0310 	orr.w	r3, r3, #16
 8001926:	75fb      	strb	r3, [r7, #23]
	}

	// Check BME280_0
	if(readBME280_id_reg(hi2c2, 0) != 0x60) {			// Expected 0x60
 8001928:	2100      	movs	r1, #0
 800192a:	6838      	ldr	r0, [r7, #0]
 800192c:	f7fe fee8 	bl	8000700 <readBME280_id_reg>
 8001930:	4603      	mov	r3, r0
 8001932:	2b60      	cmp	r3, #96	; 0x60
 8001934:	d003      	beq.n	800193e <systemStatus+0x3e>
		retVal  = retVal | 0x08;
 8001936:	7dfb      	ldrb	r3, [r7, #23]
 8001938:	f043 0308 	orr.w	r3, r3, #8
 800193c:	75fb      	strb	r3, [r7, #23]
	}

	// Check Accelerometer
	if(readAccel_whoami(hi2c1) != 0x32) {				// Expected 0x32
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7fe fe24 	bl	800058c <readAccel_whoami>
 8001944:	4603      	mov	r3, r0
 8001946:	2b32      	cmp	r3, #50	; 0x32
 8001948:	d003      	beq.n	8001952 <systemStatus+0x52>
		retVal  = retVal | 0x04;
 800194a:	7dfb      	ldrb	r3, [r7, #23]
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	75fb      	strb	r3, [r7, #23]
	}

	// Check SPIFlash_1
	uint8_t manu[2] = {0, 0};
 8001952:	2300      	movs	r3, #0
 8001954:	82bb      	strh	r3, [r7, #20]
	read_manufacturer_id(manu, hspi2, cs_spi2);
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <systemStatus+0x9c>)
 8001958:	f107 0014 	add.w	r0, r7, #20
 800195c:	cb0c      	ldmia	r3, {r2, r3}
 800195e:	68b9      	ldr	r1, [r7, #8]
 8001960:	f7ff f8d2 	bl	8000b08 <read_manufacturer_id>
	if(manu[0] != 0xEF) {								// Expected 0xEF
 8001964:	7d3b      	ldrb	r3, [r7, #20]
 8001966:	2bef      	cmp	r3, #239	; 0xef
 8001968:	d003      	beq.n	8001972 <systemStatus+0x72>
		retVal  = retVal | 0x02;
 800196a:	7dfb      	ldrb	r3, [r7, #23]
 800196c:	f043 0302 	orr.w	r3, r3, #2
 8001970:	75fb      	strb	r3, [r7, #23]
	}

	// Check SPIFlash_0
	uint8_t manu0[2] = {0, 0};
 8001972:	2300      	movs	r3, #0
 8001974:	823b      	strh	r3, [r7, #16]
	read_manufacturer_id(manu0, hspi1, cs_spi1);
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <systemStatus+0xa0>)
 8001978:	f107 0010 	add.w	r0, r7, #16
 800197c:	cb0c      	ldmia	r3, {r2, r3}
 800197e:	68f9      	ldr	r1, [r7, #12]
 8001980:	f7ff f8c2 	bl	8000b08 <read_manufacturer_id>
	if(manu0[0] != 0xEF) {								// Expected 0xEF
 8001984:	7c3b      	ldrb	r3, [r7, #16]
 8001986:	2bef      	cmp	r3, #239	; 0xef
 8001988:	d003      	beq.n	8001992 <systemStatus+0x92>
		retVal  = retVal | 0x01;
 800198a:	7dfb      	ldrb	r3, [r7, #23]
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	75fb      	strb	r3, [r7, #23]
	}
	return retVal;
 8001992:	7dfb      	ldrb	r3, [r7, #23]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000554 	.word	0x20000554
 80019a0:	20000544 	.word	0x20000544

080019a4 <heartbeatUART>:

void heartbeatUART(UART_HandleTypeDef *huart) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	send_uart_hex(huart, 0x51);			// Transmit the heartbeat as device ID (0x51 = Q)
 80019ac:	2151      	movs	r1, #81	; 0x51
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 ff37 	bl	8002822 <send_uart_hex>
}
 80019b4:	bf00      	nop
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <eraseFlashSPI>:

/***************************************************************************************************************
 * SPI Flash Functions
 */
void eraseFlashSPI(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	4639      	mov	r1, r7
 80019c8:	e881 000c 	stmia.w	r1, {r2, r3}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);		// Activate the "write out" LED
 80019cc:	2201      	movs	r2, #1
 80019ce:	2180      	movs	r1, #128	; 0x80
 80019d0:	4813      	ldr	r0, [pc, #76]	; (8001a20 <eraseFlashSPI+0x64>)
 80019d2:	f001 fed3 	bl	800377c <HAL_GPIO_WritePin>
	if (erase_chip_spi(hspi, config) == HAL_OK) {
 80019d6:	463b      	mov	r3, r7
 80019d8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f7fe ff47 	bl	8000870 <erase_chip_spi>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10d      	bne.n	8001a04 <eraseFlashSPI+0x48>
		send_uart_string(huart, "Successful Chip Erase\r\n");
 80019e8:	490e      	ldr	r1, [pc, #56]	; (8001a24 <eraseFlashSPI+0x68>)
 80019ea:	68b8      	ldr	r0, [r7, #8]
 80019ec:	f000 ff05 	bl	80027fa <send_uart_string>
		next_blank_page = find_next_blank_page(hspi, &end_of_flash, config);
 80019f0:	463b      	mov	r3, r7
 80019f2:	cb0c      	ldmia	r3, {r2, r3}
 80019f4:	490c      	ldr	r1, [pc, #48]	; (8001a28 <eraseFlashSPI+0x6c>)
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f7fe ffc8 	bl	800098c <find_next_blank_page>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <eraseFlashSPI+0x70>)
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	e003      	b.n	8001a0c <eraseFlashSPI+0x50>
	} else {
		send_uart_string(huart, "Error during chip erase. Please check the connection and try again.\r\n");
 8001a04:	490a      	ldr	r1, [pc, #40]	; (8001a30 <eraseFlashSPI+0x74>)
 8001a06:	68b8      	ldr	r0, [r7, #8]
 8001a08:	f000 fef7 	bl	80027fa <send_uart_string>
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2180      	movs	r1, #128	; 0x80
 8001a10:	4803      	ldr	r0, [pc, #12]	; (8001a20 <eraseFlashSPI+0x64>)
 8001a12:	f001 feb3 	bl	800377c <HAL_GPIO_WritePin>
}
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40020400 	.word	0x40020400
 8001a24:	080080b4 	.word	0x080080b4
 8001a28:	20000532 	.word	0x20000532
 8001a2c:	2000052c 	.word	0x2000052c
 8001a30:	080080cc 	.word	0x080080cc

08001a34 <readFlashToUART>:

void readFlashToUART(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b0cb      	sub	sp, #300	; 0x12c
 8001a38:	af02      	add	r7, sp, #8
 8001a3a:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8001a3e:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8001a42:	6020      	str	r0, [r4, #0]
 8001a44:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8001a48:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8001a4c:	6001      	str	r1, [r0, #0]
 8001a4e:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8001a52:	f5a1 7190 	sub.w	r1, r1, #288	; 0x120
 8001a56:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t num_of_pages = next_blank_page;
 8001a5a:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <readFlashToUART+0xd0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	if(num_of_pages == 0) {
 8001a62:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d103      	bne.n	8001a72 <readFlashToUART+0x3e>
		num_of_pages = PAGE_SIZE;
 8001a6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a6e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	}
	num_of_pages = num_of_pages/PAGE_SIZE;
 8001a72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001a76:	0a1b      	lsrs	r3, r3, #8
 8001a78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	uint32_t address = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);		// Activate the "write out" LED
 8001a82:	2201      	movs	r2, #1
 8001a84:	2180      	movs	r1, #128	; 0x80
 8001a86:	4820      	ldr	r0, [pc, #128]	; (8001b08 <readFlashToUART+0xd4>)
 8001a88:	f001 fe78 	bl	800377c <HAL_GPIO_WritePin>

	for (int i = 0; i < (num_of_pages); i++) {
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001a92:	e026      	b.n	8001ae2 <readFlashToUART+0xae>
		uint8_t page[PAGE_SIZE];
		read_page_spi(page, hspi, address, config);
 8001a94:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001a98:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001a9c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001aa0:	f5a2 718a 	sub.w	r1, r2, #276	; 0x114
 8001aa4:	f107 0014 	add.w	r0, r7, #20
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	9200      	str	r2, [sp, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ab2:	6809      	ldr	r1, [r1, #0]
 8001ab4:	f7ff f802 	bl	8000abc <read_page_spi>
		uart_transmit_page(huart, page);						// Transmit the data//
 8001ab8:	f107 0214 	add.w	r2, r7, #20
 8001abc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001ac0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	f000 fe86 	bl	80027d8 <uart_transmit_page>
		address += PAGE_SIZE;
 8001acc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001ad0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001ad4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	for (int i = 0; i < (num_of_pages); i++) {
 8001ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001adc:	3301      	adds	r3, #1
 8001ade:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001ae6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d8d2      	bhi.n	8001a94 <readFlashToUART+0x60>
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 8001aee:	2200      	movs	r2, #0
 8001af0:	2180      	movs	r1, #128	; 0x80
 8001af2:	4805      	ldr	r0, [pc, #20]	; (8001b08 <readFlashToUART+0xd4>)
 8001af4:	f001 fe42 	bl	800377c <HAL_GPIO_WritePin>
}
 8001af8:	bf00      	nop
 8001afa:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd90      	pop	{r4, r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2000052c 	.word	0x2000052c
 8001b08:	40020400 	.word	0x40020400

08001b0c <readFlashManuSPI>:

void readFlashManuSPI(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	4639      	mov	r1, r7
 8001b18:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t manu[2] = {0, 0};
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	82bb      	strh	r3, [r7, #20]
	read_manufacturer_id(manu, hspi, config);
 8001b20:	f107 0014 	add.w	r0, r7, #20
 8001b24:	463b      	mov	r3, r7
 8001b26:	cb0c      	ldmia	r3, {r2, r3}
 8001b28:	68f9      	ldr	r1, [r7, #12]
 8001b2a:	f7fe ffed 	bl	8000b08 <read_manufacturer_id>
	send_uart_hex(huart, manu[0]);
 8001b2e:	7d3b      	ldrb	r3, [r7, #20]
 8001b30:	4619      	mov	r1, r3
 8001b32:	68b8      	ldr	r0, [r7, #8]
 8001b34:	f000 fe75 	bl	8002822 <send_uart_hex>
	send_uart_hex(huart, manu[1]);
 8001b38:	7d7b      	ldrb	r3, [r7, #21]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	68b8      	ldr	r0, [r7, #8]
 8001b3e:	f000 fe70 	bl	8002822 <send_uart_hex>
}
 8001b42:	bf00      	nop
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <writePageSPI_W>:

void writePageSPI_W(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b0c9      	sub	sp, #292	; 0x124
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8001b56:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 8001b5a:	6020      	str	r0, [r4, #0]
 8001b5c:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8001b60:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 8001b64:	6001      	str	r1, [r0, #0]
 8001b66:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001b6a:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 8001b6e:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t data_out[PAGE_SIZE];
	for (int i = 0; i < PAGE_SIZE; i++) {
 8001b72:	2300      	movs	r3, #0
 8001b74:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001b78:	e00d      	b.n	8001b96 <writePageSPI_W+0x4a>
		data_out[i] = 0x77;		// Make all data in the page 'w'
 8001b7a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001b7e:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8001b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b86:	4413      	add	r3, r2
 8001b88:	2277      	movs	r2, #119	; 0x77
 8001b8a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < PAGE_SIZE; i++) {
 8001b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b90:	3301      	adds	r3, #1
 8001b92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b9a:	2bff      	cmp	r3, #255	; 0xff
 8001b9c:	dded      	ble.n	8001b7a <writePageSPI_W+0x2e>
	}
	write_data_spi_dma(data_out, hspi, next_blank_page, config);
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <writePageSPI_W+0xa0>)
 8001ba0:	681c      	ldr	r4, [r3, #0]
 8001ba2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ba6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001baa:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001bae:	f5a2 7186 	sub.w	r1, r2, #268	; 0x10c
 8001bb2:	f107 0014 	add.w	r0, r7, #20
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	9200      	str	r2, [sp, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4622      	mov	r2, r4
 8001bbe:	6809      	ldr	r1, [r1, #0]
 8001bc0:	f7fe feb6 	bl	8000930 <write_data_spi_dma>
	next_blank_page += PAGE_SIZE;
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <writePageSPI_W+0xa0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001bcc:	4a07      	ldr	r2, [pc, #28]	; (8001bec <writePageSPI_W+0xa0>)
 8001bce:	6013      	str	r3, [r2, #0]

	send_uart_string(huart, "Successful Page Written\r\n");
 8001bd0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001bd4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001bd8:	4905      	ldr	r1, [pc, #20]	; (8001bf0 <writePageSPI_W+0xa4>)
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	f000 fe0d 	bl	80027fa <send_uart_string>
}
 8001be0:	bf00      	nop
 8001be2:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd90      	pop	{r4, r7, pc}
 8001bea:	bf00      	nop
 8001bec:	2000052c 	.word	0x2000052c
 8001bf0:	08008114 	.word	0x08008114

08001bf4 <resetSPIFlash>:

void resetSPIFlash(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	4639      	mov	r1, r7
 8001c00:	e881 000c 	stmia.w	r1, {r2, r3}
	software_reset(hspi, config);
 8001c04:	463b      	mov	r3, r7
 8001c06:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f7fe fe6c 	bl	80008e8 <software_reset>
	send_uart_string(huart, "Flash Chip Reset\r\n");
 8001c10:	4903      	ldr	r1, [pc, #12]	; (8001c20 <resetSPIFlash+0x2c>)
 8001c12:	68b8      	ldr	r0, [r7, #8]
 8001c14:	f000 fdf1 	bl	80027fa <send_uart_string>
}
 8001c18:	bf00      	nop
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	08008130 	.word	0x08008130

08001c24 <checkAccelWhoAmI>:

/***************************************************************************************************************
 * I2C Accelerometer Functions
 */
void checkAccelWhoAmI(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
	uint8_t whoami = readAccel_whoami(hi2c);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7fe fcac 	bl	800058c <readAccel_whoami>
 8001c34:	4603      	mov	r3, r0
 8001c36:	73fb      	strb	r3, [r7, #15]
	send_uart_hex(huart, whoami);
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	6838      	ldr	r0, [r7, #0]
 8001c3e:	f000 fdf0 	bl	8002822 <send_uart_hex>
}
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <accelToUART>:

void accelToUART(UART_HandleTypeDef *huart) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 6; i++) {
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	e00a      	b.n	8001c70 <accelToUART+0x24>
		send_uart_hex(huart, accel_data[i]);
 8001c5a:	4a09      	ldr	r2, [pc, #36]	; (8001c80 <accelToUART+0x34>)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4413      	add	r3, r2
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	4619      	mov	r1, r3
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 fddc 	bl	8002822 <send_uart_hex>
	for (int i = 0; i < 6; i++) {
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2b05      	cmp	r3, #5
 8001c74:	ddf1      	ble.n	8001c5a <accelToUART+0xe>
	}
}
 8001c76:	bf00      	nop
 8001c78:	bf00      	nop
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000514 	.word	0x20000514

08001c84 <readTempSensorID>:

/***************************************************************************************************************
 * I2C BME280 Sensor Functions
 */
void readTempSensorID(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart, uint8_t tempNo) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	71fb      	strb	r3, [r7, #7]
	send_uart_hex(huart, readBME280_id_reg(hi2c, tempNo));
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	4619      	mov	r1, r3
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f7fe fd32 	bl	8000700 <readBME280_id_reg>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	68b8      	ldr	r0, [r7, #8]
 8001ca2:	f000 fdbe 	bl	8002822 <send_uart_hex>
}
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <readTempCalibration>:

void readTempCalibration(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart, uint8_t tempNo) {
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b090      	sub	sp, #64	; 0x40
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	60f8      	str	r0, [r7, #12]
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	71fb      	strb	r3, [r7, #7]
	uint8_t calibration1[25];
	uint8_t calibration2[7];

	for (uint8_t i = 0; i < CALIB_CNT_1; i++) {
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001cc2:	e016      	b.n	8001cf2 <readTempCalibration+0x44>
		calibration1[i] = 0x00;
 8001cc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001cc8:	3340      	adds	r3, #64	; 0x40
 8001cca:	443b      	add	r3, r7
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f803 2c28 	strb.w	r2, [r3, #-40]
		if (i < CALIB_CNT_2) {
 8001cd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d806      	bhi.n	8001ce8 <readTempCalibration+0x3a>
			calibration2[i] = 0x00;
 8001cda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001cde:	3340      	adds	r3, #64	; 0x40
 8001ce0:	443b      	add	r3, r7
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (uint8_t i = 0; i < CALIB_CNT_1; i++) {
 8001ce8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001cec:	3301      	adds	r3, #1
 8001cee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001cf2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001cf6:	2b18      	cmp	r3, #24
 8001cf8:	d9e4      	bls.n	8001cc4 <readTempCalibration+0x16>
		}
	}

	readBME280_calib(hi2c, tempNo, calibration1, calibration2);
 8001cfa:	f107 0310 	add.w	r3, r7, #16
 8001cfe:	f107 0218 	add.w	r2, r7, #24
 8001d02:	79f9      	ldrb	r1, [r7, #7]
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f7fe fd17 	bl	8000738 <readBME280_calib>

	for (int i = 0; i < 25; i++) {
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d0e:	e00b      	b.n	8001d28 <readTempCalibration+0x7a>
	  send_uart_hex(huart, calibration1[i]);
 8001d10:	f107 0218 	add.w	r2, r7, #24
 8001d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d16:	4413      	add	r3, r2
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	68b8      	ldr	r0, [r7, #8]
 8001d1e:	f000 fd80 	bl	8002822 <send_uart_hex>
	for (int i = 0; i < 25; i++) {
 8001d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d24:	3301      	adds	r3, #1
 8001d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d2a:	2b18      	cmp	r3, #24
 8001d2c:	ddf0      	ble.n	8001d10 <readTempCalibration+0x62>
	}

	for (int i = 0; i < 7; i++) {
 8001d2e:	2300      	movs	r3, #0
 8001d30:	637b      	str	r3, [r7, #52]	; 0x34
 8001d32:	e00b      	b.n	8001d4c <readTempCalibration+0x9e>
	  send_uart_hex(huart, calibration2[i]);
 8001d34:	f107 0210 	add.w	r2, r7, #16
 8001d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3a:	4413      	add	r3, r2
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	68b8      	ldr	r0, [r7, #8]
 8001d42:	f000 fd6e 	bl	8002822 <send_uart_hex>
	for (int i = 0; i < 7; i++) {
 8001d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d48:	3301      	adds	r3, #1
 8001d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	ddf0      	ble.n	8001d34 <readTempCalibration+0x86>
	}
}
 8001d52:	bf00      	nop
 8001d54:	bf00      	nop
 8001d56:	3740      	adds	r7, #64	; 0x40
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <readTempSensor>:

void readTempSensor(UART_HandleTypeDef *huart, uint8_t tempNo) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	70fb      	strb	r3, [r7, #3]
	if (tempNo == 0) {
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d111      	bne.n	8001d92 <readTempSensor+0x36>
		for (int i = 0; i < 6; i++) {
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	e00a      	b.n	8001d8a <readTempSensor+0x2e>
			send_uart_hex(huart, bme280_data_1[i]);
 8001d74:	4a13      	ldr	r2, [pc, #76]	; (8001dc4 <readTempSensor+0x68>)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4413      	add	r3, r2
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 fd4f 	bl	8002822 <send_uart_hex>
		for (int i = 0; i < 6; i++) {
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	3301      	adds	r3, #1
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b05      	cmp	r3, #5
 8001d8e:	ddf1      	ble.n	8001d74 <readTempSensor+0x18>
	} else if (tempNo == 1) {
		for (int i = 0; i < 6; i++) {
			send_uart_hex(huart, bme280_data_2[i]);
		}
	}
}
 8001d90:	e013      	b.n	8001dba <readTempSensor+0x5e>
	} else if (tempNo == 1) {
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d110      	bne.n	8001dba <readTempSensor+0x5e>
		for (int i = 0; i < 6; i++) {
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	e00a      	b.n	8001db4 <readTempSensor+0x58>
			send_uart_hex(huart, bme280_data_2[i]);
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <readTempSensor+0x6c>)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	4413      	add	r3, r2
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	4619      	mov	r1, r3
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 fd3a 	bl	8002822 <send_uart_hex>
		for (int i = 0; i < 6; i++) {
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	3301      	adds	r3, #1
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b05      	cmp	r3, #5
 8001db8:	ddf1      	ble.n	8001d9e <readTempSensor+0x42>
}
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2000051c 	.word	0x2000051c
 8001dc8:	20000524 	.word	0x20000524

08001dcc <readAllSensors>:

/***************************************************************************************************************
 * Process All Sensors
 */
void readAllSensors(I2C_HandleTypeDef* hi2c_accel, I2C_HandleTypeDef* hi2c_temp, RTC_HandleTypeDef* hrtc) {
 8001dcc:	b590      	push	{r4, r7, lr}
 8001dce:	b08b      	sub	sp, #44	; 0x2c
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
	// Read Accelerometer Data
	readAccelerometer(accel_data, hi2c_accel);
 8001dd8:	68f9      	ldr	r1, [r7, #12]
 8001dda:	4855      	ldr	r0, [pc, #340]	; (8001f30 <readAllSensors+0x164>)
 8001ddc:	f7fe fbb4 	bl	8000548 <readAccelerometer>

	// Read BME280 Data
	readTempHumPres(bme280_data_1, hi2c_temp, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	68b9      	ldr	r1, [r7, #8]
 8001de4:	4853      	ldr	r0, [pc, #332]	; (8001f34 <readAllSensors+0x168>)
 8001de6:	f7fe fc31 	bl	800064c <readTempHumPres>
	readTempHumPres(bme280_data_2, hi2c_temp, 1);
 8001dea:	2201      	movs	r2, #1
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	4852      	ldr	r0, [pc, #328]	; (8001f38 <readAllSensors+0x16c>)
 8001df0:	f7fe fc2c 	bl	800064c <readTempHumPres>

	uint16_t time = getTimestampMilliseconds(hrtc);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f8c1 	bl	8001f7c <getTimestampMilliseconds>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	82fb      	strh	r3, [r7, #22]
	uint8_t array_ptr = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// Store the new read in the buffer if there is space
	if (byte_tracker < (PAGE_SIZE - READ_SIZE)) {
 8001e04:	4b4d      	ldr	r3, [pc, #308]	; (8001f3c <readAllSensors+0x170>)
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	2beb      	cmp	r3, #235	; 0xeb
 8001e0a:	f200 808c 	bhi.w	8001f26 <readAllSensors+0x15a>
		data_buffer_tx[buffer_tracker][byte_tracker + 0] = (uint8_t) ((time >> 8) & 0xFF);
 8001e0e:	8afb      	ldrh	r3, [r7, #22]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	4b4a      	ldr	r3, [pc, #296]	; (8001f40 <readAllSensors+0x174>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461c      	mov	r4, r3
 8001e1a:	4b48      	ldr	r3, [pc, #288]	; (8001f3c <readAllSensors+0x170>)
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	b2d1      	uxtb	r1, r2
 8001e22:	4a48      	ldr	r2, [pc, #288]	; (8001f44 <readAllSensors+0x178>)
 8001e24:	0223      	lsls	r3, r4, #8
 8001e26:	4413      	add	r3, r2
 8001e28:	4403      	add	r3, r0
 8001e2a:	460a      	mov	r2, r1
 8001e2c:	701a      	strb	r2, [r3, #0]
		data_buffer_tx[buffer_tracker][byte_tracker + 1] = (uint8_t) (time & 0xFF); // Least significant byte (LSB)
 8001e2e:	4b44      	ldr	r3, [pc, #272]	; (8001f40 <readAllSensors+0x174>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	4b41      	ldr	r3, [pc, #260]	; (8001f3c <readAllSensors+0x170>)
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	8af9      	ldrh	r1, [r7, #22]
 8001e3c:	b2c8      	uxtb	r0, r1
 8001e3e:	4941      	ldr	r1, [pc, #260]	; (8001f44 <readAllSensors+0x178>)
 8001e40:	0212      	lsls	r2, r2, #8
 8001e42:	440a      	add	r2, r1
 8001e44:	4413      	add	r3, r2
 8001e46:	4602      	mov	r2, r0
 8001e48:	701a      	strb	r2, [r3, #0]

		array_ptr += 2;
 8001e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e4e:	3302      	adds	r3, #2
 8001e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 8001e54:	2300      	movs	r3, #0
 8001e56:	623b      	str	r3, [r7, #32]
 8001e58:	e01a      	b.n	8001e90 <readAllSensors+0xc4>
		  data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = accel_data[i];
 8001e5a:	4b39      	ldr	r3, [pc, #228]	; (8001f40 <readAllSensors+0x174>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	461c      	mov	r4, r3
 8001e60:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <readAllSensors+0x170>)
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	461a      	mov	r2, r3
 8001e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e6a:	4413      	add	r3, r2
 8001e6c:	4930      	ldr	r1, [pc, #192]	; (8001f30 <readAllSensors+0x164>)
 8001e6e:	6a3a      	ldr	r2, [r7, #32]
 8001e70:	440a      	add	r2, r1
 8001e72:	7810      	ldrb	r0, [r2, #0]
 8001e74:	4933      	ldr	r1, [pc, #204]	; (8001f44 <readAllSensors+0x178>)
 8001e76:	0222      	lsls	r2, r4, #8
 8001e78:	440a      	add	r2, r1
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 8001e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e84:	3301      	adds	r3, #1
 8001e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	623b      	str	r3, [r7, #32]
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	2b05      	cmp	r3, #5
 8001e94:	dde1      	ble.n	8001e5a <readAllSensors+0x8e>
		}

		for (int i = 0; i < 6; i++) {
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
 8001e9a:	e01a      	b.n	8001ed2 <readAllSensors+0x106>
		  data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = bme280_data_1[i];
 8001e9c:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <readAllSensors+0x174>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	461c      	mov	r4, r3
 8001ea2:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <readAllSensors+0x170>)
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eac:	4413      	add	r3, r2
 8001eae:	4921      	ldr	r1, [pc, #132]	; (8001f34 <readAllSensors+0x168>)
 8001eb0:	69fa      	ldr	r2, [r7, #28]
 8001eb2:	440a      	add	r2, r1
 8001eb4:	7810      	ldrb	r0, [r2, #0]
 8001eb6:	4923      	ldr	r1, [pc, #140]	; (8001f44 <readAllSensors+0x178>)
 8001eb8:	0222      	lsls	r2, r4, #8
 8001eba:	440a      	add	r2, r1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 8001ec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	2b05      	cmp	r3, #5
 8001ed6:	dde1      	ble.n	8001e9c <readAllSensors+0xd0>
		}

		for (int i = 0; i < 6; i++) {
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	e01a      	b.n	8001f14 <readAllSensors+0x148>
		  data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = bme280_data_2[i];
 8001ede:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <readAllSensors+0x174>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	461c      	mov	r4, r3
 8001ee4:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <readAllSensors+0x170>)
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eee:	4413      	add	r3, r2
 8001ef0:	4911      	ldr	r1, [pc, #68]	; (8001f38 <readAllSensors+0x16c>)
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	440a      	add	r2, r1
 8001ef6:	7810      	ldrb	r0, [r2, #0]
 8001ef8:	4912      	ldr	r1, [pc, #72]	; (8001f44 <readAllSensors+0x178>)
 8001efa:	0222      	lsls	r2, r4, #8
 8001efc:	440a      	add	r2, r1
 8001efe:	4413      	add	r3, r2
 8001f00:	4602      	mov	r2, r0
 8001f02:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 8001f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f08:	3301      	adds	r3, #1
 8001f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	3301      	adds	r3, #1
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2b05      	cmp	r3, #5
 8001f18:	dde1      	ble.n	8001ede <readAllSensors+0x112>
		}

		byte_tracker = byte_tracker + READ_SIZE;
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <readAllSensors+0x170>)
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	3314      	adds	r3, #20
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <readAllSensors+0x170>)
 8001f24:	801a      	strh	r2, [r3, #0]
	}
}
 8001f26:	bf00      	nop
 8001f28:	372c      	adds	r7, #44	; 0x2c
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd90      	pop	{r4, r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000514 	.word	0x20000514
 8001f34:	2000051c 	.word	0x2000051c
 8001f38:	20000524 	.word	0x20000524
 8001f3c:	20000530 	.word	0x20000530
 8001f40:	20000510 	.word	0x20000510
 8001f44:	20000310 	.word	0x20000310

08001f48 <initialise_rtc_default>:
    .Month = RTC_MONTH_JANUARY, // Set default month (e.g., January)
    .Date = 1, // Set default day of the month
    .Year = 24 // Set default year (e.g., 2021)
};

void initialise_rtc_default(RTC_HandleTypeDef* hrtc) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	// Reset RTC on boot
	HAL_RTC_MspInit(hrtc); // Initialize RTC hardware
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f9db 	bl	800230c <HAL_RTC_MspInit>
	HAL_RTC_SetTime(hrtc, &defaultTime, RTC_FORMAT_BIN); // Set default time
 8001f56:	2200      	movs	r2, #0
 8001f58:	4906      	ldr	r1, [pc, #24]	; (8001f74 <initialise_rtc_default+0x2c>)
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f003 fb53 	bl	8005606 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(hrtc, &defaultDate, RTC_FORMAT_BIN); // Set default date
 8001f60:	2200      	movs	r2, #0
 8001f62:	4905      	ldr	r1, [pc, #20]	; (8001f78 <initialise_rtc_default+0x30>)
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f003 fc46 	bl	80057f6 <HAL_RTC_SetDate>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	2000056c 	.word	0x2000056c
 8001f78:	20000018 	.word	0x20000018

08001f7c <getTimestampMilliseconds>:

uint32_t getTimestampMilliseconds(RTC_HandleTypeDef* hrtc) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08c      	sub	sp, #48	; 0x30
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef rtcTime;
    RTC_DateTypeDef rtcDate;

    // Read RTC time and date
    HAL_RTC_GetTime(hrtc, &rtcTime, RTC_FORMAT_BIN);
 8001f84:	f107 0310 	add.w	r3, r7, #16
 8001f88:	2200      	movs	r2, #0
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f003 fbd4 	bl	800573a <HAL_RTC_GetTime>
    HAL_RTC_GetDate(hrtc, &rtcDate, RTC_FORMAT_BIN);
 8001f92:	f107 030c 	add.w	r3, r7, #12
 8001f96:	2200      	movs	r2, #0
 8001f98:	4619      	mov	r1, r3
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f003 fcaf 	bl	80058fe <HAL_RTC_GetDate>

    // Calculate timestamp in milliseconds
    uint32_t timestampSeconds = rtcTime.Seconds + rtcTime.Minutes * 60 + rtcTime.Hours * 3600;
 8001fa0:	7cbb      	ldrb	r3, [r7, #18]
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	7c7b      	ldrb	r3, [r7, #17]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4613      	mov	r3, r2
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	1a9b      	subs	r3, r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	18ca      	adds	r2, r1, r3
 8001fb2:	7c3b      	ldrb	r3, [r7, #16]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001fba:	fb01 f303 	mul.w	r3, r1, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t timestampMilliseconds = timestampSeconds * 1000;
 8001fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fc8:	fb02 f303 	mul.w	r3, r2, r3
 8001fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    float subsecondsFraction = (float)(rtcTime.SecondFraction - rtcTime.SubSeconds) / (rtcTime.SecondFraction + 1);
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	ee07 3a90 	vmov	s15, r3
 8001fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	ee07 3a90 	vmov	s15, r3
 8001fe4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fec:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    timestampMilliseconds += subsecondsFraction * 1000;
 8001ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff2:	ee07 3a90 	vmov	s15, r3
 8001ff6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ffa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ffe:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002020 <getTimestampMilliseconds+0xa4>
 8002002:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002006:	ee77 7a27 	vadd.f32	s15, s14, s15
 800200a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800200e:	ee17 3a90 	vmov	r3, s15
 8002012:	62bb      	str	r3, [r7, #40]	; 0x28

    return timestampMilliseconds;
 8002014:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002016:	4618      	mov	r0, r3
 8002018:	3730      	adds	r7, #48	; 0x30
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	447a0000 	.word	0x447a0000

08002024 <spi_sendOp_readByte>:
#ifndef SRC_SPI_DRIVER_C_
#define SRC_SPI_DRIVER_C_

#include "spi_driver.h"

HAL_StatusTypeDef spi_sendOp_readByte(uint8_t* opcode, SPI_HandleTypeDef *hspi, uint8_t* data_ptr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
 8002030:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 8002032:	8c3b      	ldrh	r3, [r7, #32]
 8002034:	2200      	movs	r2, #0
 8002036:	4619      	mov	r1, r3
 8002038:	6838      	ldr	r0, [r7, #0]
 800203a:	f001 fb9f 	bl	800377c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);			// Write the write enable value to the Flash to initial reading
 800203e:	2302      	movs	r3, #2
 8002040:	2201      	movs	r2, #1
 8002042:	68f9      	ldr	r1, [r7, #12]
 8002044:	68b8      	ldr	r0, [r7, #8]
 8002046:	f003 fdf0 	bl	8005c2a <HAL_SPI_Transmit>
	status = HAL_SPI_Receive(hspi, data_ptr, 1, TIMEOUT_SML);
 800204a:	2302      	movs	r3, #2
 800204c:	2201      	movs	r2, #1
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	68b8      	ldr	r0, [r7, #8]
 8002052:	f003 ff2d 	bl	8005eb0 <HAL_SPI_Receive>
 8002056:	4603      	mov	r3, r0
 8002058:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 800205a:	8c3b      	ldrh	r3, [r7, #32]
 800205c:	2201      	movs	r2, #1
 800205e:	4619      	mov	r1, r3
 8002060:	6838      	ldr	r0, [r7, #0]
 8002062:	f001 fb8b 	bl	800377c <HAL_GPIO_WritePin>
	return status;
 8002066:	7dfb      	ldrb	r3, [r7, #23]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <perform_operation>:

HAL_StatusTypeDef perform_operation(uint8_t* opcode, SPI_HandleTypeDef *hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);				// Set the chip select pin to low to initiate SPI comms
 800207e:	887b      	ldrh	r3, [r7, #2]
 8002080:	2200      	movs	r2, #0
 8002082:	4619      	mov	r1, r3
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f001 fb79 	bl	800377c <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);				// Write the opcode value
 800208a:	2302      	movs	r3, #2
 800208c:	2201      	movs	r2, #1
 800208e:	68f9      	ldr	r1, [r7, #12]
 8002090:	68b8      	ldr	r0, [r7, #8]
 8002092:	f003 fdca 	bl	8005c2a <HAL_SPI_Transmit>
 8002096:	4603      	mov	r3, r0
 8002098:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 800209a:	887b      	ldrh	r3, [r7, #2]
 800209c:	2201      	movs	r2, #1
 800209e:	4619      	mov	r1, r3
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f001 fb6b 	bl	800377c <HAL_GPIO_WritePin>

	return status;
 80020a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <spi_read_data>:

HAL_StatusTypeDef spi_read_data(uint8_t* opcode, uint16_t data_size, uint8_t data_read[data_size], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	460b      	mov	r3, r1
 80020be:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef status;

	// Split the 24 bit address into three 8 bit ints
	uint8_t addrL = addr & 0xFF;  // Get the low byte
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	75bb      	strb	r3, [r7, #22]
	uint8_t addrM = (addr >> 8) & 0xFF;  // Get the middle byte
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	757b      	strb	r3, [r7, #21]
	uint8_t addrH = (addr >> 16) & 0xFF;  // Get the high byte
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	0c1b      	lsrs	r3, r3, #16
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	753b      	strb	r3, [r7, #20]

	// Read the data denoted by the given address
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);
 80020d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80020d8:	2200      	movs	r2, #0
 80020da:	4619      	mov	r1, r3
 80020dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020de:	f001 fb4d 	bl	800377c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);	// Write the read enable value
 80020e2:	2302      	movs	r3, #2
 80020e4:	2201      	movs	r2, #1
 80020e6:	68f9      	ldr	r1, [r7, #12]
 80020e8:	6838      	ldr	r0, [r7, #0]
 80020ea:	f003 fd9e 	bl	8005c2a <HAL_SPI_Transmit>

	// Transmit the 24 bit address of the page to initialise read from
	HAL_SPI_Transmit(hspi, &addrH, 1, TIMEOUT_SML);
 80020ee:	f107 0114 	add.w	r1, r7, #20
 80020f2:	2302      	movs	r3, #2
 80020f4:	2201      	movs	r2, #1
 80020f6:	6838      	ldr	r0, [r7, #0]
 80020f8:	f003 fd97 	bl	8005c2a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrM, 1, TIMEOUT_SML);
 80020fc:	f107 0115 	add.w	r1, r7, #21
 8002100:	2302      	movs	r3, #2
 8002102:	2201      	movs	r2, #1
 8002104:	6838      	ldr	r0, [r7, #0]
 8002106:	f003 fd90 	bl	8005c2a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrL, 1, TIMEOUT_SML);
 800210a:	f107 0116 	add.w	r1, r7, #22
 800210e:	2302      	movs	r3, #2
 8002110:	2201      	movs	r2, #1
 8002112:	6838      	ldr	r0, [r7, #0]
 8002114:	f003 fd89 	bl	8005c2a <HAL_SPI_Transmit>

	status = HAL_SPI_Receive(hspi, data_read, data_size, TIMEOUT_LRG);
 8002118:	897a      	ldrh	r2, [r7, #10]
 800211a:	2364      	movs	r3, #100	; 0x64
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	6838      	ldr	r0, [r7, #0]
 8002120:	f003 fec6 	bl	8005eb0 <HAL_SPI_Receive>
 8002124:	4603      	mov	r3, r0
 8002126:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 8002128:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800212a:	2201      	movs	r2, #1
 800212c:	4619      	mov	r1, r3
 800212e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002130:	f001 fb24 	bl	800377c <HAL_GPIO_WritePin>

	return status;
 8002134:	7dfb      	ldrb	r3, [r7, #23]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <spi_write_data_dma>:
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);	// Set the chip select pin to high to remove the Flash from the SPI bus

	return status;
}

HAL_StatusTypeDef spi_write_data_dma(uint8_t* opcode, uint16_t data_size, uint8_t data_write[data_size], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 800213e:	b580      	push	{r7, lr}
 8002140:	b086      	sub	sp, #24
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	607a      	str	r2, [r7, #4]
 8002148:	603b      	str	r3, [r7, #0]
 800214a:	460b      	mov	r3, r1
 800214c:	817b      	strh	r3, [r7, #10]
    HAL_StatusTypeDef status;

    // Split the 24 bit address into three 8 bit ints
    uint8_t addrL = addr & 0xFF;  			// Get the low byte
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	75bb      	strb	r3, [r7, #22]
    uint8_t addrM = (addr >> 8) & 0xFF;  	// Get the middle byte
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	0a1b      	lsrs	r3, r3, #8
 8002158:	b2db      	uxtb	r3, r3
 800215a:	757b      	strb	r3, [r7, #21]
    uint8_t addrH = (addr >> 16) & 0xFF;  	// Get the high byte
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	0c1b      	lsrs	r3, r3, #16
 8002160:	b2db      	uxtb	r3, r3
 8002162:	753b      	strb	r3, [r7, #20]

    // Send the PageWrite command
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 8002164:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002166:	2200      	movs	r2, #0
 8002168:	4619      	mov	r1, r3
 800216a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800216c:	f001 fb06 	bl	800377c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);					// Write the write enable value to the Flash to initial writing
 8002170:	2302      	movs	r3, #2
 8002172:	2201      	movs	r2, #1
 8002174:	68f9      	ldr	r1, [r7, #12]
 8002176:	6838      	ldr	r0, [r7, #0]
 8002178:	f003 fd57 	bl	8005c2a <HAL_SPI_Transmit>

    // Transmit the 24 bit address of the page to write to
    HAL_SPI_Transmit(hspi, &addrH, 1, TIMEOUT_SML);
 800217c:	f107 0114 	add.w	r1, r7, #20
 8002180:	2302      	movs	r3, #2
 8002182:	2201      	movs	r2, #1
 8002184:	6838      	ldr	r0, [r7, #0]
 8002186:	f003 fd50 	bl	8005c2a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, &addrM, 1, TIMEOUT_SML);
 800218a:	f107 0115 	add.w	r1, r7, #21
 800218e:	2302      	movs	r3, #2
 8002190:	2201      	movs	r2, #1
 8002192:	6838      	ldr	r0, [r7, #0]
 8002194:	f003 fd49 	bl	8005c2a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, &addrL, 1, TIMEOUT_SML);
 8002198:	f107 0116 	add.w	r1, r7, #22
 800219c:	2302      	movs	r3, #2
 800219e:	2201      	movs	r2, #1
 80021a0:	6838      	ldr	r0, [r7, #0]
 80021a2:	f003 fd42 	bl	8005c2a <HAL_SPI_Transmit>

    // Start the DMA transfer
    status = HAL_SPI_Transmit_DMA(hspi, data_write, data_size);
 80021a6:	897b      	ldrh	r3, [r7, #10]
 80021a8:	461a      	mov	r2, r3
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	6838      	ldr	r0, [r7, #0]
 80021ae:	f004 f947 	bl	8006440 <HAL_SPI_Transmit_DMA>
 80021b2:	4603      	mov	r3, r0
 80021b4:	75fb      	strb	r3, [r7, #23]

    return status;
 80021b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	607b      	str	r3, [r7, #4]
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <HAL_MspInit+0x4c>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	4a0f      	ldr	r2, [pc, #60]	; (800220c <HAL_MspInit+0x4c>)
 80021d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d4:	6453      	str	r3, [r2, #68]	; 0x44
 80021d6:	4b0d      	ldr	r3, [pc, #52]	; (800220c <HAL_MspInit+0x4c>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	603b      	str	r3, [r7, #0]
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <HAL_MspInit+0x4c>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4a08      	ldr	r2, [pc, #32]	; (800220c <HAL_MspInit+0x4c>)
 80021ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f0:	6413      	str	r3, [r2, #64]	; 0x40
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_MspInit+0x4c>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40023800 	.word	0x40023800

08002210 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08c      	sub	sp, #48	; 0x30
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 031c 	add.w	r3, r7, #28
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a33      	ldr	r2, [pc, #204]	; (80022fc <HAL_I2C_MspInit+0xec>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d12d      	bne.n	800228e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
 8002236:	4b32      	ldr	r3, [pc, #200]	; (8002300 <HAL_I2C_MspInit+0xf0>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a31      	ldr	r2, [pc, #196]	; (8002300 <HAL_I2C_MspInit+0xf0>)
 800223c:	f043 0302 	orr.w	r3, r3, #2
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b2f      	ldr	r3, [pc, #188]	; (8002300 <HAL_I2C_MspInit+0xf0>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800224e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002254:	2312      	movs	r3, #18
 8002256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225c:	2303      	movs	r3, #3
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002260:	2304      	movs	r3, #4
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002264:	f107 031c 	add.w	r3, r7, #28
 8002268:	4619      	mov	r1, r3
 800226a:	4826      	ldr	r0, [pc, #152]	; (8002304 <HAL_I2C_MspInit+0xf4>)
 800226c:	f001 f8c2 	bl	80033f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	4b22      	ldr	r3, [pc, #136]	; (8002300 <HAL_I2C_MspInit+0xf0>)
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	4a21      	ldr	r2, [pc, #132]	; (8002300 <HAL_I2C_MspInit+0xf0>)
 800227a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800227e:	6413      	str	r3, [r2, #64]	; 0x40
 8002280:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <HAL_I2C_MspInit+0xf0>)
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800228c:	e031      	b.n	80022f2 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a1d      	ldr	r2, [pc, #116]	; (8002308 <HAL_I2C_MspInit+0xf8>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d12c      	bne.n	80022f2 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	4b18      	ldr	r3, [pc, #96]	; (8002300 <HAL_I2C_MspInit+0xf0>)
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	4a17      	ldr	r2, [pc, #92]	; (8002300 <HAL_I2C_MspInit+0xf0>)
 80022a2:	f043 0302 	orr.w	r3, r3, #2
 80022a6:	6313      	str	r3, [r2, #48]	; 0x30
 80022a8:	4b15      	ldr	r3, [pc, #84]	; (8002300 <HAL_I2C_MspInit+0xf0>)
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ba:	2312      	movs	r3, #18
 80022bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c2:	2303      	movs	r3, #3
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022c6:	2304      	movs	r3, #4
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ca:	f107 031c 	add.w	r3, r7, #28
 80022ce:	4619      	mov	r1, r3
 80022d0:	480c      	ldr	r0, [pc, #48]	; (8002304 <HAL_I2C_MspInit+0xf4>)
 80022d2:	f001 f88f 	bl	80033f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_I2C_MspInit+0xf0>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	4a08      	ldr	r2, [pc, #32]	; (8002300 <HAL_I2C_MspInit+0xf0>)
 80022e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022e4:	6413      	str	r3, [r2, #64]	; 0x40
 80022e6:	4b06      	ldr	r3, [pc, #24]	; (8002300 <HAL_I2C_MspInit+0xf0>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
}
 80022f2:	bf00      	nop
 80022f4:	3730      	adds	r7, #48	; 0x30
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40005400 	.word	0x40005400
 8002300:	40023800 	.word	0x40023800
 8002304:	40020400 	.word	0x40020400
 8002308:	40005800 	.word	0x40005800

0800230c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08e      	sub	sp, #56	; 0x38
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002314:	f107 0308 	add.w	r3, r7, #8
 8002318:	2230      	movs	r2, #48	; 0x30
 800231a:	2100      	movs	r1, #0
 800231c:	4618      	mov	r0, r3
 800231e:	f005 fe8d 	bl	800803c <memset>
  if(hrtc->Instance==RTC)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a0c      	ldr	r2, [pc, #48]	; (8002358 <HAL_RTC_MspInit+0x4c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d111      	bne.n	8002350 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800232c:	2320      	movs	r3, #32
 800232e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002330:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002334:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002336:	f107 0308 	add.w	r3, r7, #8
 800233a:	4618      	mov	r0, r3
 800233c:	f002 ff20 	bl	8005180 <HAL_RCCEx_PeriphCLKConfig>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002346:	f7ff fad6 	bl	80018f6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800234a:	4b04      	ldr	r3, [pc, #16]	; (800235c <HAL_RTC_MspInit+0x50>)
 800234c:	2201      	movs	r2, #1
 800234e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002350:	bf00      	nop
 8002352:	3738      	adds	r7, #56	; 0x38
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40002800 	.word	0x40002800
 800235c:	42470e3c 	.word	0x42470e3c

08002360 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08c      	sub	sp, #48	; 0x30
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 031c 	add.w	r3, r7, #28
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a6f      	ldr	r2, [pc, #444]	; (800253c <HAL_SPI_MspInit+0x1dc>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d15b      	bne.n	800243a <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	61bb      	str	r3, [r7, #24]
 8002386:	4b6e      	ldr	r3, [pc, #440]	; (8002540 <HAL_SPI_MspInit+0x1e0>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	4a6d      	ldr	r2, [pc, #436]	; (8002540 <HAL_SPI_MspInit+0x1e0>)
 800238c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002390:	6453      	str	r3, [r2, #68]	; 0x44
 8002392:	4b6b      	ldr	r3, [pc, #428]	; (8002540 <HAL_SPI_MspInit+0x1e0>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800239a:	61bb      	str	r3, [r7, #24]
 800239c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	4b67      	ldr	r3, [pc, #412]	; (8002540 <HAL_SPI_MspInit+0x1e0>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a66      	ldr	r2, [pc, #408]	; (8002540 <HAL_SPI_MspInit+0x1e0>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b64      	ldr	r3, [pc, #400]	; (8002540 <HAL_SPI_MspInit+0x1e0>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80023ba:	23e0      	movs	r3, #224	; 0xe0
 80023bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023be:	2302      	movs	r3, #2
 80023c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c6:	2303      	movs	r3, #3
 80023c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023ca:	2305      	movs	r3, #5
 80023cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ce:	f107 031c 	add.w	r3, r7, #28
 80023d2:	4619      	mov	r1, r3
 80023d4:	485b      	ldr	r0, [pc, #364]	; (8002544 <HAL_SPI_MspInit+0x1e4>)
 80023d6:	f001 f80d 	bl	80033f4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80023da:	4b5b      	ldr	r3, [pc, #364]	; (8002548 <HAL_SPI_MspInit+0x1e8>)
 80023dc:	4a5b      	ldr	r2, [pc, #364]	; (800254c <HAL_SPI_MspInit+0x1ec>)
 80023de:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80023e0:	4b59      	ldr	r3, [pc, #356]	; (8002548 <HAL_SPI_MspInit+0x1e8>)
 80023e2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80023e6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023e8:	4b57      	ldr	r3, [pc, #348]	; (8002548 <HAL_SPI_MspInit+0x1e8>)
 80023ea:	2240      	movs	r2, #64	; 0x40
 80023ec:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023ee:	4b56      	ldr	r3, [pc, #344]	; (8002548 <HAL_SPI_MspInit+0x1e8>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023f4:	4b54      	ldr	r3, [pc, #336]	; (8002548 <HAL_SPI_MspInit+0x1e8>)
 80023f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023fa:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023fc:	4b52      	ldr	r3, [pc, #328]	; (8002548 <HAL_SPI_MspInit+0x1e8>)
 80023fe:	2200      	movs	r2, #0
 8002400:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002402:	4b51      	ldr	r3, [pc, #324]	; (8002548 <HAL_SPI_MspInit+0x1e8>)
 8002404:	2200      	movs	r2, #0
 8002406:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002408:	4b4f      	ldr	r3, [pc, #316]	; (8002548 <HAL_SPI_MspInit+0x1e8>)
 800240a:	2200      	movs	r2, #0
 800240c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800240e:	4b4e      	ldr	r3, [pc, #312]	; (8002548 <HAL_SPI_MspInit+0x1e8>)
 8002410:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002414:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002416:	4b4c      	ldr	r3, [pc, #304]	; (8002548 <HAL_SPI_MspInit+0x1e8>)
 8002418:	2200      	movs	r2, #0
 800241a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800241c:	484a      	ldr	r0, [pc, #296]	; (8002548 <HAL_SPI_MspInit+0x1e8>)
 800241e:	f000 fbe7 	bl	8002bf0 <HAL_DMA_Init>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002428:	f7ff fa65 	bl	80018f6 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a46      	ldr	r2, [pc, #280]	; (8002548 <HAL_SPI_MspInit+0x1e8>)
 8002430:	649a      	str	r2, [r3, #72]	; 0x48
 8002432:	4a45      	ldr	r2, [pc, #276]	; (8002548 <HAL_SPI_MspInit+0x1e8>)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002438:	e07b      	b.n	8002532 <HAL_SPI_MspInit+0x1d2>
  else if(hspi->Instance==SPI2)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a44      	ldr	r2, [pc, #272]	; (8002550 <HAL_SPI_MspInit+0x1f0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d176      	bne.n	8002532 <HAL_SPI_MspInit+0x1d2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002444:	2300      	movs	r3, #0
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	4b3d      	ldr	r3, [pc, #244]	; (8002540 <HAL_SPI_MspInit+0x1e0>)
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	4a3c      	ldr	r2, [pc, #240]	; (8002540 <HAL_SPI_MspInit+0x1e0>)
 800244e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002452:	6413      	str	r3, [r2, #64]	; 0x40
 8002454:	4b3a      	ldr	r3, [pc, #232]	; (8002540 <HAL_SPI_MspInit+0x1e0>)
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002460:	2300      	movs	r3, #0
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	4b36      	ldr	r3, [pc, #216]	; (8002540 <HAL_SPI_MspInit+0x1e0>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	4a35      	ldr	r2, [pc, #212]	; (8002540 <HAL_SPI_MspInit+0x1e0>)
 800246a:	f043 0304 	orr.w	r3, r3, #4
 800246e:	6313      	str	r3, [r2, #48]	; 0x30
 8002470:	4b33      	ldr	r3, [pc, #204]	; (8002540 <HAL_SPI_MspInit+0x1e0>)
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800247c:	2300      	movs	r3, #0
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	4b2f      	ldr	r3, [pc, #188]	; (8002540 <HAL_SPI_MspInit+0x1e0>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	4a2e      	ldr	r2, [pc, #184]	; (8002540 <HAL_SPI_MspInit+0x1e0>)
 8002486:	f043 0308 	orr.w	r3, r3, #8
 800248a:	6313      	str	r3, [r2, #48]	; 0x30
 800248c:	4b2c      	ldr	r3, [pc, #176]	; (8002540 <HAL_SPI_MspInit+0x1e0>)
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002498:	230c      	movs	r3, #12
 800249a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249c:	2302      	movs	r3, #2
 800249e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a4:	2303      	movs	r3, #3
 80024a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024a8:	2305      	movs	r3, #5
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ac:	f107 031c 	add.w	r3, r7, #28
 80024b0:	4619      	mov	r1, r3
 80024b2:	4828      	ldr	r0, [pc, #160]	; (8002554 <HAL_SPI_MspInit+0x1f4>)
 80024b4:	f000 ff9e 	bl	80033f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024b8:	2308      	movs	r3, #8
 80024ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024bc:	2302      	movs	r3, #2
 80024be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c4:	2303      	movs	r3, #3
 80024c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024c8:	2305      	movs	r3, #5
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024cc:	f107 031c 	add.w	r3, r7, #28
 80024d0:	4619      	mov	r1, r3
 80024d2:	4821      	ldr	r0, [pc, #132]	; (8002558 <HAL_SPI_MspInit+0x1f8>)
 80024d4:	f000 ff8e 	bl	80033f4 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80024d8:	4b20      	ldr	r3, [pc, #128]	; (800255c <HAL_SPI_MspInit+0x1fc>)
 80024da:	4a21      	ldr	r2, [pc, #132]	; (8002560 <HAL_SPI_MspInit+0x200>)
 80024dc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80024de:	4b1f      	ldr	r3, [pc, #124]	; (800255c <HAL_SPI_MspInit+0x1fc>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024e4:	4b1d      	ldr	r3, [pc, #116]	; (800255c <HAL_SPI_MspInit+0x1fc>)
 80024e6:	2240      	movs	r2, #64	; 0x40
 80024e8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ea:	4b1c      	ldr	r3, [pc, #112]	; (800255c <HAL_SPI_MspInit+0x1fc>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024f0:	4b1a      	ldr	r3, [pc, #104]	; (800255c <HAL_SPI_MspInit+0x1fc>)
 80024f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024f6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024f8:	4b18      	ldr	r3, [pc, #96]	; (800255c <HAL_SPI_MspInit+0x1fc>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024fe:	4b17      	ldr	r3, [pc, #92]	; (800255c <HAL_SPI_MspInit+0x1fc>)
 8002500:	2200      	movs	r2, #0
 8002502:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002504:	4b15      	ldr	r3, [pc, #84]	; (800255c <HAL_SPI_MspInit+0x1fc>)
 8002506:	2200      	movs	r2, #0
 8002508:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800250a:	4b14      	ldr	r3, [pc, #80]	; (800255c <HAL_SPI_MspInit+0x1fc>)
 800250c:	2200      	movs	r2, #0
 800250e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002510:	4b12      	ldr	r3, [pc, #72]	; (800255c <HAL_SPI_MspInit+0x1fc>)
 8002512:	2200      	movs	r2, #0
 8002514:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002516:	4811      	ldr	r0, [pc, #68]	; (800255c <HAL_SPI_MspInit+0x1fc>)
 8002518:	f000 fb6a 	bl	8002bf0 <HAL_DMA_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_SPI_MspInit+0x1c6>
      Error_Handler();
 8002522:	f7ff f9e8 	bl	80018f6 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a0c      	ldr	r2, [pc, #48]	; (800255c <HAL_SPI_MspInit+0x1fc>)
 800252a:	649a      	str	r2, [r3, #72]	; 0x48
 800252c:	4a0b      	ldr	r2, [pc, #44]	; (800255c <HAL_SPI_MspInit+0x1fc>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002532:	bf00      	nop
 8002534:	3730      	adds	r7, #48	; 0x30
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40013000 	.word	0x40013000
 8002540:	40023800 	.word	0x40023800
 8002544:	40020000 	.word	0x40020000
 8002548:	200001bc 	.word	0x200001bc
 800254c:	40026458 	.word	0x40026458
 8002550:	40003800 	.word	0x40003800
 8002554:	40020800 	.word	0x40020800
 8002558:	40020c00 	.word	0x40020c00
 800255c:	2000021c 	.word	0x2000021c
 8002560:	40026070 	.word	0x40026070

08002564 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a0e      	ldr	r2, [pc, #56]	; (80025ac <HAL_TIM_Base_MspInit+0x48>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d115      	bne.n	80025a2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <HAL_TIM_Base_MspInit+0x4c>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	4a0c      	ldr	r2, [pc, #48]	; (80025b0 <HAL_TIM_Base_MspInit+0x4c>)
 8002580:	f043 0310 	orr.w	r3, r3, #16
 8002584:	6413      	str	r3, [r2, #64]	; 0x40
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_TIM_Base_MspInit+0x4c>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f003 0310 	and.w	r3, r3, #16
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	2100      	movs	r1, #0
 8002596:	2036      	movs	r0, #54	; 0x36
 8002598:	f000 faf3 	bl	8002b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800259c:	2036      	movs	r0, #54	; 0x36
 800259e:	f000 fb0c 	bl	8002bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40001000 	.word	0x40001000
 80025b0:	40023800 	.word	0x40023800

080025b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08a      	sub	sp, #40	; 0x28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 0314 	add.w	r3, r7, #20
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a1d      	ldr	r2, [pc, #116]	; (8002648 <HAL_UART_MspInit+0x94>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d133      	bne.n	800263e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	4b1c      	ldr	r3, [pc, #112]	; (800264c <HAL_UART_MspInit+0x98>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	4a1b      	ldr	r2, [pc, #108]	; (800264c <HAL_UART_MspInit+0x98>)
 80025e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e4:	6413      	str	r3, [r2, #64]	; 0x40
 80025e6:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_UART_MspInit+0x98>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <HAL_UART_MspInit+0x98>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	4a14      	ldr	r2, [pc, #80]	; (800264c <HAL_UART_MspInit+0x98>)
 80025fc:	f043 0308 	orr.w	r3, r3, #8
 8002600:	6313      	str	r3, [r2, #48]	; 0x30
 8002602:	4b12      	ldr	r3, [pc, #72]	; (800264c <HAL_UART_MspInit+0x98>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800260e:	2360      	movs	r3, #96	; 0x60
 8002610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002612:	2302      	movs	r3, #2
 8002614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261a:	2303      	movs	r3, #3
 800261c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800261e:	2307      	movs	r3, #7
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002622:	f107 0314 	add.w	r3, r7, #20
 8002626:	4619      	mov	r1, r3
 8002628:	4809      	ldr	r0, [pc, #36]	; (8002650 <HAL_UART_MspInit+0x9c>)
 800262a:	f000 fee3 	bl	80033f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800262e:	2200      	movs	r2, #0
 8002630:	2100      	movs	r1, #0
 8002632:	2026      	movs	r0, #38	; 0x26
 8002634:	f000 faa5 	bl	8002b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002638:	2026      	movs	r0, #38	; 0x26
 800263a:	f000 fabe 	bl	8002bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800263e:	bf00      	nop
 8002640:	3728      	adds	r7, #40	; 0x28
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40004400 	.word	0x40004400
 800264c:	40023800 	.word	0x40023800
 8002650:	40020c00 	.word	0x40020c00

08002654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002658:	e7fe      	b.n	8002658 <NMI_Handler+0x4>

0800265a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800265e:	e7fe      	b.n	800265e <HardFault_Handler+0x4>

08002660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002664:	e7fe      	b.n	8002664 <MemManage_Handler+0x4>

08002666 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800266a:	e7fe      	b.n	800266a <BusFault_Handler+0x4>

0800266c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002670:	e7fe      	b.n	8002670 <UsageFault_Handler+0x4>

08002672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800268e:	b480      	push	{r7}
 8002690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a0:	f000 f950 	bl	8002944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026a4:	bf00      	nop
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80026ac:	4802      	ldr	r0, [pc, #8]	; (80026b8 <DMA1_Stream4_IRQHandler+0x10>)
 80026ae:	f000 fc37 	bl	8002f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	2000021c 	.word	0x2000021c

080026bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026c0:	4802      	ldr	r0, [pc, #8]	; (80026cc <USART2_IRQHandler+0x10>)
 80026c2:	f004 fd65 	bl	8007190 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	200002c4 	.word	0x200002c4

080026d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80026d4:	4803      	ldr	r0, [pc, #12]	; (80026e4 <TIM6_DAC_IRQHandler+0x14>)
 80026d6:	f004 f9fd 	bl	8006ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  tim6_overflow_flag = 0x01;
 80026da:	4b03      	ldr	r3, [pc, #12]	; (80026e8 <TIM6_DAC_IRQHandler+0x18>)
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	2000027c 	.word	0x2000027c
 80026e8:	2000030f 	.word	0x2000030f

080026ec <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80026f0:	4802      	ldr	r0, [pc, #8]	; (80026fc <DMA2_Stream3_IRQHandler+0x10>)
 80026f2:	f000 fc15 	bl	8002f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	200001bc 	.word	0x200001bc

08002700 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	// Pull CS pin high to deselect the device
    if (hspi->Instance == SPI1) {
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a18      	ldr	r2, [pc, #96]	; (8002770 <HAL_SPI_TxCpltCallback+0x70>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d108      	bne.n	8002724 <HAL_SPI_TxCpltCallback+0x24>
        // Pull CS pin high for SPI1 to deselect the device
    	HAL_GPIO_WritePin(cs_spi1.GPIOx, cs_spi1.GPIO_Pin, GPIO_PIN_SET);
 8002712:	4b18      	ldr	r3, [pc, #96]	; (8002774 <HAL_SPI_TxCpltCallback+0x74>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a17      	ldr	r2, [pc, #92]	; (8002774 <HAL_SPI_TxCpltCallback+0x74>)
 8002718:	8891      	ldrh	r1, [r2, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	4618      	mov	r0, r3
 800271e:	f001 f82d 	bl	800377c <HAL_GPIO_WritePin>
 8002722:	e00c      	b.n	800273e <HAL_SPI_TxCpltCallback+0x3e>
    } else if (hspi->Instance == SPI2) {
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a13      	ldr	r2, [pc, #76]	; (8002778 <HAL_SPI_TxCpltCallback+0x78>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d107      	bne.n	800273e <HAL_SPI_TxCpltCallback+0x3e>
        // Pull CS pin high for SPI2 to deselect the device
    	HAL_GPIO_WritePin(cs_spi2.GPIOx, cs_spi2.GPIO_Pin, GPIO_PIN_SET);
 800272e:	4b13      	ldr	r3, [pc, #76]	; (800277c <HAL_SPI_TxCpltCallback+0x7c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a12      	ldr	r2, [pc, #72]	; (800277c <HAL_SPI_TxCpltCallback+0x7c>)
 8002734:	8891      	ldrh	r1, [r2, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	4618      	mov	r0, r3
 800273a:	f001 f81f 	bl	800377c <HAL_GPIO_WritePin>
    }

    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0202 	bic.w	r2, r2, #2
 800274c:	605a      	str	r2, [r3, #4]
    clean_data_buffer(PAGE_SIZE, data_buffer_tx[buffer_tracker ^ 0x01]);
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <HAL_SPI_TxCpltCallback+0x80>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	f083 0301 	eor.w	r3, r3, #1
 8002756:	b2db      	uxtb	r3, r3
 8002758:	021b      	lsls	r3, r3, #8
 800275a:	4a0a      	ldr	r2, [pc, #40]	; (8002784 <HAL_SPI_TxCpltCallback+0x84>)
 800275c:	4413      	add	r3, r2
 800275e:	4619      	mov	r1, r3
 8002760:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002764:	f7fe fe36 	bl	80013d4 <clean_data_buffer>
}
 8002768:	bf00      	nop
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40013000 	.word	0x40013000
 8002774:	20000544 	.word	0x20000544
 8002778:	40003800 	.word	0x40003800
 800277c:	20000554 	.word	0x20000554
 8002780:	20000510 	.word	0x20000510
 8002784:	20000310 	.word	0x20000310

08002788 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
	uart2_rec_flag = 0x01;
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_UART_RxCpltCallback+0x20>)
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, UARTRxData, 2);
 8002796:	2202      	movs	r2, #2
 8002798:	4904      	ldr	r1, [pc, #16]	; (80027ac <HAL_UART_RxCpltCallback+0x24>)
 800279a:	4805      	ldr	r0, [pc, #20]	; (80027b0 <HAL_UART_RxCpltCallback+0x28>)
 800279c:	f004 fcd3 	bl	8007146 <HAL_UART_Receive_IT>
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	2000030e 	.word	0x2000030e
 80027ac:	2000030c 	.word	0x2000030c
 80027b0:	200002c4 	.word	0x200002c4

080027b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027b8:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <SystemInit+0x20>)
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027be:	4a05      	ldr	r2, [pc, #20]	; (80027d4 <SystemInit+0x20>)
 80027c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <uart_transmit_page>:

#include "uart_transmit.h"
/**
 * Transmit one single page over the UART interface
 */
void uart_transmit_page(UART_HandleTypeDef *huart, uint8_t page[PAGE_SIZE]) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, page, PAGE_SIZE, HAL_MAX_DELAY);
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ea:	6839      	ldr	r1, [r7, #0]
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f004 fc1f 	bl	8007030 <HAL_UART_Transmit>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <send_uart_string>:

void send_uart_string(UART_HandleTypeDef *huart, const char *str) {
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8002804:	6838      	ldr	r0, [r7, #0]
 8002806:	f7fd fcf1 	bl	80001ec <strlen>
 800280a:	4603      	mov	r3, r0
 800280c:	b29a      	uxth	r2, r3
 800280e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002812:	6839      	ldr	r1, [r7, #0]
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f004 fc0b 	bl	8007030 <HAL_UART_Transmit>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <send_uart_hex>:
	// Call the send_uart_string function to send the value to UART
	send_uart_string(huart, value_str);
	send_uart_string(huart, "\r\n");
}

void send_uart_hex(UART_HandleTypeDef *huart, uint8_t value) {
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	460b      	mov	r3, r1
 800282c:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[1];
	buffer[0] = value;
 800282e:	78fb      	ldrb	r3, [r7, #3]
 8002830:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(huart, buffer, 1, HAL_MAX_DELAY);
 8002832:	f107 010c 	add.w	r1, r7, #12
 8002836:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800283a:	2201      	movs	r2, #1
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f004 fbf7 	bl	8007030 <HAL_UART_Transmit>
}
 8002842:	bf00      	nop
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800284c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002884 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002850:	f7ff ffb0 	bl	80027b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002854:	480c      	ldr	r0, [pc, #48]	; (8002888 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002856:	490d      	ldr	r1, [pc, #52]	; (800288c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002858:	4a0d      	ldr	r2, [pc, #52]	; (8002890 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800285a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800285c:	e002      	b.n	8002864 <LoopCopyDataInit>

0800285e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800285e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002862:	3304      	adds	r3, #4

08002864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002868:	d3f9      	bcc.n	800285e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800286a:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800286c:	4c0a      	ldr	r4, [pc, #40]	; (8002898 <LoopFillZerobss+0x22>)
  movs r3, #0
 800286e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002870:	e001      	b.n	8002876 <LoopFillZerobss>

08002872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002874:	3204      	adds	r2, #4

08002876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002878:	d3fb      	bcc.n	8002872 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800287a:	f005 fbe7 	bl	800804c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800287e:	f7fe f9ff 	bl	8000c80 <main>
  bx  lr    
 8002882:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002884:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800288c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8002890:	08008174 	.word	0x08008174
  ldr r2, =_sbss
 8002894:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002898:	20000584 	.word	0x20000584

0800289c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800289c:	e7fe      	b.n	800289c <ADC_IRQHandler>
	...

080028a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028a4:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <HAL_Init+0x40>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0d      	ldr	r2, [pc, #52]	; (80028e0 <HAL_Init+0x40>)
 80028aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_Init+0x40>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <HAL_Init+0x40>)
 80028b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028bc:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <HAL_Init+0x40>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a07      	ldr	r2, [pc, #28]	; (80028e0 <HAL_Init+0x40>)
 80028c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c8:	2003      	movs	r0, #3
 80028ca:	f000 f94f 	bl	8002b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ce:	200f      	movs	r0, #15
 80028d0:	f000 f808 	bl	80028e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028d4:	f7ff fc74 	bl	80021c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40023c00 	.word	0x40023c00

080028e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028ec:	4b12      	ldr	r3, [pc, #72]	; (8002938 <HAL_InitTick+0x54>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b12      	ldr	r3, [pc, #72]	; (800293c <HAL_InitTick+0x58>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	4619      	mov	r1, r3
 80028f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80028fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002902:	4618      	mov	r0, r3
 8002904:	f000 f967 	bl	8002bd6 <HAL_SYSTICK_Config>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e00e      	b.n	8002930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b0f      	cmp	r3, #15
 8002916:	d80a      	bhi.n	800292e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002918:	2200      	movs	r2, #0
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002920:	f000 f92f 	bl	8002b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002924:	4a06      	ldr	r2, [pc, #24]	; (8002940 <HAL_InitTick+0x5c>)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	e000      	b.n	8002930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	2000001c 	.word	0x2000001c
 800293c:	20000024 	.word	0x20000024
 8002940:	20000020 	.word	0x20000020

08002944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002948:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_IncTick+0x20>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_IncTick+0x24>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4413      	add	r3, r2
 8002954:	4a04      	ldr	r2, [pc, #16]	; (8002968 <HAL_IncTick+0x24>)
 8002956:	6013      	str	r3, [r2, #0]
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	20000024 	.word	0x20000024
 8002968:	20000580 	.word	0x20000580

0800296c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return uwTick;
 8002970:	4b03      	ldr	r3, [pc, #12]	; (8002980 <HAL_GetTick+0x14>)
 8002972:	681b      	ldr	r3, [r3, #0]
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20000580 	.word	0x20000580

08002984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800298c:	f7ff ffee 	bl	800296c <HAL_GetTick>
 8002990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800299c:	d005      	beq.n	80029aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <HAL_Delay+0x44>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4413      	add	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029aa:	bf00      	nop
 80029ac:	f7ff ffde 	bl	800296c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d8f7      	bhi.n	80029ac <HAL_Delay+0x28>
  {
  }
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000024 	.word	0x20000024

080029cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <__NVIC_SetPriorityGrouping+0x44>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029e8:	4013      	ands	r3, r2
 80029ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029fe:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <__NVIC_SetPriorityGrouping+0x44>)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	60d3      	str	r3, [r2, #12]
}
 8002a04:	bf00      	nop
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a18:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <__NVIC_GetPriorityGrouping+0x18>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	0a1b      	lsrs	r3, r3, #8
 8002a1e:	f003 0307 	and.w	r3, r3, #7
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	db0b      	blt.n	8002a5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	f003 021f 	and.w	r2, r3, #31
 8002a48:	4907      	ldr	r1, [pc, #28]	; (8002a68 <__NVIC_EnableIRQ+0x38>)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	2001      	movs	r0, #1
 8002a52:	fa00 f202 	lsl.w	r2, r0, r2
 8002a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	e000e100 	.word	0xe000e100

08002a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	6039      	str	r1, [r7, #0]
 8002a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	db0a      	blt.n	8002a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	490c      	ldr	r1, [pc, #48]	; (8002ab8 <__NVIC_SetPriority+0x4c>)
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	0112      	lsls	r2, r2, #4
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	440b      	add	r3, r1
 8002a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a94:	e00a      	b.n	8002aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	4908      	ldr	r1, [pc, #32]	; (8002abc <__NVIC_SetPriority+0x50>)
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	3b04      	subs	r3, #4
 8002aa4:	0112      	lsls	r2, r2, #4
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	761a      	strb	r2, [r3, #24]
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	e000e100 	.word	0xe000e100
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b089      	sub	sp, #36	; 0x24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f1c3 0307 	rsb	r3, r3, #7
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	bf28      	it	cs
 8002ade:	2304      	movcs	r3, #4
 8002ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	2b06      	cmp	r3, #6
 8002ae8:	d902      	bls.n	8002af0 <NVIC_EncodePriority+0x30>
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	3b03      	subs	r3, #3
 8002aee:	e000      	b.n	8002af2 <NVIC_EncodePriority+0x32>
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43da      	mvns	r2, r3
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	401a      	ands	r2, r3
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b12:	43d9      	mvns	r1, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b18:	4313      	orrs	r3, r2
         );
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3724      	adds	r7, #36	; 0x24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b38:	d301      	bcc.n	8002b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e00f      	b.n	8002b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b3e:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <SysTick_Config+0x40>)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b46:	210f      	movs	r1, #15
 8002b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b4c:	f7ff ff8e 	bl	8002a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <SysTick_Config+0x40>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b56:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <SysTick_Config+0x40>)
 8002b58:	2207      	movs	r2, #7
 8002b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	e000e010 	.word	0xe000e010

08002b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff ff29 	bl	80029cc <__NVIC_SetPriorityGrouping>
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b086      	sub	sp, #24
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	4603      	mov	r3, r0
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	607a      	str	r2, [r7, #4]
 8002b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b94:	f7ff ff3e 	bl	8002a14 <__NVIC_GetPriorityGrouping>
 8002b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	6978      	ldr	r0, [r7, #20]
 8002ba0:	f7ff ff8e 	bl	8002ac0 <NVIC_EncodePriority>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002baa:	4611      	mov	r1, r2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff5d 	bl	8002a6c <__NVIC_SetPriority>
}
 8002bb2:	bf00      	nop
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff31 	bl	8002a30 <__NVIC_EnableIRQ>
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff ffa2 	bl	8002b28 <SysTick_Config>
 8002be4:	4603      	mov	r3, r0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bfc:	f7ff feb6 	bl	800296c <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e099      	b.n	8002d40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c2c:	e00f      	b.n	8002c4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c2e:	f7ff fe9d 	bl	800296c <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b05      	cmp	r3, #5
 8002c3a:	d908      	bls.n	8002c4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2203      	movs	r2, #3
 8002c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e078      	b.n	8002d40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1e8      	bne.n	8002c2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	4b38      	ldr	r3, [pc, #224]	; (8002d48 <HAL_DMA_Init+0x158>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d107      	bne.n	8002cb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f023 0307 	bic.w	r3, r3, #7
 8002cce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d117      	bne.n	8002d12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00e      	beq.n	8002d12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fb01 	bl	80032fc <DMA_CheckFifoParam>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d008      	beq.n	8002d12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2240      	movs	r2, #64	; 0x40
 8002d04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e016      	b.n	8002d40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fab8 	bl	8003290 <DMA_CalcBaseAndBitshift>
 8002d20:	4603      	mov	r3, r0
 8002d22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d28:	223f      	movs	r2, #63	; 0x3f
 8002d2a:	409a      	lsls	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	f010803f 	.word	0xf010803f

08002d4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_DMA_Start_IT+0x26>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e040      	b.n	8002df4 <HAL_DMA_Start_IT+0xa8>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d12f      	bne.n	8002de6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2202      	movs	r2, #2
 8002d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	68b9      	ldr	r1, [r7, #8]
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 fa4a 	bl	8003234 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da4:	223f      	movs	r2, #63	; 0x3f
 8002da6:	409a      	lsls	r2, r3
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0216 	orr.w	r2, r2, #22
 8002dba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d007      	beq.n	8002dd4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0208 	orr.w	r2, r2, #8
 8002dd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	e005      	b.n	8002df2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002dee:	2302      	movs	r3, #2
 8002df0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e0a:	f7ff fdaf 	bl	800296c <HAL_GetTick>
 8002e0e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d008      	beq.n	8002e2e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2280      	movs	r2, #128	; 0x80
 8002e20:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e052      	b.n	8002ed4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0216 	bic.w	r2, r2, #22
 8002e3c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695a      	ldr	r2, [r3, #20]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e4c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d103      	bne.n	8002e5e <HAL_DMA_Abort+0x62>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d007      	beq.n	8002e6e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0208 	bic.w	r2, r2, #8
 8002e6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0201 	bic.w	r2, r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e7e:	e013      	b.n	8002ea8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e80:	f7ff fd74 	bl	800296c <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b05      	cmp	r3, #5
 8002e8c:	d90c      	bls.n	8002ea8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2220      	movs	r2, #32
 8002e92:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2203      	movs	r2, #3
 8002e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e015      	b.n	8002ed4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1e4      	bne.n	8002e80 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eba:	223f      	movs	r2, #63	; 0x3f
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d004      	beq.n	8002efa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2280      	movs	r2, #128	; 0x80
 8002ef4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e00c      	b.n	8002f14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2205      	movs	r2, #5
 8002efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0201 	bic.w	r2, r2, #1
 8002f10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f2c:	4b8e      	ldr	r3, [pc, #568]	; (8003168 <HAL_DMA_IRQHandler+0x248>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a8e      	ldr	r2, [pc, #568]	; (800316c <HAL_DMA_IRQHandler+0x24c>)
 8002f32:	fba2 2303 	umull	r2, r3, r2, r3
 8002f36:	0a9b      	lsrs	r3, r3, #10
 8002f38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4a:	2208      	movs	r2, #8
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d01a      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d013      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0204 	bic.w	r2, r2, #4
 8002f72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f78:	2208      	movs	r2, #8
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	f043 0201 	orr.w	r2, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f90:	2201      	movs	r2, #1
 8002f92:	409a      	lsls	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d012      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00b      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fae:	2201      	movs	r2, #1
 8002fb0:	409a      	lsls	r2, r3
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fba:	f043 0202 	orr.w	r2, r3, #2
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc6:	2204      	movs	r2, #4
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d012      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00b      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe4:	2204      	movs	r2, #4
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff0:	f043 0204 	orr.w	r2, r3, #4
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffc:	2210      	movs	r2, #16
 8002ffe:	409a      	lsls	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4013      	ands	r3, r2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d043      	beq.n	8003090 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d03c      	beq.n	8003090 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301a:	2210      	movs	r2, #16
 800301c:	409a      	lsls	r2, r3
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d018      	beq.n	8003062 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d108      	bne.n	8003050 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d024      	beq.n	8003090 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	4798      	blx	r3
 800304e:	e01f      	b.n	8003090 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01b      	beq.n	8003090 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	4798      	blx	r3
 8003060:	e016      	b.n	8003090 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d107      	bne.n	8003080 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0208 	bic.w	r2, r2, #8
 800307e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003094:	2220      	movs	r2, #32
 8003096:	409a      	lsls	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4013      	ands	r3, r2
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 808f 	beq.w	80031c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 8087 	beq.w	80031c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b6:	2220      	movs	r2, #32
 80030b8:	409a      	lsls	r2, r3
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b05      	cmp	r3, #5
 80030c8:	d136      	bne.n	8003138 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0216 	bic.w	r2, r2, #22
 80030d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695a      	ldr	r2, [r3, #20]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d103      	bne.n	80030fa <HAL_DMA_IRQHandler+0x1da>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d007      	beq.n	800310a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0208 	bic.w	r2, r2, #8
 8003108:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310e:	223f      	movs	r2, #63	; 0x3f
 8003110:	409a      	lsls	r2, r3
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312a:	2b00      	cmp	r3, #0
 800312c:	d07e      	beq.n	800322c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	4798      	blx	r3
        }
        return;
 8003136:	e079      	b.n	800322c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01d      	beq.n	8003182 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10d      	bne.n	8003170 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003158:	2b00      	cmp	r3, #0
 800315a:	d031      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	4798      	blx	r3
 8003164:	e02c      	b.n	80031c0 <HAL_DMA_IRQHandler+0x2a0>
 8003166:	bf00      	nop
 8003168:	2000001c 	.word	0x2000001c
 800316c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003174:	2b00      	cmp	r3, #0
 8003176:	d023      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	4798      	blx	r3
 8003180:	e01e      	b.n	80031c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10f      	bne.n	80031b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0210 	bic.w	r2, r2, #16
 800319e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d032      	beq.n	800322e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d022      	beq.n	800321a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2205      	movs	r2, #5
 80031d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0201 	bic.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	3301      	adds	r3, #1
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d307      	bcc.n	8003208 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f2      	bne.n	80031ec <HAL_DMA_IRQHandler+0x2cc>
 8003206:	e000      	b.n	800320a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003208:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321e:	2b00      	cmp	r3, #0
 8003220:	d005      	beq.n	800322e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	4798      	blx	r3
 800322a:	e000      	b.n	800322e <HAL_DMA_IRQHandler+0x30e>
        return;
 800322c:	bf00      	nop
    }
  }
}
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003250:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b40      	cmp	r3, #64	; 0x40
 8003260:	d108      	bne.n	8003274 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003272:	e007      	b.n	8003284 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	60da      	str	r2, [r3, #12]
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	3b10      	subs	r3, #16
 80032a0:	4a14      	ldr	r2, [pc, #80]	; (80032f4 <DMA_CalcBaseAndBitshift+0x64>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032aa:	4a13      	ldr	r2, [pc, #76]	; (80032f8 <DMA_CalcBaseAndBitshift+0x68>)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4413      	add	r3, r2
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d909      	bls.n	80032d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032c6:	f023 0303 	bic.w	r3, r3, #3
 80032ca:	1d1a      	adds	r2, r3, #4
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	659a      	str	r2, [r3, #88]	; 0x58
 80032d0:	e007      	b.n	80032e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032da:	f023 0303 	bic.w	r3, r3, #3
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	aaaaaaab 	.word	0xaaaaaaab
 80032f8:	0800815c 	.word	0x0800815c

080032fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d11f      	bne.n	8003356 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b03      	cmp	r3, #3
 800331a:	d856      	bhi.n	80033ca <DMA_CheckFifoParam+0xce>
 800331c:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <DMA_CheckFifoParam+0x28>)
 800331e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003322:	bf00      	nop
 8003324:	08003335 	.word	0x08003335
 8003328:	08003347 	.word	0x08003347
 800332c:	08003335 	.word	0x08003335
 8003330:	080033cb 	.word	0x080033cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d046      	beq.n	80033ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003344:	e043      	b.n	80033ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800334e:	d140      	bne.n	80033d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003354:	e03d      	b.n	80033d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800335e:	d121      	bne.n	80033a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b03      	cmp	r3, #3
 8003364:	d837      	bhi.n	80033d6 <DMA_CheckFifoParam+0xda>
 8003366:	a201      	add	r2, pc, #4	; (adr r2, 800336c <DMA_CheckFifoParam+0x70>)
 8003368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336c:	0800337d 	.word	0x0800337d
 8003370:	08003383 	.word	0x08003383
 8003374:	0800337d 	.word	0x0800337d
 8003378:	08003395 	.word	0x08003395
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
      break;
 8003380:	e030      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d025      	beq.n	80033da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003392:	e022      	b.n	80033da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800339c:	d11f      	bne.n	80033de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033a2:	e01c      	b.n	80033de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d903      	bls.n	80033b2 <DMA_CheckFifoParam+0xb6>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d003      	beq.n	80033b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033b0:	e018      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	73fb      	strb	r3, [r7, #15]
      break;
 80033b6:	e015      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00e      	beq.n	80033e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
      break;
 80033c8:	e00b      	b.n	80033e2 <DMA_CheckFifoParam+0xe6>
      break;
 80033ca:	bf00      	nop
 80033cc:	e00a      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033ce:	bf00      	nop
 80033d0:	e008      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033d2:	bf00      	nop
 80033d4:	e006      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033d6:	bf00      	nop
 80033d8:	e004      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033da:	bf00      	nop
 80033dc:	e002      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80033de:	bf00      	nop
 80033e0:	e000      	b.n	80033e4 <DMA_CheckFifoParam+0xe8>
      break;
 80033e2:	bf00      	nop
    }
  } 
  
  return status; 
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop

080033f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b089      	sub	sp, #36	; 0x24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003402:	2300      	movs	r3, #0
 8003404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003406:	2300      	movs	r3, #0
 8003408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800340a:	2300      	movs	r3, #0
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	e177      	b.n	8003700 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003410:	2201      	movs	r2, #1
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4013      	ands	r3, r2
 8003422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	429a      	cmp	r2, r3
 800342a:	f040 8166 	bne.w	80036fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	2b01      	cmp	r3, #1
 8003438:	d005      	beq.n	8003446 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003442:	2b02      	cmp	r3, #2
 8003444:	d130      	bne.n	80034a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	2203      	movs	r2, #3
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4013      	ands	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4313      	orrs	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800347c:	2201      	movs	r2, #1
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	091b      	lsrs	r3, r3, #4
 8003492:	f003 0201 	and.w	r2, r3, #1
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d017      	beq.n	80034e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	2203      	movs	r2, #3
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d123      	bne.n	8003538 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	08da      	lsrs	r2, r3, #3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3208      	adds	r2, #8
 80034f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	220f      	movs	r2, #15
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	691a      	ldr	r2, [r3, #16]
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4313      	orrs	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	08da      	lsrs	r2, r3, #3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3208      	adds	r2, #8
 8003532:	69b9      	ldr	r1, [r7, #24]
 8003534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	2203      	movs	r2, #3
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4013      	ands	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 0203 	and.w	r2, r3, #3
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4313      	orrs	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 80c0 	beq.w	80036fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	4b66      	ldr	r3, [pc, #408]	; (8003718 <HAL_GPIO_Init+0x324>)
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	4a65      	ldr	r2, [pc, #404]	; (8003718 <HAL_GPIO_Init+0x324>)
 8003584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003588:	6453      	str	r3, [r2, #68]	; 0x44
 800358a:	4b63      	ldr	r3, [pc, #396]	; (8003718 <HAL_GPIO_Init+0x324>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003596:	4a61      	ldr	r2, [pc, #388]	; (800371c <HAL_GPIO_Init+0x328>)
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	089b      	lsrs	r3, r3, #2
 800359c:	3302      	adds	r3, #2
 800359e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	220f      	movs	r2, #15
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43db      	mvns	r3, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4013      	ands	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a58      	ldr	r2, [pc, #352]	; (8003720 <HAL_GPIO_Init+0x32c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d037      	beq.n	8003632 <HAL_GPIO_Init+0x23e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a57      	ldr	r2, [pc, #348]	; (8003724 <HAL_GPIO_Init+0x330>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d031      	beq.n	800362e <HAL_GPIO_Init+0x23a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a56      	ldr	r2, [pc, #344]	; (8003728 <HAL_GPIO_Init+0x334>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d02b      	beq.n	800362a <HAL_GPIO_Init+0x236>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a55      	ldr	r2, [pc, #340]	; (800372c <HAL_GPIO_Init+0x338>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d025      	beq.n	8003626 <HAL_GPIO_Init+0x232>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a54      	ldr	r2, [pc, #336]	; (8003730 <HAL_GPIO_Init+0x33c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d01f      	beq.n	8003622 <HAL_GPIO_Init+0x22e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a53      	ldr	r2, [pc, #332]	; (8003734 <HAL_GPIO_Init+0x340>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d019      	beq.n	800361e <HAL_GPIO_Init+0x22a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a52      	ldr	r2, [pc, #328]	; (8003738 <HAL_GPIO_Init+0x344>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <HAL_GPIO_Init+0x226>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a51      	ldr	r2, [pc, #324]	; (800373c <HAL_GPIO_Init+0x348>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00d      	beq.n	8003616 <HAL_GPIO_Init+0x222>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a50      	ldr	r2, [pc, #320]	; (8003740 <HAL_GPIO_Init+0x34c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d007      	beq.n	8003612 <HAL_GPIO_Init+0x21e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a4f      	ldr	r2, [pc, #316]	; (8003744 <HAL_GPIO_Init+0x350>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d101      	bne.n	800360e <HAL_GPIO_Init+0x21a>
 800360a:	2309      	movs	r3, #9
 800360c:	e012      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800360e:	230a      	movs	r3, #10
 8003610:	e010      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003612:	2308      	movs	r3, #8
 8003614:	e00e      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003616:	2307      	movs	r3, #7
 8003618:	e00c      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800361a:	2306      	movs	r3, #6
 800361c:	e00a      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800361e:	2305      	movs	r3, #5
 8003620:	e008      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003622:	2304      	movs	r3, #4
 8003624:	e006      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003626:	2303      	movs	r3, #3
 8003628:	e004      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800362a:	2302      	movs	r3, #2
 800362c:	e002      	b.n	8003634 <HAL_GPIO_Init+0x240>
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <HAL_GPIO_Init+0x240>
 8003632:	2300      	movs	r3, #0
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	f002 0203 	and.w	r2, r2, #3
 800363a:	0092      	lsls	r2, r2, #2
 800363c:	4093      	lsls	r3, r2
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4313      	orrs	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003644:	4935      	ldr	r1, [pc, #212]	; (800371c <HAL_GPIO_Init+0x328>)
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	089b      	lsrs	r3, r3, #2
 800364a:	3302      	adds	r3, #2
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003652:	4b3d      	ldr	r3, [pc, #244]	; (8003748 <HAL_GPIO_Init+0x354>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	43db      	mvns	r3, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4013      	ands	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	4313      	orrs	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003676:	4a34      	ldr	r2, [pc, #208]	; (8003748 <HAL_GPIO_Init+0x354>)
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800367c:	4b32      	ldr	r3, [pc, #200]	; (8003748 <HAL_GPIO_Init+0x354>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	43db      	mvns	r3, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036a0:	4a29      	ldr	r2, [pc, #164]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036a6:	4b28      	ldr	r3, [pc, #160]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	43db      	mvns	r3, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4013      	ands	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036ca:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036d0:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036f4:	4a14      	ldr	r2, [pc, #80]	; (8003748 <HAL_GPIO_Init+0x354>)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	3301      	adds	r3, #1
 80036fe:	61fb      	str	r3, [r7, #28]
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	2b0f      	cmp	r3, #15
 8003704:	f67f ae84 	bls.w	8003410 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003708:	bf00      	nop
 800370a:	bf00      	nop
 800370c:	3724      	adds	r7, #36	; 0x24
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	40013800 	.word	0x40013800
 8003720:	40020000 	.word	0x40020000
 8003724:	40020400 	.word	0x40020400
 8003728:	40020800 	.word	0x40020800
 800372c:	40020c00 	.word	0x40020c00
 8003730:	40021000 	.word	0x40021000
 8003734:	40021400 	.word	0x40021400
 8003738:	40021800 	.word	0x40021800
 800373c:	40021c00 	.word	0x40021c00
 8003740:	40022000 	.word	0x40022000
 8003744:	40022400 	.word	0x40022400
 8003748:	40013c00 	.word	0x40013c00

0800374c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	887b      	ldrh	r3, [r7, #2]
 800375e:	4013      	ands	r3, r2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d002      	beq.n	800376a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
 8003768:	e001      	b.n	800376e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800376a:	2300      	movs	r3, #0
 800376c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800376e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	807b      	strh	r3, [r7, #2]
 8003788:	4613      	mov	r3, r2
 800378a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800378c:	787b      	ldrb	r3, [r7, #1]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003792:	887a      	ldrh	r2, [r7, #2]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003798:	e003      	b.n	80037a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800379a:	887b      	ldrh	r3, [r7, #2]
 800379c:	041a      	lsls	r2, r3, #16
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	619a      	str	r2, [r3, #24]
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b085      	sub	sp, #20
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	460b      	mov	r3, r1
 80037b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037c0:	887a      	ldrh	r2, [r7, #2]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4013      	ands	r3, r2
 80037c6:	041a      	lsls	r2, r3, #16
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	43d9      	mvns	r1, r3
 80037cc:	887b      	ldrh	r3, [r7, #2]
 80037ce:	400b      	ands	r3, r1
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	619a      	str	r2, [r3, #24]
}
 80037d6:	bf00      	nop
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
	...

080037e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e12b      	b.n	8003a4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fe fd00 	bl	8002210 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0201 	bic.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003836:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003846:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003848:	f001 fc72 	bl	8005130 <HAL_RCC_GetPCLK1Freq>
 800384c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	4a81      	ldr	r2, [pc, #516]	; (8003a58 <HAL_I2C_Init+0x274>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d807      	bhi.n	8003868 <HAL_I2C_Init+0x84>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4a80      	ldr	r2, [pc, #512]	; (8003a5c <HAL_I2C_Init+0x278>)
 800385c:	4293      	cmp	r3, r2
 800385e:	bf94      	ite	ls
 8003860:	2301      	movls	r3, #1
 8003862:	2300      	movhi	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	e006      	b.n	8003876 <HAL_I2C_Init+0x92>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4a7d      	ldr	r2, [pc, #500]	; (8003a60 <HAL_I2C_Init+0x27c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	bf94      	ite	ls
 8003870:	2301      	movls	r3, #1
 8003872:	2300      	movhi	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e0e7      	b.n	8003a4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4a78      	ldr	r2, [pc, #480]	; (8003a64 <HAL_I2C_Init+0x280>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	0c9b      	lsrs	r3, r3, #18
 8003888:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	430a      	orrs	r2, r1
 800389c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4a6a      	ldr	r2, [pc, #424]	; (8003a58 <HAL_I2C_Init+0x274>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d802      	bhi.n	80038b8 <HAL_I2C_Init+0xd4>
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	3301      	adds	r3, #1
 80038b6:	e009      	b.n	80038cc <HAL_I2C_Init+0xe8>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038be:	fb02 f303 	mul.w	r3, r2, r3
 80038c2:	4a69      	ldr	r2, [pc, #420]	; (8003a68 <HAL_I2C_Init+0x284>)
 80038c4:	fba2 2303 	umull	r2, r3, r2, r3
 80038c8:	099b      	lsrs	r3, r3, #6
 80038ca:	3301      	adds	r3, #1
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	430b      	orrs	r3, r1
 80038d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	495c      	ldr	r1, [pc, #368]	; (8003a58 <HAL_I2C_Init+0x274>)
 80038e8:	428b      	cmp	r3, r1
 80038ea:	d819      	bhi.n	8003920 <HAL_I2C_Init+0x13c>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	1e59      	subs	r1, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80038fa:	1c59      	adds	r1, r3, #1
 80038fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003900:	400b      	ands	r3, r1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00a      	beq.n	800391c <HAL_I2C_Init+0x138>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1e59      	subs	r1, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	fbb1 f3f3 	udiv	r3, r1, r3
 8003914:	3301      	adds	r3, #1
 8003916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391a:	e051      	b.n	80039c0 <HAL_I2C_Init+0x1dc>
 800391c:	2304      	movs	r3, #4
 800391e:	e04f      	b.n	80039c0 <HAL_I2C_Init+0x1dc>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d111      	bne.n	800394c <HAL_I2C_Init+0x168>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	1e58      	subs	r0, r3, #1
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6859      	ldr	r1, [r3, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	440b      	add	r3, r1
 8003936:	fbb0 f3f3 	udiv	r3, r0, r3
 800393a:	3301      	adds	r3, #1
 800393c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003940:	2b00      	cmp	r3, #0
 8003942:	bf0c      	ite	eq
 8003944:	2301      	moveq	r3, #1
 8003946:	2300      	movne	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	e012      	b.n	8003972 <HAL_I2C_Init+0x18e>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	1e58      	subs	r0, r3, #1
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6859      	ldr	r1, [r3, #4]
 8003954:	460b      	mov	r3, r1
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	0099      	lsls	r1, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003962:	3301      	adds	r3, #1
 8003964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003968:	2b00      	cmp	r3, #0
 800396a:	bf0c      	ite	eq
 800396c:	2301      	moveq	r3, #1
 800396e:	2300      	movne	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_I2C_Init+0x196>
 8003976:	2301      	movs	r3, #1
 8003978:	e022      	b.n	80039c0 <HAL_I2C_Init+0x1dc>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10e      	bne.n	80039a0 <HAL_I2C_Init+0x1bc>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1e58      	subs	r0, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6859      	ldr	r1, [r3, #4]
 800398a:	460b      	mov	r3, r1
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	440b      	add	r3, r1
 8003990:	fbb0 f3f3 	udiv	r3, r0, r3
 8003994:	3301      	adds	r3, #1
 8003996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800399a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800399e:	e00f      	b.n	80039c0 <HAL_I2C_Init+0x1dc>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	1e58      	subs	r0, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6859      	ldr	r1, [r3, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	0099      	lsls	r1, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039b6:	3301      	adds	r3, #1
 80039b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	6809      	ldr	r1, [r1, #0]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69da      	ldr	r2, [r3, #28]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6911      	ldr	r1, [r2, #16]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	68d2      	ldr	r2, [r2, #12]
 80039fa:	4311      	orrs	r1, r2
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	430b      	orrs	r3, r1
 8003a02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695a      	ldr	r2, [r3, #20]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0201 	orr.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	000186a0 	.word	0x000186a0
 8003a5c:	001e847f 	.word	0x001e847f
 8003a60:	003d08ff 	.word	0x003d08ff
 8003a64:	431bde83 	.word	0x431bde83
 8003a68:	10624dd3 	.word	0x10624dd3

08003a6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b088      	sub	sp, #32
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	607a      	str	r2, [r7, #4]
 8003a76:	461a      	mov	r2, r3
 8003a78:	460b      	mov	r3, r1
 8003a7a:	817b      	strh	r3, [r7, #10]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a80:	f7fe ff74 	bl	800296c <HAL_GetTick>
 8003a84:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	f040 80e0 	bne.w	8003c54 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	2319      	movs	r3, #25
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	4970      	ldr	r1, [pc, #448]	; (8003c60 <HAL_I2C_Master_Transmit+0x1f4>)
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 fc64 	bl	800436c <I2C_WaitOnFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e0d3      	b.n	8003c56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_I2C_Master_Transmit+0x50>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e0cc      	b.n	8003c56 <HAL_I2C_Master_Transmit+0x1ea>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d007      	beq.n	8003ae2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0201 	orr.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003af0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2221      	movs	r2, #33	; 0x21
 8003af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2210      	movs	r2, #16
 8003afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	893a      	ldrh	r2, [r7, #8]
 8003b12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4a50      	ldr	r2, [pc, #320]	; (8003c64 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b24:	8979      	ldrh	r1, [r7, #10]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	6a3a      	ldr	r2, [r7, #32]
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 face 	bl	80040cc <I2C_MasterRequestWrite>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e08d      	b.n	8003c56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b50:	e066      	b.n	8003c20 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	6a39      	ldr	r1, [r7, #32]
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 fd22 	bl	80045a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00d      	beq.n	8003b7e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d107      	bne.n	8003b7a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e06b      	b.n	8003c56 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	781a      	ldrb	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d11b      	bne.n	8003bf4 <HAL_I2C_Master_Transmit+0x188>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d017      	beq.n	8003bf4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	781a      	ldrb	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	6a39      	ldr	r1, [r7, #32]
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 fd19 	bl	8004630 <I2C_WaitOnBTFFlagUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00d      	beq.n	8003c20 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	2b04      	cmp	r3, #4
 8003c0a:	d107      	bne.n	8003c1c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c1a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e01a      	b.n	8003c56 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d194      	bne.n	8003b52 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	e000      	b.n	8003c56 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c54:	2302      	movs	r3, #2
  }
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	00100002 	.word	0x00100002
 8003c64:	ffff0000 	.word	0xffff0000

08003c68 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08c      	sub	sp, #48	; 0x30
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	607a      	str	r2, [r7, #4]
 8003c72:	461a      	mov	r2, r3
 8003c74:	460b      	mov	r3, r1
 8003c76:	817b      	strh	r3, [r7, #10]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c7c:	f7fe fe76 	bl	800296c <HAL_GetTick>
 8003c80:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	f040 8217 	bne.w	80040be <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	2319      	movs	r3, #25
 8003c96:	2201      	movs	r2, #1
 8003c98:	497c      	ldr	r1, [pc, #496]	; (8003e8c <HAL_I2C_Master_Receive+0x224>)
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 fb66 	bl	800436c <I2C_WaitOnFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e20a      	b.n	80040c0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_I2C_Master_Receive+0x50>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e203      	b.n	80040c0 <HAL_I2C_Master_Receive+0x458>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d007      	beq.n	8003cde <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0201 	orr.w	r2, r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2222      	movs	r2, #34	; 0x22
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2210      	movs	r2, #16
 8003cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	893a      	ldrh	r2, [r7, #8]
 8003d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4a5c      	ldr	r2, [pc, #368]	; (8003e90 <HAL_I2C_Master_Receive+0x228>)
 8003d1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d20:	8979      	ldrh	r1, [r7, #10]
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 fa52 	bl	80041d0 <I2C_MasterRequestRead>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e1c4      	b.n	80040c0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d113      	bne.n	8003d66 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d3e:	2300      	movs	r3, #0
 8003d40:	623b      	str	r3, [r7, #32]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	623b      	str	r3, [r7, #32]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	623b      	str	r3, [r7, #32]
 8003d52:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	e198      	b.n	8004098 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d11b      	bne.n	8003da6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61fb      	str	r3, [r7, #28]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	61fb      	str	r3, [r7, #28]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	61fb      	str	r3, [r7, #28]
 8003d92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	e178      	b.n	8004098 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d11b      	bne.n	8003de6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dbc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	61bb      	str	r3, [r7, #24]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	61bb      	str	r3, [r7, #24]
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	e158      	b.n	8004098 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003df4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	617b      	str	r3, [r7, #20]
 8003e0a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e0c:	e144      	b.n	8004098 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	f200 80f1 	bhi.w	8003ffa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d123      	bne.n	8003e68 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 fc4b 	bl	80046c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e145      	b.n	80040c0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e66:	e117      	b.n	8004098 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d14e      	bne.n	8003f0e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e76:	2200      	movs	r2, #0
 8003e78:	4906      	ldr	r1, [pc, #24]	; (8003e94 <HAL_I2C_Master_Receive+0x22c>)
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 fa76 	bl	800436c <I2C_WaitOnFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d008      	beq.n	8003e98 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e11a      	b.n	80040c0 <HAL_I2C_Master_Receive+0x458>
 8003e8a:	bf00      	nop
 8003e8c:	00100002 	.word	0x00100002
 8003e90:	ffff0000 	.word	0xffff0000
 8003e94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	691a      	ldr	r2, [r3, #16]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f0c:	e0c4      	b.n	8004098 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f14:	2200      	movs	r2, #0
 8003f16:	496c      	ldr	r1, [pc, #432]	; (80040c8 <HAL_I2C_Master_Receive+0x460>)
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 fa27 	bl	800436c <I2C_WaitOnFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e0cb      	b.n	80040c0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691a      	ldr	r2, [r3, #16]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f70:	2200      	movs	r2, #0
 8003f72:	4955      	ldr	r1, [pc, #340]	; (80040c8 <HAL_I2C_Master_Receive+0x460>)
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 f9f9 	bl	800436c <I2C_WaitOnFlagUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e09d      	b.n	80040c0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691a      	ldr	r2, [r3, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	b2d2      	uxtb	r2, r2
 8003fd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ff8:	e04e      	b.n	8004098 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 fb5e 	bl	80046c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e058      	b.n	80040c0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402a:	3b01      	subs	r3, #1
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004036:	b29b      	uxth	r3, r3
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b04      	cmp	r3, #4
 800404c:	d124      	bne.n	8004098 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004052:	2b03      	cmp	r3, #3
 8004054:	d107      	bne.n	8004066 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004064:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409c:	2b00      	cmp	r3, #0
 800409e:	f47f aeb6 	bne.w	8003e0e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e000      	b.n	80040c0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80040be:	2302      	movs	r3, #2
  }
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3728      	adds	r7, #40	; 0x28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	00010004 	.word	0x00010004

080040cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	603b      	str	r3, [r7, #0]
 80040d8:	460b      	mov	r3, r1
 80040da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d006      	beq.n	80040f6 <I2C_MasterRequestWrite+0x2a>
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d003      	beq.n	80040f6 <I2C_MasterRequestWrite+0x2a>
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040f4:	d108      	bne.n	8004108 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	e00b      	b.n	8004120 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410c:	2b12      	cmp	r3, #18
 800410e:	d107      	bne.n	8004120 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800411e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 f91d 	bl	800436c <I2C_WaitOnFlagUntilTimeout>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00d      	beq.n	8004154 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004146:	d103      	bne.n	8004150 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800414e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e035      	b.n	80041c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800415c:	d108      	bne.n	8004170 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800415e:	897b      	ldrh	r3, [r7, #10]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800416c:	611a      	str	r2, [r3, #16]
 800416e:	e01b      	b.n	80041a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004170:	897b      	ldrh	r3, [r7, #10]
 8004172:	11db      	asrs	r3, r3, #7
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f003 0306 	and.w	r3, r3, #6
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f063 030f 	orn	r3, r3, #15
 8004180:	b2da      	uxtb	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	490e      	ldr	r1, [pc, #56]	; (80041c8 <I2C_MasterRequestWrite+0xfc>)
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 f966 	bl	8004460 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e010      	b.n	80041c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800419e:	897b      	ldrh	r3, [r7, #10]
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	4907      	ldr	r1, [pc, #28]	; (80041cc <I2C_MasterRequestWrite+0x100>)
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 f956 	bl	8004460 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e000      	b.n	80041c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	00010008 	.word	0x00010008
 80041cc:	00010002 	.word	0x00010002

080041d0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af02      	add	r7, sp, #8
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	607a      	str	r2, [r7, #4]
 80041da:	603b      	str	r3, [r7, #0]
 80041dc:	460b      	mov	r3, r1
 80041de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041f4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d006      	beq.n	800420a <I2C_MasterRequestRead+0x3a>
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d003      	beq.n	800420a <I2C_MasterRequestRead+0x3a>
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004208:	d108      	bne.n	800421c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	e00b      	b.n	8004234 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004220:	2b11      	cmp	r3, #17
 8004222:	d107      	bne.n	8004234 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004232:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 f893 	bl	800436c <I2C_WaitOnFlagUntilTimeout>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00d      	beq.n	8004268 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800425a:	d103      	bne.n	8004264 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004262:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e079      	b.n	800435c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004270:	d108      	bne.n	8004284 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004272:	897b      	ldrh	r3, [r7, #10]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f043 0301 	orr.w	r3, r3, #1
 800427a:	b2da      	uxtb	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	611a      	str	r2, [r3, #16]
 8004282:	e05f      	b.n	8004344 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004284:	897b      	ldrh	r3, [r7, #10]
 8004286:	11db      	asrs	r3, r3, #7
 8004288:	b2db      	uxtb	r3, r3
 800428a:	f003 0306 	and.w	r3, r3, #6
 800428e:	b2db      	uxtb	r3, r3
 8004290:	f063 030f 	orn	r3, r3, #15
 8004294:	b2da      	uxtb	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	4930      	ldr	r1, [pc, #192]	; (8004364 <I2C_MasterRequestRead+0x194>)
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 f8dc 	bl	8004460 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e054      	b.n	800435c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042b2:	897b      	ldrh	r3, [r7, #10]
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	4929      	ldr	r1, [pc, #164]	; (8004368 <I2C_MasterRequestRead+0x198>)
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f8cc 	bl	8004460 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e044      	b.n	800435c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d2:	2300      	movs	r3, #0
 80042d4:	613b      	str	r3, [r7, #16]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 f831 	bl	800436c <I2C_WaitOnFlagUntilTimeout>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00d      	beq.n	800432c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800431e:	d103      	bne.n	8004328 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004326:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e017      	b.n	800435c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800432c:	897b      	ldrh	r3, [r7, #10]
 800432e:	11db      	asrs	r3, r3, #7
 8004330:	b2db      	uxtb	r3, r3
 8004332:	f003 0306 	and.w	r3, r3, #6
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f063 030e 	orn	r3, r3, #14
 800433c:	b2da      	uxtb	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	4907      	ldr	r1, [pc, #28]	; (8004368 <I2C_MasterRequestRead+0x198>)
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 f888 	bl	8004460 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3718      	adds	r7, #24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	00010008 	.word	0x00010008
 8004368:	00010002 	.word	0x00010002

0800436c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	4613      	mov	r3, r2
 800437a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800437c:	e048      	b.n	8004410 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004384:	d044      	beq.n	8004410 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004386:	f7fe faf1 	bl	800296c <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d302      	bcc.n	800439c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d139      	bne.n	8004410 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	0c1b      	lsrs	r3, r3, #16
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d10d      	bne.n	80043c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	43da      	mvns	r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	4013      	ands	r3, r2
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	bf0c      	ite	eq
 80043b8:	2301      	moveq	r3, #1
 80043ba:	2300      	movne	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	461a      	mov	r2, r3
 80043c0:	e00c      	b.n	80043dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	43da      	mvns	r2, r3
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	4013      	ands	r3, r2
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	bf0c      	ite	eq
 80043d4:	2301      	moveq	r3, #1
 80043d6:	2300      	movne	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	461a      	mov	r2, r3
 80043dc:	79fb      	ldrb	r3, [r7, #7]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d116      	bne.n	8004410 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	f043 0220 	orr.w	r2, r3, #32
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e023      	b.n	8004458 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	0c1b      	lsrs	r3, r3, #16
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b01      	cmp	r3, #1
 8004418:	d10d      	bne.n	8004436 <I2C_WaitOnFlagUntilTimeout+0xca>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	43da      	mvns	r2, r3
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4013      	ands	r3, r2
 8004426:	b29b      	uxth	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	e00c      	b.n	8004450 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	43da      	mvns	r2, r3
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	4013      	ands	r3, r2
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	bf0c      	ite	eq
 8004448:	2301      	moveq	r3, #1
 800444a:	2300      	movne	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	461a      	mov	r2, r3
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	429a      	cmp	r2, r3
 8004454:	d093      	beq.n	800437e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800446e:	e071      	b.n	8004554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447e:	d123      	bne.n	80044c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800448e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004498:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	f043 0204 	orr.w	r2, r3, #4
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e067      	b.n	8004598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044ce:	d041      	beq.n	8004554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d0:	f7fe fa4c 	bl	800296c <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d302      	bcc.n	80044e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d136      	bne.n	8004554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	0c1b      	lsrs	r3, r3, #16
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d10c      	bne.n	800450a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	43da      	mvns	r2, r3
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4013      	ands	r3, r2
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	bf14      	ite	ne
 8004502:	2301      	movne	r3, #1
 8004504:	2300      	moveq	r3, #0
 8004506:	b2db      	uxtb	r3, r3
 8004508:	e00b      	b.n	8004522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	43da      	mvns	r2, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	4013      	ands	r3, r2
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	bf14      	ite	ne
 800451c:	2301      	movne	r3, #1
 800451e:	2300      	moveq	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d016      	beq.n	8004554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	f043 0220 	orr.w	r2, r3, #32
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e021      	b.n	8004598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	0c1b      	lsrs	r3, r3, #16
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b01      	cmp	r3, #1
 800455c:	d10c      	bne.n	8004578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	43da      	mvns	r2, r3
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	4013      	ands	r3, r2
 800456a:	b29b      	uxth	r3, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	bf14      	ite	ne
 8004570:	2301      	movne	r3, #1
 8004572:	2300      	moveq	r3, #0
 8004574:	b2db      	uxtb	r3, r3
 8004576:	e00b      	b.n	8004590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	43da      	mvns	r2, r3
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	4013      	ands	r3, r2
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	bf14      	ite	ne
 800458a:	2301      	movne	r3, #1
 800458c:	2300      	moveq	r3, #0
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	f47f af6d 	bne.w	8004470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045ac:	e034      	b.n	8004618 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 f8e3 	bl	800477a <I2C_IsAcknowledgeFailed>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e034      	b.n	8004628 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045c4:	d028      	beq.n	8004618 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c6:	f7fe f9d1 	bl	800296c <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d302      	bcc.n	80045dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d11d      	bne.n	8004618 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e6:	2b80      	cmp	r3, #128	; 0x80
 80045e8:	d016      	beq.n	8004618 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	f043 0220 	orr.w	r2, r3, #32
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e007      	b.n	8004628 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004622:	2b80      	cmp	r3, #128	; 0x80
 8004624:	d1c3      	bne.n	80045ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800463c:	e034      	b.n	80046a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 f89b 	bl	800477a <I2C_IsAcknowledgeFailed>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e034      	b.n	80046b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004654:	d028      	beq.n	80046a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004656:	f7fe f989 	bl	800296c <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	429a      	cmp	r2, r3
 8004664:	d302      	bcc.n	800466c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d11d      	bne.n	80046a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b04      	cmp	r3, #4
 8004678:	d016      	beq.n	80046a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	f043 0220 	orr.w	r2, r3, #32
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e007      	b.n	80046b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f003 0304 	and.w	r3, r3, #4
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d1c3      	bne.n	800463e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046cc:	e049      	b.n	8004762 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b10      	cmp	r3, #16
 80046da:	d119      	bne.n	8004710 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0210 	mvn.w	r2, #16
 80046e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e030      	b.n	8004772 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004710:	f7fe f92c 	bl	800296c <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	429a      	cmp	r2, r3
 800471e:	d302      	bcc.n	8004726 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d11d      	bne.n	8004762 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004730:	2b40      	cmp	r3, #64	; 0x40
 8004732:	d016      	beq.n	8004762 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f043 0220 	orr.w	r2, r3, #32
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e007      	b.n	8004772 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476c:	2b40      	cmp	r3, #64	; 0x40
 800476e:	d1ae      	bne.n	80046ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800478c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004790:	d11b      	bne.n	80047ca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800479a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2220      	movs	r2, #32
 80047a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	f043 0204 	orr.w	r2, r3, #4
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b20      	cmp	r3, #32
 80047ec:	d129      	bne.n	8004842 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2224      	movs	r2, #36	; 0x24
 80047f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0201 	bic.w	r2, r2, #1
 8004804:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0210 	bic.w	r2, r2, #16
 8004814:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f042 0201 	orr.w	r2, r2, #1
 8004834:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2220      	movs	r2, #32
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	e000      	b.n	8004844 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004842:	2302      	movs	r3, #2
  }
}
 8004844:	4618      	mov	r0, r3
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800485a:	2300      	movs	r3, #0
 800485c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b20      	cmp	r3, #32
 8004868:	d12a      	bne.n	80048c0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2224      	movs	r2, #36	; 0x24
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0201 	bic.w	r2, r2, #1
 8004880:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800488a:	89fb      	ldrh	r3, [r7, #14]
 800488c:	f023 030f 	bic.w	r3, r3, #15
 8004890:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	b29a      	uxth	r2, r3
 8004896:	89fb      	ldrh	r3, [r7, #14]
 8004898:	4313      	orrs	r3, r2
 800489a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	89fa      	ldrh	r2, [r7, #14]
 80048a2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048bc:	2300      	movs	r3, #0
 80048be:	e000      	b.n	80048c2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80048c0:	2302      	movs	r3, #2
  }
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
	...

080048d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e267      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d075      	beq.n	80049da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048ee:	4b88      	ldr	r3, [pc, #544]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 030c 	and.w	r3, r3, #12
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d00c      	beq.n	8004914 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048fa:	4b85      	ldr	r3, [pc, #532]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004902:	2b08      	cmp	r3, #8
 8004904:	d112      	bne.n	800492c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004906:	4b82      	ldr	r3, [pc, #520]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800490e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004912:	d10b      	bne.n	800492c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004914:	4b7e      	ldr	r3, [pc, #504]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d05b      	beq.n	80049d8 <HAL_RCC_OscConfig+0x108>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d157      	bne.n	80049d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e242      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004934:	d106      	bne.n	8004944 <HAL_RCC_OscConfig+0x74>
 8004936:	4b76      	ldr	r3, [pc, #472]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a75      	ldr	r2, [pc, #468]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 800493c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	e01d      	b.n	8004980 <HAL_RCC_OscConfig+0xb0>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800494c:	d10c      	bne.n	8004968 <HAL_RCC_OscConfig+0x98>
 800494e:	4b70      	ldr	r3, [pc, #448]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a6f      	ldr	r2, [pc, #444]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	4b6d      	ldr	r3, [pc, #436]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a6c      	ldr	r2, [pc, #432]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	e00b      	b.n	8004980 <HAL_RCC_OscConfig+0xb0>
 8004968:	4b69      	ldr	r3, [pc, #420]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a68      	ldr	r2, [pc, #416]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 800496e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	4b66      	ldr	r3, [pc, #408]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a65      	ldr	r2, [pc, #404]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 800497a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800497e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d013      	beq.n	80049b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004988:	f7fd fff0 	bl	800296c <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004990:	f7fd ffec 	bl	800296c <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b64      	cmp	r3, #100	; 0x64
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e207      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a2:	4b5b      	ldr	r3, [pc, #364]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0xc0>
 80049ae:	e014      	b.n	80049da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b0:	f7fd ffdc 	bl	800296c <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049b8:	f7fd ffd8 	bl	800296c <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b64      	cmp	r3, #100	; 0x64
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e1f3      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ca:	4b51      	ldr	r3, [pc, #324]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1f0      	bne.n	80049b8 <HAL_RCC_OscConfig+0xe8>
 80049d6:	e000      	b.n	80049da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d063      	beq.n	8004aae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049e6:	4b4a      	ldr	r3, [pc, #296]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 030c 	and.w	r3, r3, #12
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00b      	beq.n	8004a0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049f2:	4b47      	ldr	r3, [pc, #284]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d11c      	bne.n	8004a38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049fe:	4b44      	ldr	r3, [pc, #272]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d116      	bne.n	8004a38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a0a:	4b41      	ldr	r3, [pc, #260]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d005      	beq.n	8004a22 <HAL_RCC_OscConfig+0x152>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d001      	beq.n	8004a22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e1c7      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a22:	4b3b      	ldr	r3, [pc, #236]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	4937      	ldr	r1, [pc, #220]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a36:	e03a      	b.n	8004aae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d020      	beq.n	8004a82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a40:	4b34      	ldr	r3, [pc, #208]	; (8004b14 <HAL_RCC_OscConfig+0x244>)
 8004a42:	2201      	movs	r2, #1
 8004a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a46:	f7fd ff91 	bl	800296c <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4c:	e008      	b.n	8004a60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a4e:	f7fd ff8d 	bl	800296c <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e1a8      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a60:	4b2b      	ldr	r3, [pc, #172]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0f0      	beq.n	8004a4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a6c:	4b28      	ldr	r3, [pc, #160]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	4925      	ldr	r1, [pc, #148]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	600b      	str	r3, [r1, #0]
 8004a80:	e015      	b.n	8004aae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a82:	4b24      	ldr	r3, [pc, #144]	; (8004b14 <HAL_RCC_OscConfig+0x244>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a88:	f7fd ff70 	bl	800296c <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a90:	f7fd ff6c 	bl	800296c <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e187      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aa2:	4b1b      	ldr	r3, [pc, #108]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1f0      	bne.n	8004a90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d036      	beq.n	8004b28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d016      	beq.n	8004af0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ac2:	4b15      	ldr	r3, [pc, #84]	; (8004b18 <HAL_RCC_OscConfig+0x248>)
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac8:	f7fd ff50 	bl	800296c <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ad0:	f7fd ff4c 	bl	800296c <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e167      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ae2:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0f0      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x200>
 8004aee:	e01b      	b.n	8004b28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004af0:	4b09      	ldr	r3, [pc, #36]	; (8004b18 <HAL_RCC_OscConfig+0x248>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004af6:	f7fd ff39 	bl	800296c <HAL_GetTick>
 8004afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004afc:	e00e      	b.n	8004b1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004afe:	f7fd ff35 	bl	800296c <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d907      	bls.n	8004b1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e150      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
 8004b10:	40023800 	.word	0x40023800
 8004b14:	42470000 	.word	0x42470000
 8004b18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b1c:	4b88      	ldr	r3, [pc, #544]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1ea      	bne.n	8004afe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 8097 	beq.w	8004c64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b36:	2300      	movs	r3, #0
 8004b38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b3a:	4b81      	ldr	r3, [pc, #516]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10f      	bne.n	8004b66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b46:	2300      	movs	r3, #0
 8004b48:	60bb      	str	r3, [r7, #8]
 8004b4a:	4b7d      	ldr	r3, [pc, #500]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	4a7c      	ldr	r2, [pc, #496]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b54:	6413      	str	r3, [r2, #64]	; 0x40
 8004b56:	4b7a      	ldr	r3, [pc, #488]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5e:	60bb      	str	r3, [r7, #8]
 8004b60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b62:	2301      	movs	r3, #1
 8004b64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b66:	4b77      	ldr	r3, [pc, #476]	; (8004d44 <HAL_RCC_OscConfig+0x474>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d118      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b72:	4b74      	ldr	r3, [pc, #464]	; (8004d44 <HAL_RCC_OscConfig+0x474>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a73      	ldr	r2, [pc, #460]	; (8004d44 <HAL_RCC_OscConfig+0x474>)
 8004b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b7e:	f7fd fef5 	bl	800296c <HAL_GetTick>
 8004b82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b84:	e008      	b.n	8004b98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b86:	f7fd fef1 	bl	800296c <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e10c      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b98:	4b6a      	ldr	r3, [pc, #424]	; (8004d44 <HAL_RCC_OscConfig+0x474>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d0f0      	beq.n	8004b86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d106      	bne.n	8004bba <HAL_RCC_OscConfig+0x2ea>
 8004bac:	4b64      	ldr	r3, [pc, #400]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb0:	4a63      	ldr	r2, [pc, #396]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004bb2:	f043 0301 	orr.w	r3, r3, #1
 8004bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb8:	e01c      	b.n	8004bf4 <HAL_RCC_OscConfig+0x324>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b05      	cmp	r3, #5
 8004bc0:	d10c      	bne.n	8004bdc <HAL_RCC_OscConfig+0x30c>
 8004bc2:	4b5f      	ldr	r3, [pc, #380]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc6:	4a5e      	ldr	r2, [pc, #376]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004bc8:	f043 0304 	orr.w	r3, r3, #4
 8004bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bce:	4b5c      	ldr	r3, [pc, #368]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd2:	4a5b      	ldr	r2, [pc, #364]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004bd4:	f043 0301 	orr.w	r3, r3, #1
 8004bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bda:	e00b      	b.n	8004bf4 <HAL_RCC_OscConfig+0x324>
 8004bdc:	4b58      	ldr	r3, [pc, #352]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be0:	4a57      	ldr	r2, [pc, #348]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004be2:	f023 0301 	bic.w	r3, r3, #1
 8004be6:	6713      	str	r3, [r2, #112]	; 0x70
 8004be8:	4b55      	ldr	r3, [pc, #340]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bec:	4a54      	ldr	r2, [pc, #336]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004bee:	f023 0304 	bic.w	r3, r3, #4
 8004bf2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d015      	beq.n	8004c28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bfc:	f7fd feb6 	bl	800296c <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c02:	e00a      	b.n	8004c1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c04:	f7fd feb2 	bl	800296c <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e0cb      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1a:	4b49      	ldr	r3, [pc, #292]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0ee      	beq.n	8004c04 <HAL_RCC_OscConfig+0x334>
 8004c26:	e014      	b.n	8004c52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c28:	f7fd fea0 	bl	800296c <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c2e:	e00a      	b.n	8004c46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c30:	f7fd fe9c 	bl	800296c <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e0b5      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c46:	4b3e      	ldr	r3, [pc, #248]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1ee      	bne.n	8004c30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c52:	7dfb      	ldrb	r3, [r7, #23]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d105      	bne.n	8004c64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c58:	4b39      	ldr	r3, [pc, #228]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	4a38      	ldr	r2, [pc, #224]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 80a1 	beq.w	8004db0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c6e:	4b34      	ldr	r3, [pc, #208]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 030c 	and.w	r3, r3, #12
 8004c76:	2b08      	cmp	r3, #8
 8004c78:	d05c      	beq.n	8004d34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d141      	bne.n	8004d06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c82:	4b31      	ldr	r3, [pc, #196]	; (8004d48 <HAL_RCC_OscConfig+0x478>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c88:	f7fd fe70 	bl	800296c <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c90:	f7fd fe6c 	bl	800296c <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e087      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca2:	4b27      	ldr	r3, [pc, #156]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	69da      	ldr	r2, [r3, #28]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	019b      	lsls	r3, r3, #6
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc4:	085b      	lsrs	r3, r3, #1
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	041b      	lsls	r3, r3, #16
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	061b      	lsls	r3, r3, #24
 8004cd2:	491b      	ldr	r1, [pc, #108]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cd8:	4b1b      	ldr	r3, [pc, #108]	; (8004d48 <HAL_RCC_OscConfig+0x478>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cde:	f7fd fe45 	bl	800296c <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ce4:	e008      	b.n	8004cf8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce6:	f7fd fe41 	bl	800296c <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e05c      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf8:	4b11      	ldr	r3, [pc, #68]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0f0      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x416>
 8004d04:	e054      	b.n	8004db0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d06:	4b10      	ldr	r3, [pc, #64]	; (8004d48 <HAL_RCC_OscConfig+0x478>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0c:	f7fd fe2e 	bl	800296c <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d14:	f7fd fe2a 	bl	800296c <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e045      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d26:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f0      	bne.n	8004d14 <HAL_RCC_OscConfig+0x444>
 8004d32:	e03d      	b.n	8004db0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d107      	bne.n	8004d4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e038      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
 8004d40:	40023800 	.word	0x40023800
 8004d44:	40007000 	.word	0x40007000
 8004d48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d4c:	4b1b      	ldr	r3, [pc, #108]	; (8004dbc <HAL_RCC_OscConfig+0x4ec>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d028      	beq.n	8004dac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d121      	bne.n	8004dac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d11a      	bne.n	8004dac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d111      	bne.n	8004dac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d92:	085b      	lsrs	r3, r3, #1
 8004d94:	3b01      	subs	r3, #1
 8004d96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d107      	bne.n	8004dac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d001      	beq.n	8004db0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e000      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	40023800 	.word	0x40023800

08004dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e0cc      	b.n	8004f6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dd4:	4b68      	ldr	r3, [pc, #416]	; (8004f78 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d90c      	bls.n	8004dfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de2:	4b65      	ldr	r3, [pc, #404]	; (8004f78 <HAL_RCC_ClockConfig+0x1b8>)
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dea:	4b63      	ldr	r3, [pc, #396]	; (8004f78 <HAL_RCC_ClockConfig+0x1b8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d001      	beq.n	8004dfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e0b8      	b.n	8004f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d020      	beq.n	8004e4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d005      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e14:	4b59      	ldr	r3, [pc, #356]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	4a58      	ldr	r2, [pc, #352]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0308 	and.w	r3, r3, #8
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d005      	beq.n	8004e38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e2c:	4b53      	ldr	r3, [pc, #332]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	4a52      	ldr	r2, [pc, #328]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e38:	4b50      	ldr	r3, [pc, #320]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	494d      	ldr	r1, [pc, #308]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d044      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d107      	bne.n	8004e6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e5e:	4b47      	ldr	r3, [pc, #284]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d119      	bne.n	8004e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e07f      	b.n	8004f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d003      	beq.n	8004e7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d107      	bne.n	8004e8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e7e:	4b3f      	ldr	r3, [pc, #252]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d109      	bne.n	8004e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e06f      	b.n	8004f6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e8e:	4b3b      	ldr	r3, [pc, #236]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e067      	b.n	8004f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e9e:	4b37      	ldr	r3, [pc, #220]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f023 0203 	bic.w	r2, r3, #3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	4934      	ldr	r1, [pc, #208]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004eb0:	f7fd fd5c 	bl	800296c <HAL_GetTick>
 8004eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eb6:	e00a      	b.n	8004ece <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eb8:	f7fd fd58 	bl	800296c <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e04f      	b.n	8004f6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ece:	4b2b      	ldr	r3, [pc, #172]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 020c 	and.w	r2, r3, #12
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d1eb      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ee0:	4b25      	ldr	r3, [pc, #148]	; (8004f78 <HAL_RCC_ClockConfig+0x1b8>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d20c      	bcs.n	8004f08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eee:	4b22      	ldr	r3, [pc, #136]	; (8004f78 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef6:	4b20      	ldr	r3, [pc, #128]	; (8004f78 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d001      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e032      	b.n	8004f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d008      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f14:	4b19      	ldr	r3, [pc, #100]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	4916      	ldr	r1, [pc, #88]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0308 	and.w	r3, r3, #8
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d009      	beq.n	8004f46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f32:	4b12      	ldr	r3, [pc, #72]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	490e      	ldr	r1, [pc, #56]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f46:	f000 f821 	bl	8004f8c <HAL_RCC_GetSysClockFreq>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	4b0b      	ldr	r3, [pc, #44]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	091b      	lsrs	r3, r3, #4
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	490a      	ldr	r1, [pc, #40]	; (8004f80 <HAL_RCC_ClockConfig+0x1c0>)
 8004f58:	5ccb      	ldrb	r3, [r1, r3]
 8004f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5e:	4a09      	ldr	r2, [pc, #36]	; (8004f84 <HAL_RCC_ClockConfig+0x1c4>)
 8004f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f62:	4b09      	ldr	r3, [pc, #36]	; (8004f88 <HAL_RCC_ClockConfig+0x1c8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fd fcbc 	bl	80028e4 <HAL_InitTick>

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	40023c00 	.word	0x40023c00
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	08008144 	.word	0x08008144
 8004f84:	2000001c 	.word	0x2000001c
 8004f88:	20000020 	.word	0x20000020

08004f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f90:	b090      	sub	sp, #64	; 0x40
 8004f92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	637b      	str	r3, [r7, #52]	; 0x34
 8004f98:	2300      	movs	r3, #0
 8004f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fa4:	4b59      	ldr	r3, [pc, #356]	; (800510c <HAL_RCC_GetSysClockFreq+0x180>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f003 030c 	and.w	r3, r3, #12
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d00d      	beq.n	8004fcc <HAL_RCC_GetSysClockFreq+0x40>
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	f200 80a1 	bhi.w	80050f8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <HAL_RCC_GetSysClockFreq+0x34>
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d003      	beq.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004fbe:	e09b      	b.n	80050f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fc0:	4b53      	ldr	r3, [pc, #332]	; (8005110 <HAL_RCC_GetSysClockFreq+0x184>)
 8004fc2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004fc4:	e09b      	b.n	80050fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fc6:	4b53      	ldr	r3, [pc, #332]	; (8005114 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fc8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004fca:	e098      	b.n	80050fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fcc:	4b4f      	ldr	r3, [pc, #316]	; (800510c <HAL_RCC_GetSysClockFreq+0x180>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fd4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fd6:	4b4d      	ldr	r3, [pc, #308]	; (800510c <HAL_RCC_GetSysClockFreq+0x180>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d028      	beq.n	8005034 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fe2:	4b4a      	ldr	r3, [pc, #296]	; (800510c <HAL_RCC_GetSysClockFreq+0x180>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	099b      	lsrs	r3, r3, #6
 8004fe8:	2200      	movs	r2, #0
 8004fea:	623b      	str	r3, [r7, #32]
 8004fec:	627a      	str	r2, [r7, #36]	; 0x24
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	4b47      	ldr	r3, [pc, #284]	; (8005114 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ff8:	fb03 f201 	mul.w	r2, r3, r1
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	fb00 f303 	mul.w	r3, r0, r3
 8005002:	4413      	add	r3, r2
 8005004:	4a43      	ldr	r2, [pc, #268]	; (8005114 <HAL_RCC_GetSysClockFreq+0x188>)
 8005006:	fba0 1202 	umull	r1, r2, r0, r2
 800500a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800500c:	460a      	mov	r2, r1
 800500e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005012:	4413      	add	r3, r2
 8005014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005018:	2200      	movs	r2, #0
 800501a:	61bb      	str	r3, [r7, #24]
 800501c:	61fa      	str	r2, [r7, #28]
 800501e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005022:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005026:	f7fb f8e9 	bl	80001fc <__aeabi_uldivmod>
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	4613      	mov	r3, r2
 8005030:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005032:	e053      	b.n	80050dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005034:	4b35      	ldr	r3, [pc, #212]	; (800510c <HAL_RCC_GetSysClockFreq+0x180>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	099b      	lsrs	r3, r3, #6
 800503a:	2200      	movs	r2, #0
 800503c:	613b      	str	r3, [r7, #16]
 800503e:	617a      	str	r2, [r7, #20]
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005046:	f04f 0b00 	mov.w	fp, #0
 800504a:	4652      	mov	r2, sl
 800504c:	465b      	mov	r3, fp
 800504e:	f04f 0000 	mov.w	r0, #0
 8005052:	f04f 0100 	mov.w	r1, #0
 8005056:	0159      	lsls	r1, r3, #5
 8005058:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800505c:	0150      	lsls	r0, r2, #5
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	ebb2 080a 	subs.w	r8, r2, sl
 8005066:	eb63 090b 	sbc.w	r9, r3, fp
 800506a:	f04f 0200 	mov.w	r2, #0
 800506e:	f04f 0300 	mov.w	r3, #0
 8005072:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005076:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800507a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800507e:	ebb2 0408 	subs.w	r4, r2, r8
 8005082:	eb63 0509 	sbc.w	r5, r3, r9
 8005086:	f04f 0200 	mov.w	r2, #0
 800508a:	f04f 0300 	mov.w	r3, #0
 800508e:	00eb      	lsls	r3, r5, #3
 8005090:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005094:	00e2      	lsls	r2, r4, #3
 8005096:	4614      	mov	r4, r2
 8005098:	461d      	mov	r5, r3
 800509a:	eb14 030a 	adds.w	r3, r4, sl
 800509e:	603b      	str	r3, [r7, #0]
 80050a0:	eb45 030b 	adc.w	r3, r5, fp
 80050a4:	607b      	str	r3, [r7, #4]
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	f04f 0300 	mov.w	r3, #0
 80050ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050b2:	4629      	mov	r1, r5
 80050b4:	028b      	lsls	r3, r1, #10
 80050b6:	4621      	mov	r1, r4
 80050b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050bc:	4621      	mov	r1, r4
 80050be:	028a      	lsls	r2, r1, #10
 80050c0:	4610      	mov	r0, r2
 80050c2:	4619      	mov	r1, r3
 80050c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c6:	2200      	movs	r2, #0
 80050c8:	60bb      	str	r3, [r7, #8]
 80050ca:	60fa      	str	r2, [r7, #12]
 80050cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050d0:	f7fb f894 	bl	80001fc <__aeabi_uldivmod>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4613      	mov	r3, r2
 80050da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050dc:	4b0b      	ldr	r3, [pc, #44]	; (800510c <HAL_RCC_GetSysClockFreq+0x180>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	0c1b      	lsrs	r3, r3, #16
 80050e2:	f003 0303 	and.w	r3, r3, #3
 80050e6:	3301      	adds	r3, #1
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80050ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050f6:	e002      	b.n	80050fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050f8:	4b05      	ldr	r3, [pc, #20]	; (8005110 <HAL_RCC_GetSysClockFreq+0x184>)
 80050fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005100:	4618      	mov	r0, r3
 8005102:	3740      	adds	r7, #64	; 0x40
 8005104:	46bd      	mov	sp, r7
 8005106:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800510a:	bf00      	nop
 800510c:	40023800 	.word	0x40023800
 8005110:	00f42400 	.word	0x00f42400
 8005114:	017d7840 	.word	0x017d7840

08005118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800511c:	4b03      	ldr	r3, [pc, #12]	; (800512c <HAL_RCC_GetHCLKFreq+0x14>)
 800511e:	681b      	ldr	r3, [r3, #0]
}
 8005120:	4618      	mov	r0, r3
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	2000001c 	.word	0x2000001c

08005130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005134:	f7ff fff0 	bl	8005118 <HAL_RCC_GetHCLKFreq>
 8005138:	4602      	mov	r2, r0
 800513a:	4b05      	ldr	r3, [pc, #20]	; (8005150 <HAL_RCC_GetPCLK1Freq+0x20>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	0a9b      	lsrs	r3, r3, #10
 8005140:	f003 0307 	and.w	r3, r3, #7
 8005144:	4903      	ldr	r1, [pc, #12]	; (8005154 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005146:	5ccb      	ldrb	r3, [r1, r3]
 8005148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800514c:	4618      	mov	r0, r3
 800514e:	bd80      	pop	{r7, pc}
 8005150:	40023800 	.word	0x40023800
 8005154:	08008154 	.word	0x08008154

08005158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800515c:	f7ff ffdc 	bl	8005118 <HAL_RCC_GetHCLKFreq>
 8005160:	4602      	mov	r2, r0
 8005162:	4b05      	ldr	r3, [pc, #20]	; (8005178 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	0b5b      	lsrs	r3, r3, #13
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	4903      	ldr	r1, [pc, #12]	; (800517c <HAL_RCC_GetPCLK2Freq+0x24>)
 800516e:	5ccb      	ldrb	r3, [r1, r3]
 8005170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005174:	4618      	mov	r0, r3
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40023800 	.word	0x40023800
 800517c:	08008154 	.word	0x08008154

08005180 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10b      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d105      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d075      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051b4:	4b91      	ldr	r3, [pc, #580]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051ba:	f7fd fbd7 	bl	800296c <HAL_GetTick>
 80051be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051c0:	e008      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051c2:	f7fd fbd3 	bl	800296c <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e189      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051d4:	4b8a      	ldr	r3, [pc, #552]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1f0      	bne.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d009      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	019a      	lsls	r2, r3, #6
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	071b      	lsls	r3, r3, #28
 80051f8:	4981      	ldr	r1, [pc, #516]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01f      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800520c:	4b7c      	ldr	r3, [pc, #496]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800520e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005212:	0f1b      	lsrs	r3, r3, #28
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	019a      	lsls	r2, r3, #6
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	061b      	lsls	r3, r3, #24
 8005226:	431a      	orrs	r2, r3
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	071b      	lsls	r3, r3, #28
 800522c:	4974      	ldr	r1, [pc, #464]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800522e:	4313      	orrs	r3, r2
 8005230:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005234:	4b72      	ldr	r3, [pc, #456]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800523a:	f023 021f 	bic.w	r2, r3, #31
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	3b01      	subs	r3, #1
 8005244:	496e      	ldr	r1, [pc, #440]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00d      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	019a      	lsls	r2, r3, #6
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	061b      	lsls	r3, r3, #24
 8005264:	431a      	orrs	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	071b      	lsls	r3, r3, #28
 800526c:	4964      	ldr	r1, [pc, #400]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005274:	4b61      	ldr	r3, [pc, #388]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005276:	2201      	movs	r2, #1
 8005278:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800527a:	f7fd fb77 	bl	800296c <HAL_GetTick>
 800527e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005280:	e008      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005282:	f7fd fb73 	bl	800296c <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e129      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005294:	4b5a      	ldr	r3, [pc, #360]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0f0      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d105      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d079      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80052b8:	4b52      	ldr	r3, [pc, #328]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052be:	f7fd fb55 	bl	800296c <HAL_GetTick>
 80052c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052c4:	e008      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80052c6:	f7fd fb51 	bl	800296c <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e107      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052d8:	4b49      	ldr	r3, [pc, #292]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052e4:	d0ef      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d020      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052f2:	4b43      	ldr	r3, [pc, #268]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f8:	0f1b      	lsrs	r3, r3, #28
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	019a      	lsls	r2, r3, #6
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	061b      	lsls	r3, r3, #24
 800530c:	431a      	orrs	r2, r3
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	071b      	lsls	r3, r3, #28
 8005312:	493b      	ldr	r1, [pc, #236]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005314:	4313      	orrs	r3, r2
 8005316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800531a:	4b39      	ldr	r3, [pc, #228]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800531c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005320:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	3b01      	subs	r3, #1
 800532a:	021b      	lsls	r3, r3, #8
 800532c:	4934      	ldr	r1, [pc, #208]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800532e:	4313      	orrs	r3, r2
 8005330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0308 	and.w	r3, r3, #8
 800533c:	2b00      	cmp	r3, #0
 800533e:	d01e      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005340:	4b2f      	ldr	r3, [pc, #188]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005346:	0e1b      	lsrs	r3, r3, #24
 8005348:	f003 030f 	and.w	r3, r3, #15
 800534c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	019a      	lsls	r2, r3, #6
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	061b      	lsls	r3, r3, #24
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	071b      	lsls	r3, r3, #28
 8005360:	4927      	ldr	r1, [pc, #156]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005362:	4313      	orrs	r3, r2
 8005364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005368:	4b25      	ldr	r3, [pc, #148]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800536a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800536e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	4922      	ldr	r1, [pc, #136]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005378:	4313      	orrs	r3, r2
 800537a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800537e:	4b21      	ldr	r3, [pc, #132]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005380:	2201      	movs	r2, #1
 8005382:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005384:	f7fd faf2 	bl	800296c <HAL_GetTick>
 8005388:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800538a:	e008      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800538c:	f7fd faee 	bl	800296c <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b02      	cmp	r3, #2
 8005398:	d901      	bls.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e0a4      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800539e:	4b18      	ldr	r3, [pc, #96]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053aa:	d1ef      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0320 	and.w	r3, r3, #32
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 808b 	beq.w	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053ba:	2300      	movs	r3, #0
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	4b10      	ldr	r3, [pc, #64]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	4a0f      	ldr	r2, [pc, #60]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c8:	6413      	str	r3, [r2, #64]	; 0x40
 80053ca:	4b0d      	ldr	r3, [pc, #52]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80053d6:	4b0c      	ldr	r3, [pc, #48]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a0b      	ldr	r2, [pc, #44]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80053dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053e0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053e2:	f7fd fac3 	bl	800296c <HAL_GetTick>
 80053e6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80053e8:	e010      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80053ea:	f7fd fabf 	bl	800296c <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d909      	bls.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e075      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80053fc:	42470068 	.word	0x42470068
 8005400:	40023800 	.word	0x40023800
 8005404:	42470070 	.word	0x42470070
 8005408:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800540c:	4b38      	ldr	r3, [pc, #224]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0e8      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005418:	4b36      	ldr	r3, [pc, #216]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800541a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005420:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d02f      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	429a      	cmp	r2, r3
 8005434:	d028      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005436:	4b2f      	ldr	r3, [pc, #188]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800543e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005440:	4b2d      	ldr	r3, [pc, #180]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005442:	2201      	movs	r2, #1
 8005444:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005446:	4b2c      	ldr	r3, [pc, #176]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800544c:	4a29      	ldr	r2, [pc, #164]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005452:	4b28      	ldr	r3, [pc, #160]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b01      	cmp	r3, #1
 800545c:	d114      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800545e:	f7fd fa85 	bl	800296c <HAL_GetTick>
 8005462:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005464:	e00a      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005466:	f7fd fa81 	bl	800296c <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	f241 3288 	movw	r2, #5000	; 0x1388
 8005474:	4293      	cmp	r3, r2
 8005476:	d901      	bls.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e035      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800547c:	4b1d      	ldr	r3, [pc, #116]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800547e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d0ee      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005490:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005494:	d10d      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005496:	4b17      	ldr	r3, [pc, #92]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80054a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054aa:	4912      	ldr	r1, [pc, #72]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	608b      	str	r3, [r1, #8]
 80054b0:	e005      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80054b2:	4b10      	ldr	r3, [pc, #64]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	4a0f      	ldr	r2, [pc, #60]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054b8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80054bc:	6093      	str	r3, [r2, #8]
 80054be:	4b0d      	ldr	r3, [pc, #52]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ca:	490a      	ldr	r1, [pc, #40]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0310 	and.w	r3, r3, #16
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d004      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80054e2:	4b06      	ldr	r3, [pc, #24]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80054e4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3718      	adds	r7, #24
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40007000 	.word	0x40007000
 80054f4:	40023800 	.word	0x40023800
 80054f8:	42470e40 	.word	0x42470e40
 80054fc:	424711e0 	.word	0x424711e0

08005500 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e073      	b.n	80055fe <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	7f5b      	ldrb	r3, [r3, #29]
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d105      	bne.n	800552c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fc fef0 	bl	800230c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f003 0310 	and.w	r3, r3, #16
 800553c:	2b10      	cmp	r3, #16
 800553e:	d055      	beq.n	80055ec <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	22ca      	movs	r2, #202	; 0xca
 8005546:	625a      	str	r2, [r3, #36]	; 0x24
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2253      	movs	r2, #83	; 0x53
 800554e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fa49 	bl	80059e8 <RTC_EnterInitMode>
 8005556:	4603      	mov	r3, r0
 8005558:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800555a:	7bfb      	ldrb	r3, [r7, #15]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d12c      	bne.n	80055ba <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6812      	ldr	r2, [r2, #0]
 800556a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800556e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005572:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6899      	ldr	r1, [r3, #8]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	431a      	orrs	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	430a      	orrs	r2, r1
 8005590:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	68d2      	ldr	r2, [r2, #12]
 800559a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6919      	ldr	r1, [r3, #16]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	041a      	lsls	r2, r3, #16
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 fa50 	bl	8005a56 <RTC_ExitInitMode>
 80055b6:	4603      	mov	r3, r0
 80055b8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d110      	bne.n	80055e2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80055ce:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699a      	ldr	r2, [r3, #24]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	22ff      	movs	r2, #255	; 0xff
 80055e8:	625a      	str	r2, [r3, #36]	; 0x24
 80055ea:	e001      	b.n	80055f0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d102      	bne.n	80055fc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005606:	b590      	push	{r4, r7, lr}
 8005608:	b087      	sub	sp, #28
 800560a:	af00      	add	r7, sp, #0
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	7f1b      	ldrb	r3, [r3, #28]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d101      	bne.n	8005622 <HAL_RTC_SetTime+0x1c>
 800561e:	2302      	movs	r3, #2
 8005620:	e087      	b.n	8005732 <HAL_RTC_SetTime+0x12c>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2201      	movs	r2, #1
 8005626:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2202      	movs	r2, #2
 800562c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d126      	bne.n	8005682 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563e:	2b00      	cmp	r3, #0
 8005640:	d102      	bne.n	8005648 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2200      	movs	r2, #0
 8005646:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	4618      	mov	r0, r3
 800564e:	f000 fa27 	bl	8005aa0 <RTC_ByteToBcd2>
 8005652:	4603      	mov	r3, r0
 8005654:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	785b      	ldrb	r3, [r3, #1]
 800565a:	4618      	mov	r0, r3
 800565c:	f000 fa20 	bl	8005aa0 <RTC_ByteToBcd2>
 8005660:	4603      	mov	r3, r0
 8005662:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005664:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	789b      	ldrb	r3, [r3, #2]
 800566a:	4618      	mov	r0, r3
 800566c:	f000 fa18 	bl	8005aa0 <RTC_ByteToBcd2>
 8005670:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005672:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	78db      	ldrb	r3, [r3, #3]
 800567a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800567c:	4313      	orrs	r3, r2
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	e018      	b.n	80056b4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568c:	2b00      	cmp	r3, #0
 800568e:	d102      	bne.n	8005696 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2200      	movs	r2, #0
 8005694:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	785b      	ldrb	r3, [r3, #1]
 80056a0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80056a2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80056a8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	78db      	ldrb	r3, [r3, #3]
 80056ae:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80056b0:	4313      	orrs	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	22ca      	movs	r2, #202	; 0xca
 80056ba:	625a      	str	r2, [r3, #36]	; 0x24
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2253      	movs	r2, #83	; 0x53
 80056c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 f98f 	bl	80059e8 <RTC_EnterInitMode>
 80056ca:	4603      	mov	r3, r0
 80056cc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80056ce:	7cfb      	ldrb	r3, [r7, #19]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d120      	bne.n	8005716 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80056de:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80056e2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689a      	ldr	r2, [r3, #8]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80056f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6899      	ldr	r1, [r3, #8]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	431a      	orrs	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 f9a2 	bl	8005a56 <RTC_ExitInitMode>
 8005712:	4603      	mov	r3, r0
 8005714:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005716:	7cfb      	ldrb	r3, [r7, #19]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d102      	bne.n	8005722 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2201      	movs	r2, #1
 8005720:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	22ff      	movs	r2, #255	; 0xff
 8005728:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	771a      	strb	r2, [r3, #28]

  return status;
 8005730:	7cfb      	ldrb	r3, [r7, #19]
}
 8005732:	4618      	mov	r0, r3
 8005734:	371c      	adds	r7, #28
 8005736:	46bd      	mov	sp, r7
 8005738:	bd90      	pop	{r4, r7, pc}

0800573a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b086      	sub	sp, #24
 800573e:	af00      	add	r7, sp, #0
 8005740:	60f8      	str	r0, [r7, #12]
 8005742:	60b9      	str	r1, [r7, #8]
 8005744:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800576c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005770:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	0c1b      	lsrs	r3, r3, #16
 8005776:	b2db      	uxtb	r3, r3
 8005778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800577c:	b2da      	uxtb	r2, r3
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	0a1b      	lsrs	r3, r3, #8
 8005786:	b2db      	uxtb	r3, r3
 8005788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800578c:	b2da      	uxtb	r2, r3
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	b2db      	uxtb	r3, r3
 8005796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800579a:	b2da      	uxtb	r2, r3
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	0d9b      	lsrs	r3, r3, #22
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d11a      	bne.n	80057ec <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 f98e 	bl	8005adc <RTC_Bcd2ToByte>
 80057c0:	4603      	mov	r3, r0
 80057c2:	461a      	mov	r2, r3
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	785b      	ldrb	r3, [r3, #1]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 f985 	bl	8005adc <RTC_Bcd2ToByte>
 80057d2:	4603      	mov	r3, r0
 80057d4:	461a      	mov	r2, r3
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	789b      	ldrb	r3, [r3, #2]
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 f97c 	bl	8005adc <RTC_Bcd2ToByte>
 80057e4:	4603      	mov	r3, r0
 80057e6:	461a      	mov	r2, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80057f6:	b590      	push	{r4, r7, lr}
 80057f8:	b087      	sub	sp, #28
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	7f1b      	ldrb	r3, [r3, #28]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d101      	bne.n	8005812 <HAL_RTC_SetDate+0x1c>
 800580e:	2302      	movs	r3, #2
 8005810:	e071      	b.n	80058f6 <HAL_RTC_SetDate+0x100>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2201      	movs	r2, #1
 8005816:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2202      	movs	r2, #2
 800581c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10e      	bne.n	8005842 <HAL_RTC_SetDate+0x4c>
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	785b      	ldrb	r3, [r3, #1]
 8005828:	f003 0310 	and.w	r3, r3, #16
 800582c:	2b00      	cmp	r3, #0
 800582e:	d008      	beq.n	8005842 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	785b      	ldrb	r3, [r3, #1]
 8005834:	f023 0310 	bic.w	r3, r3, #16
 8005838:	b2db      	uxtb	r3, r3
 800583a:	330a      	adds	r3, #10
 800583c:	b2da      	uxtb	r2, r3
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d11c      	bne.n	8005882 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	78db      	ldrb	r3, [r3, #3]
 800584c:	4618      	mov	r0, r3
 800584e:	f000 f927 	bl	8005aa0 <RTC_ByteToBcd2>
 8005852:	4603      	mov	r3, r0
 8005854:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	785b      	ldrb	r3, [r3, #1]
 800585a:	4618      	mov	r0, r3
 800585c:	f000 f920 	bl	8005aa0 <RTC_ByteToBcd2>
 8005860:	4603      	mov	r3, r0
 8005862:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005864:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	789b      	ldrb	r3, [r3, #2]
 800586a:	4618      	mov	r0, r3
 800586c:	f000 f918 	bl	8005aa0 <RTC_ByteToBcd2>
 8005870:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005872:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800587c:	4313      	orrs	r3, r2
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	e00e      	b.n	80058a0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	78db      	ldrb	r3, [r3, #3]
 8005886:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	785b      	ldrb	r3, [r3, #1]
 800588c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800588e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005894:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800589c:	4313      	orrs	r3, r2
 800589e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	22ca      	movs	r2, #202	; 0xca
 80058a6:	625a      	str	r2, [r3, #36]	; 0x24
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2253      	movs	r2, #83	; 0x53
 80058ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 f899 	bl	80059e8 <RTC_EnterInitMode>
 80058b6:	4603      	mov	r3, r0
 80058b8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80058ba:	7cfb      	ldrb	r3, [r7, #19]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10c      	bne.n	80058da <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80058ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80058ce:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 f8c0 	bl	8005a56 <RTC_ExitInitMode>
 80058d6:	4603      	mov	r3, r0
 80058d8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80058da:	7cfb      	ldrb	r3, [r7, #19]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d102      	bne.n	80058e6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2201      	movs	r2, #1
 80058e4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	22ff      	movs	r2, #255	; 0xff
 80058ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	771a      	strb	r2, [r3, #28]

  return status;
 80058f4:	7cfb      	ldrb	r3, [r7, #19]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	371c      	adds	r7, #28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd90      	pop	{r4, r7, pc}

080058fe <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b086      	sub	sp, #24
 8005902:	af00      	add	r7, sp, #0
 8005904:	60f8      	str	r0, [r7, #12]
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005918:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800591c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	0c1b      	lsrs	r3, r3, #16
 8005922:	b2da      	uxtb	r2, r3
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	0a1b      	lsrs	r3, r3, #8
 800592c:	b2db      	uxtb	r3, r3
 800592e:	f003 031f 	and.w	r3, r3, #31
 8005932:	b2da      	uxtb	r2, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	b2db      	uxtb	r3, r3
 800593c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005940:	b2da      	uxtb	r2, r3
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	0b5b      	lsrs	r3, r3, #13
 800594a:	b2db      	uxtb	r3, r3
 800594c:	f003 0307 	and.w	r3, r3, #7
 8005950:	b2da      	uxtb	r2, r3
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d11a      	bne.n	8005992 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	78db      	ldrb	r3, [r3, #3]
 8005960:	4618      	mov	r0, r3
 8005962:	f000 f8bb 	bl	8005adc <RTC_Bcd2ToByte>
 8005966:	4603      	mov	r3, r0
 8005968:	461a      	mov	r2, r3
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	785b      	ldrb	r3, [r3, #1]
 8005972:	4618      	mov	r0, r3
 8005974:	f000 f8b2 	bl	8005adc <RTC_Bcd2ToByte>
 8005978:	4603      	mov	r3, r0
 800597a:	461a      	mov	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	789b      	ldrb	r3, [r3, #2]
 8005984:	4618      	mov	r0, r3
 8005986:	f000 f8a9 	bl	8005adc <RTC_Bcd2ToByte>
 800598a:	4603      	mov	r3, r0
 800598c:	461a      	mov	r2, r3
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a0d      	ldr	r2, [pc, #52]	; (80059e4 <HAL_RTC_WaitForSynchro+0x48>)
 80059ae:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059b0:	f7fc ffdc 	bl	800296c <HAL_GetTick>
 80059b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80059b6:	e009      	b.n	80059cc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80059b8:	f7fc ffd8 	bl	800296c <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059c6:	d901      	bls.n	80059cc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e007      	b.n	80059dc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f003 0320 	and.w	r3, r3, #32
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0ee      	beq.n	80059b8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	00017f5f 	.word	0x00017f5f

080059e8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d122      	bne.n	8005a4c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a14:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a16:	f7fc ffa9 	bl	800296c <HAL_GetTick>
 8005a1a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005a1c:	e00c      	b.n	8005a38 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a1e:	f7fc ffa5 	bl	800296c <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a2c:	d904      	bls.n	8005a38 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2204      	movs	r2, #4
 8005a32:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d102      	bne.n	8005a4c <RTC_EnterInitMode+0x64>
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d1e8      	bne.n	8005a1e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b084      	sub	sp, #16
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a70:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f003 0320 	and.w	r3, r3, #32
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10a      	bne.n	8005a96 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7ff ff8b 	bl	800599c <HAL_RTC_WaitForSynchro>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d004      	beq.n	8005a96 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2204      	movs	r2, #4
 8005a90:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005aae:	e005      	b.n	8005abc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	3b0a      	subs	r3, #10
 8005aba:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005abc:	79fb      	ldrb	r3, [r7, #7]
 8005abe:	2b09      	cmp	r3, #9
 8005ac0:	d8f6      	bhi.n	8005ab0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	b2db      	uxtb	r3, r3
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005aea:	79fb      	ldrb	r3, [r7, #7]
 8005aec:	091b      	lsrs	r3, r3, #4
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	461a      	mov	r2, r3
 8005af2:	4613      	mov	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	005b      	lsls	r3, r3, #1
 8005afa:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	79fb      	ldrb	r3, [r7, #7]
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	4413      	add	r3, r2
 8005b0a:	b2db      	uxtb	r3, r3
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e07b      	b.n	8005c22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d108      	bne.n	8005b44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b3a:	d009      	beq.n	8005b50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	61da      	str	r2, [r3, #28]
 8005b42:	e005      	b.n	8005b50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d106      	bne.n	8005b70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7fc fbf8 	bl	8002360 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	431a      	orrs	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd4:	ea42 0103 	orr.w	r1, r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bdc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	0c1b      	lsrs	r3, r3, #16
 8005bee:	f003 0104 	and.w	r1, r3, #4
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	f003 0210 	and.w	r2, r3, #16
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69da      	ldr	r2, [r3, #28]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b088      	sub	sp, #32
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	603b      	str	r3, [r7, #0]
 8005c36:	4613      	mov	r3, r2
 8005c38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d101      	bne.n	8005c4c <HAL_SPI_Transmit+0x22>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	e12d      	b.n	8005ea8 <HAL_SPI_Transmit+0x27e>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c54:	f7fc fe8a 	bl	800296c <HAL_GetTick>
 8005c58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c5a:	88fb      	ldrh	r3, [r7, #6]
 8005c5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d002      	beq.n	8005c70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c6e:	e116      	b.n	8005e9e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <HAL_SPI_Transmit+0x52>
 8005c76:	88fb      	ldrh	r3, [r7, #6]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d102      	bne.n	8005c82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c80:	e10d      	b.n	8005e9e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2203      	movs	r2, #3
 8005c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	88fa      	ldrh	r2, [r7, #6]
 8005c9a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	88fa      	ldrh	r2, [r7, #6]
 8005ca0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cc8:	d10f      	bne.n	8005cea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ce8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf4:	2b40      	cmp	r3, #64	; 0x40
 8005cf6:	d007      	beq.n	8005d08 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d10:	d14f      	bne.n	8005db2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d002      	beq.n	8005d20 <HAL_SPI_Transmit+0xf6>
 8005d1a:	8afb      	ldrh	r3, [r7, #22]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d142      	bne.n	8005da6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	881a      	ldrh	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d30:	1c9a      	adds	r2, r3, #2
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d44:	e02f      	b.n	8005da6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d112      	bne.n	8005d7a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d58:	881a      	ldrh	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d64:	1c9a      	adds	r2, r3, #2
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	3b01      	subs	r3, #1
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d78:	e015      	b.n	8005da6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d7a:	f7fc fdf7 	bl	800296c <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d803      	bhi.n	8005d92 <HAL_SPI_Transmit+0x168>
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d90:	d102      	bne.n	8005d98 <HAL_SPI_Transmit+0x16e>
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d106      	bne.n	8005da6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005da4:	e07b      	b.n	8005e9e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1ca      	bne.n	8005d46 <HAL_SPI_Transmit+0x11c>
 8005db0:	e050      	b.n	8005e54 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <HAL_SPI_Transmit+0x196>
 8005dba:	8afb      	ldrh	r3, [r7, #22]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d144      	bne.n	8005e4a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	330c      	adds	r3, #12
 8005dca:	7812      	ldrb	r2, [r2, #0]
 8005dcc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd2:	1c5a      	adds	r2, r3, #1
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	3b01      	subs	r3, #1
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005de6:	e030      	b.n	8005e4a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d113      	bne.n	8005e1e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	330c      	adds	r3, #12
 8005e00:	7812      	ldrb	r2, [r2, #0]
 8005e02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e08:	1c5a      	adds	r2, r3, #1
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e1c:	e015      	b.n	8005e4a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e1e:	f7fc fda5 	bl	800296c <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d803      	bhi.n	8005e36 <HAL_SPI_Transmit+0x20c>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e34:	d102      	bne.n	8005e3c <HAL_SPI_Transmit+0x212>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d106      	bne.n	8005e4a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005e48:	e029      	b.n	8005e9e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1c9      	bne.n	8005de8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	6839      	ldr	r1, [r7, #0]
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 fd27 	bl	80068ac <SPI_EndRxTxTransaction>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2220      	movs	r2, #32
 8005e68:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10a      	bne.n	8005e88 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e72:	2300      	movs	r3, #0
 8005e74:	613b      	str	r3, [r7, #16]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	613b      	str	r3, [r7, #16]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	613b      	str	r3, [r7, #16]
 8005e86:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	77fb      	strb	r3, [r7, #31]
 8005e94:	e003      	b.n	8005e9e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ea6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3720      	adds	r7, #32
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b088      	sub	sp, #32
 8005eb4:	af02      	add	r7, sp, #8
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	603b      	str	r3, [r7, #0]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d002      	beq.n	8005ed6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ed4:	e0fb      	b.n	80060ce <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ede:	d112      	bne.n	8005f06 <HAL_SPI_Receive+0x56>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10e      	bne.n	8005f06 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2204      	movs	r2, #4
 8005eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005ef0:	88fa      	ldrh	r2, [r7, #6]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	68b9      	ldr	r1, [r7, #8]
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 f8ef 	bl	80060e0 <HAL_SPI_TransmitReceive>
 8005f02:	4603      	mov	r3, r0
 8005f04:	e0e8      	b.n	80060d8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d101      	bne.n	8005f14 <HAL_SPI_Receive+0x64>
 8005f10:	2302      	movs	r3, #2
 8005f12:	e0e1      	b.n	80060d8 <HAL_SPI_Receive+0x228>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f1c:	f7fc fd26 	bl	800296c <HAL_GetTick>
 8005f20:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <HAL_SPI_Receive+0x7e>
 8005f28:	88fb      	ldrh	r3, [r7, #6]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d102      	bne.n	8005f34 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f32:	e0cc      	b.n	80060ce <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2204      	movs	r2, #4
 8005f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	88fa      	ldrh	r2, [r7, #6]
 8005f4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	88fa      	ldrh	r2, [r7, #6]
 8005f52:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f7a:	d10f      	bne.n	8005f9c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f9a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa6:	2b40      	cmp	r3, #64	; 0x40
 8005fa8:	d007      	beq.n	8005fba <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fb8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d16a      	bne.n	8006098 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005fc2:	e032      	b.n	800602a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d115      	bne.n	8005ffe <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f103 020c 	add.w	r2, r3, #12
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	7812      	ldrb	r2, [r2, #0]
 8005fe0:	b2d2      	uxtb	r2, r2
 8005fe2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ffc:	e015      	b.n	800602a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ffe:	f7fc fcb5 	bl	800296c <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	429a      	cmp	r2, r3
 800600c:	d803      	bhi.n	8006016 <HAL_SPI_Receive+0x166>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006014:	d102      	bne.n	800601c <HAL_SPI_Receive+0x16c>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d106      	bne.n	800602a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006028:	e051      	b.n	80060ce <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800602e:	b29b      	uxth	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1c7      	bne.n	8005fc4 <HAL_SPI_Receive+0x114>
 8006034:	e035      	b.n	80060a2 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b01      	cmp	r3, #1
 8006042:	d113      	bne.n	800606c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	b292      	uxth	r2, r2
 8006050:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006056:	1c9a      	adds	r2, r3, #2
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006060:	b29b      	uxth	r3, r3
 8006062:	3b01      	subs	r3, #1
 8006064:	b29a      	uxth	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	87da      	strh	r2, [r3, #62]	; 0x3e
 800606a:	e015      	b.n	8006098 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800606c:	f7fc fc7e 	bl	800296c <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	429a      	cmp	r2, r3
 800607a:	d803      	bhi.n	8006084 <HAL_SPI_Receive+0x1d4>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006082:	d102      	bne.n	800608a <HAL_SPI_Receive+0x1da>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d106      	bne.n	8006098 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006096:	e01a      	b.n	80060ce <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800609c:	b29b      	uxth	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1c9      	bne.n	8006036 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	6839      	ldr	r1, [r7, #0]
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 fb9a 	bl	80067e0 <SPI_EndRxTransaction>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2220      	movs	r2, #32
 80060b6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	75fb      	strb	r3, [r7, #23]
 80060c4:	e003      	b.n	80060ce <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80060d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b08c      	sub	sp, #48	; 0x30
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
 80060ec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80060ee:	2301      	movs	r3, #1
 80060f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d101      	bne.n	8006106 <HAL_SPI_TransmitReceive+0x26>
 8006102:	2302      	movs	r3, #2
 8006104:	e198      	b.n	8006438 <HAL_SPI_TransmitReceive+0x358>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800610e:	f7fc fc2d 	bl	800296c <HAL_GetTick>
 8006112:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800611a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006124:	887b      	ldrh	r3, [r7, #2]
 8006126:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006128:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800612c:	2b01      	cmp	r3, #1
 800612e:	d00f      	beq.n	8006150 <HAL_SPI_TransmitReceive+0x70>
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006136:	d107      	bne.n	8006148 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d103      	bne.n	8006148 <HAL_SPI_TransmitReceive+0x68>
 8006140:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006144:	2b04      	cmp	r3, #4
 8006146:	d003      	beq.n	8006150 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006148:	2302      	movs	r3, #2
 800614a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800614e:	e16d      	b.n	800642c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d005      	beq.n	8006162 <HAL_SPI_TransmitReceive+0x82>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <HAL_SPI_TransmitReceive+0x82>
 800615c:	887b      	ldrh	r3, [r7, #2]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d103      	bne.n	800616a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006168:	e160      	b.n	800642c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b04      	cmp	r3, #4
 8006174:	d003      	beq.n	800617e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2205      	movs	r2, #5
 800617a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	887a      	ldrh	r2, [r7, #2]
 800618e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	887a      	ldrh	r2, [r7, #2]
 8006194:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	887a      	ldrh	r2, [r7, #2]
 80061a0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	887a      	ldrh	r2, [r7, #2]
 80061a6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061be:	2b40      	cmp	r3, #64	; 0x40
 80061c0:	d007      	beq.n	80061d2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061da:	d17c      	bne.n	80062d6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d002      	beq.n	80061ea <HAL_SPI_TransmitReceive+0x10a>
 80061e4:	8b7b      	ldrh	r3, [r7, #26]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d16a      	bne.n	80062c0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ee:	881a      	ldrh	r2, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fa:	1c9a      	adds	r2, r3, #2
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006204:	b29b      	uxth	r3, r3
 8006206:	3b01      	subs	r3, #1
 8006208:	b29a      	uxth	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800620e:	e057      	b.n	80062c0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b02      	cmp	r3, #2
 800621c:	d11b      	bne.n	8006256 <HAL_SPI_TransmitReceive+0x176>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006222:	b29b      	uxth	r3, r3
 8006224:	2b00      	cmp	r3, #0
 8006226:	d016      	beq.n	8006256 <HAL_SPI_TransmitReceive+0x176>
 8006228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622a:	2b01      	cmp	r3, #1
 800622c:	d113      	bne.n	8006256 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006232:	881a      	ldrh	r2, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623e:	1c9a      	adds	r2, r3, #2
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	b29a      	uxth	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006252:	2300      	movs	r3, #0
 8006254:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b01      	cmp	r3, #1
 8006262:	d119      	bne.n	8006298 <HAL_SPI_TransmitReceive+0x1b8>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006268:	b29b      	uxth	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d014      	beq.n	8006298 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006278:	b292      	uxth	r2, r2
 800627a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006280:	1c9a      	adds	r2, r3, #2
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800628a:	b29b      	uxth	r3, r3
 800628c:	3b01      	subs	r3, #1
 800628e:	b29a      	uxth	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006294:	2301      	movs	r3, #1
 8006296:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006298:	f7fc fb68 	bl	800296c <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d80b      	bhi.n	80062c0 <HAL_SPI_TransmitReceive+0x1e0>
 80062a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062ae:	d007      	beq.n	80062c0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80062be:	e0b5      	b.n	800642c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1a2      	bne.n	8006210 <HAL_SPI_TransmitReceive+0x130>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d19d      	bne.n	8006210 <HAL_SPI_TransmitReceive+0x130>
 80062d4:	e080      	b.n	80063d8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d002      	beq.n	80062e4 <HAL_SPI_TransmitReceive+0x204>
 80062de:	8b7b      	ldrh	r3, [r7, #26]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d16f      	bne.n	80063c4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	330c      	adds	r3, #12
 80062ee:	7812      	ldrb	r2, [r2, #0]
 80062f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f6:	1c5a      	adds	r2, r3, #1
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006300:	b29b      	uxth	r3, r3
 8006302:	3b01      	subs	r3, #1
 8006304:	b29a      	uxth	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800630a:	e05b      	b.n	80063c4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b02      	cmp	r3, #2
 8006318:	d11c      	bne.n	8006354 <HAL_SPI_TransmitReceive+0x274>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800631e:	b29b      	uxth	r3, r3
 8006320:	2b00      	cmp	r3, #0
 8006322:	d017      	beq.n	8006354 <HAL_SPI_TransmitReceive+0x274>
 8006324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006326:	2b01      	cmp	r3, #1
 8006328:	d114      	bne.n	8006354 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	330c      	adds	r3, #12
 8006334:	7812      	ldrb	r2, [r2, #0]
 8006336:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633c:	1c5a      	adds	r2, r3, #1
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006346:	b29b      	uxth	r3, r3
 8006348:	3b01      	subs	r3, #1
 800634a:	b29a      	uxth	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b01      	cmp	r3, #1
 8006360:	d119      	bne.n	8006396 <HAL_SPI_TransmitReceive+0x2b6>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006366:	b29b      	uxth	r3, r3
 8006368:	2b00      	cmp	r3, #0
 800636a:	d014      	beq.n	8006396 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68da      	ldr	r2, [r3, #12]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006376:	b2d2      	uxtb	r2, r2
 8006378:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637e:	1c5a      	adds	r2, r3, #1
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006388:	b29b      	uxth	r3, r3
 800638a:	3b01      	subs	r3, #1
 800638c:	b29a      	uxth	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006392:	2301      	movs	r3, #1
 8006394:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006396:	f7fc fae9 	bl	800296c <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d803      	bhi.n	80063ae <HAL_SPI_TransmitReceive+0x2ce>
 80063a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063ac:	d102      	bne.n	80063b4 <HAL_SPI_TransmitReceive+0x2d4>
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d107      	bne.n	80063c4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80063c2:	e033      	b.n	800642c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d19e      	bne.n	800630c <HAL_SPI_TransmitReceive+0x22c>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d199      	bne.n	800630c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 fa65 	bl	80068ac <SPI_EndRxTxTransaction>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d006      	beq.n	80063f6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2220      	movs	r2, #32
 80063f2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80063f4:	e01a      	b.n	800642c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10a      	bne.n	8006414 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063fe:	2300      	movs	r3, #0
 8006400:	617b      	str	r3, [r7, #20]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	617b      	str	r3, [r7, #20]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	617b      	str	r3, [r7, #20]
 8006412:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006422:	e003      	b.n	800642c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006434:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006438:	4618      	mov	r0, r3
 800643a:	3730      	adds	r7, #48	; 0x30
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	4613      	mov	r3, r2
 800644c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006458:	2b01      	cmp	r3, #1
 800645a:	d101      	bne.n	8006460 <HAL_SPI_Transmit_DMA+0x20>
 800645c:	2302      	movs	r3, #2
 800645e:	e097      	b.n	8006590 <HAL_SPI_Transmit_DMA+0x150>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b01      	cmp	r3, #1
 8006472:	d002      	beq.n	800647a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006474:	2302      	movs	r3, #2
 8006476:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006478:	e085      	b.n	8006586 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <HAL_SPI_Transmit_DMA+0x46>
 8006480:	88fb      	ldrh	r3, [r7, #6]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d102      	bne.n	800648c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	75fb      	strb	r3, [r7, #23]
    goto error;
 800648a:	e07c      	b.n	8006586 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2203      	movs	r2, #3
 8006490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	88fa      	ldrh	r2, [r7, #6]
 80064a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	88fa      	ldrh	r2, [r7, #6]
 80064aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064d2:	d10f      	bne.n	80064f4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064f8:	4a27      	ldr	r2, [pc, #156]	; (8006598 <HAL_SPI_Transmit_DMA+0x158>)
 80064fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006500:	4a26      	ldr	r2, [pc, #152]	; (800659c <HAL_SPI_Transmit_DMA+0x15c>)
 8006502:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006508:	4a25      	ldr	r2, [pc, #148]	; (80065a0 <HAL_SPI_Transmit_DMA+0x160>)
 800650a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006510:	2200      	movs	r2, #0
 8006512:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651c:	4619      	mov	r1, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	330c      	adds	r3, #12
 8006524:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800652a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800652c:	f7fc fc0e 	bl	8002d4c <HAL_DMA_Start_IT>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d008      	beq.n	8006548 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653a:	f043 0210 	orr.w	r2, r3, #16
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	75fb      	strb	r3, [r7, #23]

    goto error;
 8006546:	e01e      	b.n	8006586 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006552:	2b40      	cmp	r3, #64	; 0x40
 8006554:	d007      	beq.n	8006566 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006564:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f042 0220 	orr.w	r2, r2, #32
 8006574:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f042 0202 	orr.w	r2, r2, #2
 8006584:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800658e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	08006675 	.word	0x08006675
 800659c:	080065cd 	.word	0x080065cd
 80065a0:	08006691 	.word	0x08006691

080065a4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065da:	f7fc f9c7 	bl	800296c <HAL_GetTick>
 80065de:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065ee:	d03b      	beq.n	8006668 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0220 	bic.w	r2, r2, #32
 80065fe:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0202 	bic.w	r2, r2, #2
 800660e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	2164      	movs	r1, #100	; 0x64
 8006614:	6978      	ldr	r0, [r7, #20]
 8006616:	f000 f949 	bl	80068ac <SPI_EndRxTxTransaction>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d005      	beq.n	800662c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006624:	f043 0220 	orr.w	r2, r3, #32
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10a      	bne.n	800664a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006634:	2300      	movs	r3, #0
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	2200      	movs	r2, #0
 800664e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006660:	6978      	ldr	r0, [r7, #20]
 8006662:	f7ff ffa9 	bl	80065b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006666:	e002      	b.n	800666e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006668:	6978      	ldr	r0, [r7, #20]
 800666a:	f7fc f849 	bl	8002700 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800666e:	3718      	adds	r7, #24
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006680:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f7ff ff8e 	bl	80065a4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006688:	bf00      	nop
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0203 	bic.w	r2, r2, #3
 80066ac:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b2:	f043 0210 	orr.w	r2, r3, #16
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f7ff ff78 	bl	80065b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066c8:	bf00      	nop
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	603b      	str	r3, [r7, #0]
 80066dc:	4613      	mov	r3, r2
 80066de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066e0:	f7fc f944 	bl	800296c <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e8:	1a9b      	subs	r3, r3, r2
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	4413      	add	r3, r2
 80066ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066f0:	f7fc f93c 	bl	800296c <HAL_GetTick>
 80066f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066f6:	4b39      	ldr	r3, [pc, #228]	; (80067dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	015b      	lsls	r3, r3, #5
 80066fc:	0d1b      	lsrs	r3, r3, #20
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	fb02 f303 	mul.w	r3, r2, r3
 8006704:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006706:	e054      	b.n	80067b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800670e:	d050      	beq.n	80067b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006710:	f7fc f92c 	bl	800296c <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	69fa      	ldr	r2, [r7, #28]
 800671c:	429a      	cmp	r2, r3
 800671e:	d902      	bls.n	8006726 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d13d      	bne.n	80067a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006734:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800673e:	d111      	bne.n	8006764 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006748:	d004      	beq.n	8006754 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006752:	d107      	bne.n	8006764 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006762:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800676c:	d10f      	bne.n	800678e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800678c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e017      	b.n	80067d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	3b01      	subs	r3, #1
 80067b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689a      	ldr	r2, [r3, #8]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	4013      	ands	r3, r2
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	429a      	cmp	r2, r3
 80067c0:	bf0c      	ite	eq
 80067c2:	2301      	moveq	r3, #1
 80067c4:	2300      	movne	r3, #0
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	461a      	mov	r2, r3
 80067ca:	79fb      	ldrb	r3, [r7, #7]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d19b      	bne.n	8006708 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3720      	adds	r7, #32
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	2000001c 	.word	0x2000001c

080067e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af02      	add	r7, sp, #8
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067f4:	d111      	bne.n	800681a <SPI_EndRxTransaction+0x3a>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067fe:	d004      	beq.n	800680a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006808:	d107      	bne.n	800681a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006818:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006822:	d12a      	bne.n	800687a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800682c:	d012      	beq.n	8006854 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2200      	movs	r2, #0
 8006836:	2180      	movs	r1, #128	; 0x80
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f7ff ff49 	bl	80066d0 <SPI_WaitFlagStateUntilTimeout>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d02d      	beq.n	80068a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006848:	f043 0220 	orr.w	r2, r3, #32
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e026      	b.n	80068a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2200      	movs	r2, #0
 800685c:	2101      	movs	r1, #1
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f7ff ff36 	bl	80066d0 <SPI_WaitFlagStateUntilTimeout>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d01a      	beq.n	80068a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686e:	f043 0220 	orr.w	r2, r3, #32
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e013      	b.n	80068a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2200      	movs	r2, #0
 8006882:	2101      	movs	r1, #1
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f7ff ff23 	bl	80066d0 <SPI_WaitFlagStateUntilTimeout>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d007      	beq.n	80068a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006894:	f043 0220 	orr.w	r2, r3, #32
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e000      	b.n	80068a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
	...

080068ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b088      	sub	sp, #32
 80068b0:	af02      	add	r7, sp, #8
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2201      	movs	r2, #1
 80068c0:	2102      	movs	r1, #2
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f7ff ff04 	bl	80066d0 <SPI_WaitFlagStateUntilTimeout>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d007      	beq.n	80068de <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d2:	f043 0220 	orr.w	r2, r3, #32
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e032      	b.n	8006944 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80068de:	4b1b      	ldr	r3, [pc, #108]	; (800694c <SPI_EndRxTxTransaction+0xa0>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a1b      	ldr	r2, [pc, #108]	; (8006950 <SPI_EndRxTxTransaction+0xa4>)
 80068e4:	fba2 2303 	umull	r2, r3, r2, r3
 80068e8:	0d5b      	lsrs	r3, r3, #21
 80068ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80068ee:	fb02 f303 	mul.w	r3, r2, r3
 80068f2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068fc:	d112      	bne.n	8006924 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2200      	movs	r2, #0
 8006906:	2180      	movs	r1, #128	; 0x80
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f7ff fee1 	bl	80066d0 <SPI_WaitFlagStateUntilTimeout>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d016      	beq.n	8006942 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006918:	f043 0220 	orr.w	r2, r3, #32
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e00f      	b.n	8006944 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00a      	beq.n	8006940 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	3b01      	subs	r3, #1
 800692e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693a:	2b80      	cmp	r3, #128	; 0x80
 800693c:	d0f2      	beq.n	8006924 <SPI_EndRxTxTransaction+0x78>
 800693e:	e000      	b.n	8006942 <SPI_EndRxTxTransaction+0x96>
        break;
 8006940:	bf00      	nop
  }

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	2000001c 	.word	0x2000001c
 8006950:	165e9f81 	.word	0x165e9f81

08006954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e041      	b.n	80069ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d106      	bne.n	8006980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7fb fdf2 	bl	8002564 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3304      	adds	r3, #4
 8006990:	4619      	mov	r1, r3
 8006992:	4610      	mov	r0, r2
 8006994:	f000 f9c0 	bl	8006d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
	...

080069f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d001      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e04e      	b.n	8006aaa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68da      	ldr	r2, [r3, #12]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0201 	orr.w	r2, r2, #1
 8006a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a23      	ldr	r2, [pc, #140]	; (8006ab8 <HAL_TIM_Base_Start_IT+0xc4>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d022      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x80>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a36:	d01d      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x80>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a1f      	ldr	r2, [pc, #124]	; (8006abc <HAL_TIM_Base_Start_IT+0xc8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d018      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x80>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a1e      	ldr	r2, [pc, #120]	; (8006ac0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d013      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x80>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a1c      	ldr	r2, [pc, #112]	; (8006ac4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00e      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x80>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a1b      	ldr	r2, [pc, #108]	; (8006ac8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d009      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x80>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a19      	ldr	r2, [pc, #100]	; (8006acc <HAL_TIM_Base_Start_IT+0xd8>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d004      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x80>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a18      	ldr	r2, [pc, #96]	; (8006ad0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d111      	bne.n	8006a98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 0307 	and.w	r3, r3, #7
 8006a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2b06      	cmp	r3, #6
 8006a84:	d010      	beq.n	8006aa8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f042 0201 	orr.w	r2, r2, #1
 8006a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a96:	e007      	b.n	8006aa8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f042 0201 	orr.w	r2, r2, #1
 8006aa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	40010000 	.word	0x40010000
 8006abc:	40000400 	.word	0x40000400
 8006ac0:	40000800 	.word	0x40000800
 8006ac4:	40000c00 	.word	0x40000c00
 8006ac8:	40010400 	.word	0x40010400
 8006acc:	40014000 	.word	0x40014000
 8006ad0:	40001800 	.word	0x40001800

08006ad4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d020      	beq.n	8006b38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f003 0302 	and.w	r3, r3, #2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d01b      	beq.n	8006b38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f06f 0202 	mvn.w	r2, #2
 8006b08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	f003 0303 	and.w	r3, r3, #3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f8dc 	bl	8006cdc <HAL_TIM_IC_CaptureCallback>
 8006b24:	e005      	b.n	8006b32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f8ce 	bl	8006cc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f8df 	bl	8006cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f003 0304 	and.w	r3, r3, #4
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d020      	beq.n	8006b84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d01b      	beq.n	8006b84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f06f 0204 	mvn.w	r2, #4
 8006b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2202      	movs	r2, #2
 8006b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f8b6 	bl	8006cdc <HAL_TIM_IC_CaptureCallback>
 8006b70:	e005      	b.n	8006b7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f8a8 	bl	8006cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f8b9 	bl	8006cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f003 0308 	and.w	r3, r3, #8
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d020      	beq.n	8006bd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f003 0308 	and.w	r3, r3, #8
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d01b      	beq.n	8006bd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f06f 0208 	mvn.w	r2, #8
 8006ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2204      	movs	r2, #4
 8006ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	f003 0303 	and.w	r3, r3, #3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f890 	bl	8006cdc <HAL_TIM_IC_CaptureCallback>
 8006bbc:	e005      	b.n	8006bca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f882 	bl	8006cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f893 	bl	8006cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f003 0310 	and.w	r3, r3, #16
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d020      	beq.n	8006c1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f003 0310 	and.w	r3, r3, #16
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d01b      	beq.n	8006c1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f06f 0210 	mvn.w	r2, #16
 8006bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2208      	movs	r2, #8
 8006bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f86a 	bl	8006cdc <HAL_TIM_IC_CaptureCallback>
 8006c08:	e005      	b.n	8006c16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f85c 	bl	8006cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f86d 	bl	8006cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00c      	beq.n	8006c40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d007      	beq.n	8006c40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f06f 0201 	mvn.w	r2, #1
 8006c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f83a 	bl	8006cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00c      	beq.n	8006c64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d007      	beq.n	8006c64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f98c 	bl	8006f7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00c      	beq.n	8006c88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d007      	beq.n	8006c88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f83e 	bl	8006d04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	f003 0320 	and.w	r3, r3, #32
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00c      	beq.n	8006cac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f003 0320 	and.w	r3, r3, #32
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d007      	beq.n	8006cac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f06f 0220 	mvn.w	r2, #32
 8006ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f95e 	bl	8006f68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cac:	bf00      	nop
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a46      	ldr	r2, [pc, #280]	; (8006e44 <TIM_Base_SetConfig+0x12c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d013      	beq.n	8006d58 <TIM_Base_SetConfig+0x40>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d36:	d00f      	beq.n	8006d58 <TIM_Base_SetConfig+0x40>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a43      	ldr	r2, [pc, #268]	; (8006e48 <TIM_Base_SetConfig+0x130>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d00b      	beq.n	8006d58 <TIM_Base_SetConfig+0x40>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a42      	ldr	r2, [pc, #264]	; (8006e4c <TIM_Base_SetConfig+0x134>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d007      	beq.n	8006d58 <TIM_Base_SetConfig+0x40>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a41      	ldr	r2, [pc, #260]	; (8006e50 <TIM_Base_SetConfig+0x138>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d003      	beq.n	8006d58 <TIM_Base_SetConfig+0x40>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a40      	ldr	r2, [pc, #256]	; (8006e54 <TIM_Base_SetConfig+0x13c>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d108      	bne.n	8006d6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a35      	ldr	r2, [pc, #212]	; (8006e44 <TIM_Base_SetConfig+0x12c>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d02b      	beq.n	8006dca <TIM_Base_SetConfig+0xb2>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d78:	d027      	beq.n	8006dca <TIM_Base_SetConfig+0xb2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a32      	ldr	r2, [pc, #200]	; (8006e48 <TIM_Base_SetConfig+0x130>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d023      	beq.n	8006dca <TIM_Base_SetConfig+0xb2>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a31      	ldr	r2, [pc, #196]	; (8006e4c <TIM_Base_SetConfig+0x134>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d01f      	beq.n	8006dca <TIM_Base_SetConfig+0xb2>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a30      	ldr	r2, [pc, #192]	; (8006e50 <TIM_Base_SetConfig+0x138>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d01b      	beq.n	8006dca <TIM_Base_SetConfig+0xb2>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a2f      	ldr	r2, [pc, #188]	; (8006e54 <TIM_Base_SetConfig+0x13c>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d017      	beq.n	8006dca <TIM_Base_SetConfig+0xb2>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a2e      	ldr	r2, [pc, #184]	; (8006e58 <TIM_Base_SetConfig+0x140>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d013      	beq.n	8006dca <TIM_Base_SetConfig+0xb2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a2d      	ldr	r2, [pc, #180]	; (8006e5c <TIM_Base_SetConfig+0x144>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d00f      	beq.n	8006dca <TIM_Base_SetConfig+0xb2>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a2c      	ldr	r2, [pc, #176]	; (8006e60 <TIM_Base_SetConfig+0x148>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d00b      	beq.n	8006dca <TIM_Base_SetConfig+0xb2>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a2b      	ldr	r2, [pc, #172]	; (8006e64 <TIM_Base_SetConfig+0x14c>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d007      	beq.n	8006dca <TIM_Base_SetConfig+0xb2>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a2a      	ldr	r2, [pc, #168]	; (8006e68 <TIM_Base_SetConfig+0x150>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d003      	beq.n	8006dca <TIM_Base_SetConfig+0xb2>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a29      	ldr	r2, [pc, #164]	; (8006e6c <TIM_Base_SetConfig+0x154>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d108      	bne.n	8006ddc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a10      	ldr	r2, [pc, #64]	; (8006e44 <TIM_Base_SetConfig+0x12c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d003      	beq.n	8006e10 <TIM_Base_SetConfig+0xf8>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a12      	ldr	r2, [pc, #72]	; (8006e54 <TIM_Base_SetConfig+0x13c>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d103      	bne.n	8006e18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	691a      	ldr	r2, [r3, #16]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d105      	bne.n	8006e36 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	f023 0201 	bic.w	r2, r3, #1
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	611a      	str	r2, [r3, #16]
  }
}
 8006e36:	bf00      	nop
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	40010000 	.word	0x40010000
 8006e48:	40000400 	.word	0x40000400
 8006e4c:	40000800 	.word	0x40000800
 8006e50:	40000c00 	.word	0x40000c00
 8006e54:	40010400 	.word	0x40010400
 8006e58:	40014000 	.word	0x40014000
 8006e5c:	40014400 	.word	0x40014400
 8006e60:	40014800 	.word	0x40014800
 8006e64:	40001800 	.word	0x40001800
 8006e68:	40001c00 	.word	0x40001c00
 8006e6c:	40002000 	.word	0x40002000

08006e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d101      	bne.n	8006e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e84:	2302      	movs	r3, #2
 8006e86:	e05a      	b.n	8006f3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a21      	ldr	r2, [pc, #132]	; (8006f4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d022      	beq.n	8006f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed4:	d01d      	beq.n	8006f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a1d      	ldr	r2, [pc, #116]	; (8006f50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d018      	beq.n	8006f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a1b      	ldr	r2, [pc, #108]	; (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d013      	beq.n	8006f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a1a      	ldr	r2, [pc, #104]	; (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d00e      	beq.n	8006f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a18      	ldr	r2, [pc, #96]	; (8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d009      	beq.n	8006f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a17      	ldr	r2, [pc, #92]	; (8006f60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d004      	beq.n	8006f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a15      	ldr	r2, [pc, #84]	; (8006f64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d10c      	bne.n	8006f2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	40010000 	.word	0x40010000
 8006f50:	40000400 	.word	0x40000400
 8006f54:	40000800 	.word	0x40000800
 8006f58:	40000c00 	.word	0x40000c00
 8006f5c:	40010400 	.word	0x40010400
 8006f60:	40014000 	.word	0x40014000
 8006f64:	40001800 	.word	0x40001800

08006f68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e042      	b.n	8007028 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d106      	bne.n	8006fbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7fb fafc 	bl	80025b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2224      	movs	r2, #36	; 0x24
 8006fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68da      	ldr	r2, [r3, #12]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fdbd 	bl	8007b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	691a      	ldr	r2, [r3, #16]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fe8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	695a      	ldr	r2, [r3, #20]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ff8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68da      	ldr	r2, [r3, #12]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007008:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2220      	movs	r2, #32
 8007014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2220      	movs	r2, #32
 800701c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3708      	adds	r7, #8
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b08a      	sub	sp, #40	; 0x28
 8007034:	af02      	add	r7, sp, #8
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	603b      	str	r3, [r7, #0]
 800703c:	4613      	mov	r3, r2
 800703e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007040:	2300      	movs	r3, #0
 8007042:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b20      	cmp	r3, #32
 800704e:	d175      	bne.n	800713c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <HAL_UART_Transmit+0x2c>
 8007056:	88fb      	ldrh	r3, [r7, #6]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d101      	bne.n	8007060 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e06e      	b.n	800713e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2221      	movs	r2, #33	; 0x21
 800706a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800706e:	f7fb fc7d 	bl	800296c <HAL_GetTick>
 8007072:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	88fa      	ldrh	r2, [r7, #6]
 8007078:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	88fa      	ldrh	r2, [r7, #6]
 800707e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007088:	d108      	bne.n	800709c <HAL_UART_Transmit+0x6c>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d104      	bne.n	800709c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007092:	2300      	movs	r3, #0
 8007094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	61bb      	str	r3, [r7, #24]
 800709a:	e003      	b.n	80070a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070a0:	2300      	movs	r3, #0
 80070a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070a4:	e02e      	b.n	8007104 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	2200      	movs	r2, #0
 80070ae:	2180      	movs	r1, #128	; 0x80
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f000 fb1f 	bl	80076f4 <UART_WaitOnFlagUntilTimeout>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d005      	beq.n	80070c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2220      	movs	r2, #32
 80070c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e03a      	b.n	800713e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10b      	bne.n	80070e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	3302      	adds	r3, #2
 80070e2:	61bb      	str	r3, [r7, #24]
 80070e4:	e007      	b.n	80070f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	781a      	ldrb	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	3301      	adds	r3, #1
 80070f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	3b01      	subs	r3, #1
 80070fe:	b29a      	uxth	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007108:	b29b      	uxth	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1cb      	bne.n	80070a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	2200      	movs	r2, #0
 8007116:	2140      	movs	r1, #64	; 0x40
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f000 faeb 	bl	80076f4 <UART_WaitOnFlagUntilTimeout>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d005      	beq.n	8007130 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2220      	movs	r2, #32
 8007128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e006      	b.n	800713e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2220      	movs	r2, #32
 8007134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	e000      	b.n	800713e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800713c:	2302      	movs	r3, #2
  }
}
 800713e:	4618      	mov	r0, r3
 8007140:	3720      	adds	r7, #32
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b084      	sub	sp, #16
 800714a:	af00      	add	r7, sp, #0
 800714c:	60f8      	str	r0, [r7, #12]
 800714e:	60b9      	str	r1, [r7, #8]
 8007150:	4613      	mov	r3, r2
 8007152:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b20      	cmp	r3, #32
 800715e:	d112      	bne.n	8007186 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d002      	beq.n	800716c <HAL_UART_Receive_IT+0x26>
 8007166:	88fb      	ldrh	r3, [r7, #6]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e00b      	b.n	8007188 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007176:	88fb      	ldrh	r3, [r7, #6]
 8007178:	461a      	mov	r2, r3
 800717a:	68b9      	ldr	r1, [r7, #8]
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f000 fb12 	bl	80077a6 <UART_Start_Receive_IT>
 8007182:	4603      	mov	r3, r0
 8007184:	e000      	b.n	8007188 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007186:	2302      	movs	r3, #2
  }
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b0ba      	sub	sp, #232	; 0xe8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80071bc:	2300      	movs	r3, #0
 80071be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c6:	f003 030f 	and.w	r3, r3, #15
 80071ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80071ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10f      	bne.n	80071f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d009      	beq.n	80071f6 <HAL_UART_IRQHandler+0x66>
 80071e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071e6:	f003 0320 	and.w	r3, r3, #32
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fbf2 	bl	80079d8 <UART_Receive_IT>
      return;
 80071f4:	e25b      	b.n	80076ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80071f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 80de 	beq.w	80073bc <HAL_UART_IRQHandler+0x22c>
 8007200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007204:	f003 0301 	and.w	r3, r3, #1
 8007208:	2b00      	cmp	r3, #0
 800720a:	d106      	bne.n	800721a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800720c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007210:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007214:	2b00      	cmp	r3, #0
 8007216:	f000 80d1 	beq.w	80073bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800721a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00b      	beq.n	800723e <HAL_UART_IRQHandler+0xae>
 8007226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800722a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800722e:	2b00      	cmp	r3, #0
 8007230:	d005      	beq.n	800723e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007236:	f043 0201 	orr.w	r2, r3, #1
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800723e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007242:	f003 0304 	and.w	r3, r3, #4
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00b      	beq.n	8007262 <HAL_UART_IRQHandler+0xd2>
 800724a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b00      	cmp	r3, #0
 8007254:	d005      	beq.n	8007262 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800725a:	f043 0202 	orr.w	r2, r3, #2
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007266:	f003 0302 	and.w	r3, r3, #2
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00b      	beq.n	8007286 <HAL_UART_IRQHandler+0xf6>
 800726e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	2b00      	cmp	r3, #0
 8007278:	d005      	beq.n	8007286 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727e:	f043 0204 	orr.w	r2, r3, #4
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800728a:	f003 0308 	and.w	r3, r3, #8
 800728e:	2b00      	cmp	r3, #0
 8007290:	d011      	beq.n	80072b6 <HAL_UART_IRQHandler+0x126>
 8007292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007296:	f003 0320 	and.w	r3, r3, #32
 800729a:	2b00      	cmp	r3, #0
 800729c:	d105      	bne.n	80072aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800729e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d005      	beq.n	80072b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ae:	f043 0208 	orr.w	r2, r3, #8
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f000 81f2 	beq.w	80076a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072c4:	f003 0320 	and.w	r3, r3, #32
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d008      	beq.n	80072de <HAL_UART_IRQHandler+0x14e>
 80072cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072d0:	f003 0320 	and.w	r3, r3, #32
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d002      	beq.n	80072de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fb7d 	bl	80079d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e8:	2b40      	cmp	r3, #64	; 0x40
 80072ea:	bf0c      	ite	eq
 80072ec:	2301      	moveq	r3, #1
 80072ee:	2300      	movne	r3, #0
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072fa:	f003 0308 	and.w	r3, r3, #8
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d103      	bne.n	800730a <HAL_UART_IRQHandler+0x17a>
 8007302:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007306:	2b00      	cmp	r3, #0
 8007308:	d04f      	beq.n	80073aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fa85 	bl	800781a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731a:	2b40      	cmp	r3, #64	; 0x40
 800731c:	d141      	bne.n	80073a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3314      	adds	r3, #20
 8007324:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007328:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800732c:	e853 3f00 	ldrex	r3, [r3]
 8007330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007334:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800733c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	3314      	adds	r3, #20
 8007346:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800734a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800734e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007352:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007356:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800735a:	e841 2300 	strex	r3, r2, [r1]
 800735e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007362:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1d9      	bne.n	800731e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800736e:	2b00      	cmp	r3, #0
 8007370:	d013      	beq.n	800739a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007376:	4a7e      	ldr	r2, [pc, #504]	; (8007570 <HAL_UART_IRQHandler+0x3e0>)
 8007378:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800737e:	4618      	mov	r0, r3
 8007380:	f7fb fdac 	bl	8002edc <HAL_DMA_Abort_IT>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d016      	beq.n	80073b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800738e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007394:	4610      	mov	r0, r2
 8007396:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007398:	e00e      	b.n	80073b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f994 	bl	80076c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073a0:	e00a      	b.n	80073b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f990 	bl	80076c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073a8:	e006      	b.n	80073b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f98c 	bl	80076c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80073b6:	e175      	b.n	80076a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b8:	bf00      	nop
    return;
 80073ba:	e173      	b.n	80076a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	f040 814f 	bne.w	8007664 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80073c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ca:	f003 0310 	and.w	r3, r3, #16
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 8148 	beq.w	8007664 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80073d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073d8:	f003 0310 	and.w	r3, r3, #16
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 8141 	beq.w	8007664 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073e2:	2300      	movs	r3, #0
 80073e4:	60bb      	str	r3, [r7, #8]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	60bb      	str	r3, [r7, #8]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	60bb      	str	r3, [r7, #8]
 80073f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007402:	2b40      	cmp	r3, #64	; 0x40
 8007404:	f040 80b6 	bne.w	8007574 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007414:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 8145 	beq.w	80076a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007422:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007426:	429a      	cmp	r2, r3
 8007428:	f080 813e 	bcs.w	80076a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007432:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800743e:	f000 8088 	beq.w	8007552 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	330c      	adds	r3, #12
 8007448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007450:	e853 3f00 	ldrex	r3, [r3]
 8007454:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007458:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800745c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007460:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	330c      	adds	r3, #12
 800746a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800746e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007472:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007476:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800747a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007486:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1d9      	bne.n	8007442 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3314      	adds	r3, #20
 8007494:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007498:	e853 3f00 	ldrex	r3, [r3]
 800749c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800749e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074a0:	f023 0301 	bic.w	r3, r3, #1
 80074a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	3314      	adds	r3, #20
 80074ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80074b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80074ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074be:	e841 2300 	strex	r3, r2, [r1]
 80074c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1e1      	bne.n	800748e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	3314      	adds	r3, #20
 80074d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074d4:	e853 3f00 	ldrex	r3, [r3]
 80074d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80074da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	3314      	adds	r3, #20
 80074ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80074ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80074f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80074f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80074f6:	e841 2300 	strex	r3, r2, [r1]
 80074fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80074fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1e3      	bne.n	80074ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2220      	movs	r2, #32
 8007506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	330c      	adds	r3, #12
 8007516:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800751a:	e853 3f00 	ldrex	r3, [r3]
 800751e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007522:	f023 0310 	bic.w	r3, r3, #16
 8007526:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	330c      	adds	r3, #12
 8007530:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007534:	65ba      	str	r2, [r7, #88]	; 0x58
 8007536:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007538:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800753a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800753c:	e841 2300 	strex	r3, r2, [r1]
 8007540:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1e3      	bne.n	8007510 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754c:	4618      	mov	r0, r3
 800754e:	f7fb fc55 	bl	8002dfc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2202      	movs	r2, #2
 8007556:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007560:	b29b      	uxth	r3, r3
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	b29b      	uxth	r3, r3
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f8b7 	bl	80076dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800756e:	e09b      	b.n	80076a8 <HAL_UART_IRQHandler+0x518>
 8007570:	080078e1 	.word	0x080078e1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800757c:	b29b      	uxth	r3, r3
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007588:	b29b      	uxth	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 808e 	beq.w	80076ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007590:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007594:	2b00      	cmp	r3, #0
 8007596:	f000 8089 	beq.w	80076ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	330c      	adds	r3, #12
 80075a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a4:	e853 3f00 	ldrex	r3, [r3]
 80075a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	330c      	adds	r3, #12
 80075ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80075be:	647a      	str	r2, [r7, #68]	; 0x44
 80075c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1e3      	bne.n	800759a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	3314      	adds	r3, #20
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	e853 3f00 	ldrex	r3, [r3]
 80075e0:	623b      	str	r3, [r7, #32]
   return(result);
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	f023 0301 	bic.w	r3, r3, #1
 80075e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	3314      	adds	r3, #20
 80075f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80075f6:	633a      	str	r2, [r7, #48]	; 0x30
 80075f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075fe:	e841 2300 	strex	r3, r2, [r1]
 8007602:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1e3      	bne.n	80075d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2220      	movs	r2, #32
 800760e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	330c      	adds	r3, #12
 800761e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	e853 3f00 	ldrex	r3, [r3]
 8007626:	60fb      	str	r3, [r7, #12]
   return(result);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f023 0310 	bic.w	r3, r3, #16
 800762e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	330c      	adds	r3, #12
 8007638:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800763c:	61fa      	str	r2, [r7, #28]
 800763e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	69b9      	ldr	r1, [r7, #24]
 8007642:	69fa      	ldr	r2, [r7, #28]
 8007644:	e841 2300 	strex	r3, r2, [r1]
 8007648:	617b      	str	r3, [r7, #20]
   return(result);
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1e3      	bne.n	8007618 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2202      	movs	r2, #2
 8007654:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007656:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f83d 	bl	80076dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007662:	e023      	b.n	80076ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800766c:	2b00      	cmp	r3, #0
 800766e:	d009      	beq.n	8007684 <HAL_UART_IRQHandler+0x4f4>
 8007670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007678:	2b00      	cmp	r3, #0
 800767a:	d003      	beq.n	8007684 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f943 	bl	8007908 <UART_Transmit_IT>
    return;
 8007682:	e014      	b.n	80076ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00e      	beq.n	80076ae <HAL_UART_IRQHandler+0x51e>
 8007690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007698:	2b00      	cmp	r3, #0
 800769a:	d008      	beq.n	80076ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f983 	bl	80079a8 <UART_EndTransmit_IT>
    return;
 80076a2:	e004      	b.n	80076ae <HAL_UART_IRQHandler+0x51e>
    return;
 80076a4:	bf00      	nop
 80076a6:	e002      	b.n	80076ae <HAL_UART_IRQHandler+0x51e>
      return;
 80076a8:	bf00      	nop
 80076aa:	e000      	b.n	80076ae <HAL_UART_IRQHandler+0x51e>
      return;
 80076ac:	bf00      	nop
  }
}
 80076ae:	37e8      	adds	r7, #232	; 0xe8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	460b      	mov	r3, r1
 80076e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	603b      	str	r3, [r7, #0]
 8007700:	4613      	mov	r3, r2
 8007702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007704:	e03b      	b.n	800777e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800770c:	d037      	beq.n	800777e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800770e:	f7fb f92d 	bl	800296c <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	6a3a      	ldr	r2, [r7, #32]
 800771a:	429a      	cmp	r2, r3
 800771c:	d302      	bcc.n	8007724 <UART_WaitOnFlagUntilTimeout+0x30>
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d101      	bne.n	8007728 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e03a      	b.n	800779e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	f003 0304 	and.w	r3, r3, #4
 8007732:	2b00      	cmp	r3, #0
 8007734:	d023      	beq.n	800777e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2b80      	cmp	r3, #128	; 0x80
 800773a:	d020      	beq.n	800777e <UART_WaitOnFlagUntilTimeout+0x8a>
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	2b40      	cmp	r3, #64	; 0x40
 8007740:	d01d      	beq.n	800777e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0308 	and.w	r3, r3, #8
 800774c:	2b08      	cmp	r3, #8
 800774e:	d116      	bne.n	800777e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007750:	2300      	movs	r3, #0
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	617b      	str	r3, [r7, #20]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	617b      	str	r3, [r7, #20]
 8007764:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 f857 	bl	800781a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2208      	movs	r2, #8
 8007770:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e00f      	b.n	800779e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	4013      	ands	r3, r2
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	429a      	cmp	r2, r3
 800778c:	bf0c      	ite	eq
 800778e:	2301      	moveq	r3, #1
 8007790:	2300      	movne	r3, #0
 8007792:	b2db      	uxtb	r3, r3
 8007794:	461a      	mov	r2, r3
 8007796:	79fb      	ldrb	r3, [r7, #7]
 8007798:	429a      	cmp	r2, r3
 800779a:	d0b4      	beq.n	8007706 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3718      	adds	r7, #24
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b085      	sub	sp, #20
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	60f8      	str	r0, [r7, #12]
 80077ae:	60b9      	str	r1, [r7, #8]
 80077b0:	4613      	mov	r3, r2
 80077b2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	88fa      	ldrh	r2, [r7, #6]
 80077be:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	88fa      	ldrh	r2, [r7, #6]
 80077c4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2222      	movs	r2, #34	; 0x22
 80077d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d007      	beq.n	80077ec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68da      	ldr	r2, [r3, #12]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077ea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	695a      	ldr	r2, [r3, #20]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f042 0201 	orr.w	r2, r2, #1
 80077fa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68da      	ldr	r2, [r3, #12]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f042 0220 	orr.w	r2, r2, #32
 800780a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800781a:	b480      	push	{r7}
 800781c:	b095      	sub	sp, #84	; 0x54
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	330c      	adds	r3, #12
 8007828:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800782c:	e853 3f00 	ldrex	r3, [r3]
 8007830:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007834:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007838:	64fb      	str	r3, [r7, #76]	; 0x4c
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	330c      	adds	r3, #12
 8007840:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007842:	643a      	str	r2, [r7, #64]	; 0x40
 8007844:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007846:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007848:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800784a:	e841 2300 	strex	r3, r2, [r1]
 800784e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1e5      	bne.n	8007822 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3314      	adds	r3, #20
 800785c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	e853 3f00 	ldrex	r3, [r3]
 8007864:	61fb      	str	r3, [r7, #28]
   return(result);
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	f023 0301 	bic.w	r3, r3, #1
 800786c:	64bb      	str	r3, [r7, #72]	; 0x48
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3314      	adds	r3, #20
 8007874:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007876:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007878:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800787c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800787e:	e841 2300 	strex	r3, r2, [r1]
 8007882:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1e5      	bne.n	8007856 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788e:	2b01      	cmp	r3, #1
 8007890:	d119      	bne.n	80078c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	330c      	adds	r3, #12
 8007898:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	e853 3f00 	ldrex	r3, [r3]
 80078a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	f023 0310 	bic.w	r3, r3, #16
 80078a8:	647b      	str	r3, [r7, #68]	; 0x44
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	330c      	adds	r3, #12
 80078b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078b2:	61ba      	str	r2, [r7, #24]
 80078b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b6:	6979      	ldr	r1, [r7, #20]
 80078b8:	69ba      	ldr	r2, [r7, #24]
 80078ba:	e841 2300 	strex	r3, r2, [r1]
 80078be:	613b      	str	r3, [r7, #16]
   return(result);
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1e5      	bne.n	8007892 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2220      	movs	r2, #32
 80078ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80078d4:	bf00      	nop
 80078d6:	3754      	adds	r7, #84	; 0x54
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f7ff fee4 	bl	80076c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007900:	bf00      	nop
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007916:	b2db      	uxtb	r3, r3
 8007918:	2b21      	cmp	r3, #33	; 0x21
 800791a:	d13e      	bne.n	800799a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007924:	d114      	bne.n	8007950 <UART_Transmit_IT+0x48>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d110      	bne.n	8007950 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	881b      	ldrh	r3, [r3, #0]
 8007938:	461a      	mov	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007942:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	1c9a      	adds	r2, r3, #2
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	621a      	str	r2, [r3, #32]
 800794e:	e008      	b.n	8007962 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	1c59      	adds	r1, r3, #1
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	6211      	str	r1, [r2, #32]
 800795a:	781a      	ldrb	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007966:	b29b      	uxth	r3, r3
 8007968:	3b01      	subs	r3, #1
 800796a:	b29b      	uxth	r3, r3
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	4619      	mov	r1, r3
 8007970:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10f      	bne.n	8007996 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68da      	ldr	r2, [r3, #12]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007984:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68da      	ldr	r2, [r3, #12]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007994:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	e000      	b.n	800799c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800799a:	2302      	movs	r3, #2
  }
}
 800799c:	4618      	mov	r0, r3
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68da      	ldr	r2, [r3, #12]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2220      	movs	r2, #32
 80079c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7ff fe73 	bl	80076b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b08c      	sub	sp, #48	; 0x30
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b22      	cmp	r3, #34	; 0x22
 80079ea:	f040 80ae 	bne.w	8007b4a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079f6:	d117      	bne.n	8007a28 <UART_Receive_IT+0x50>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d113      	bne.n	8007a28 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a00:	2300      	movs	r3, #0
 8007a02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a08:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a20:	1c9a      	adds	r2, r3, #2
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	629a      	str	r2, [r3, #40]	; 0x28
 8007a26:	e026      	b.n	8007a76 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a3a:	d007      	beq.n	8007a4c <UART_Receive_IT+0x74>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10a      	bne.n	8007a5a <UART_Receive_IT+0x82>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d106      	bne.n	8007a5a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	b2da      	uxtb	r2, r3
 8007a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a56:	701a      	strb	r2, [r3, #0]
 8007a58:	e008      	b.n	8007a6c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a70:	1c5a      	adds	r2, r3, #1
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	4619      	mov	r1, r3
 8007a84:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d15d      	bne.n	8007b46 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68da      	ldr	r2, [r3, #12]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f022 0220 	bic.w	r2, r2, #32
 8007a98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68da      	ldr	r2, [r3, #12]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007aa8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	695a      	ldr	r2, [r3, #20]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f022 0201 	bic.w	r2, r2, #1
 8007ab8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2220      	movs	r2, #32
 8007abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d135      	bne.n	8007b3c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	330c      	adds	r3, #12
 8007adc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	e853 3f00 	ldrex	r3, [r3]
 8007ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f023 0310 	bic.w	r3, r3, #16
 8007aec:	627b      	str	r3, [r7, #36]	; 0x24
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	330c      	adds	r3, #12
 8007af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007af6:	623a      	str	r2, [r7, #32]
 8007af8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afa:	69f9      	ldr	r1, [r7, #28]
 8007afc:	6a3a      	ldr	r2, [r7, #32]
 8007afe:	e841 2300 	strex	r3, r2, [r1]
 8007b02:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1e5      	bne.n	8007ad6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0310 	and.w	r3, r3, #16
 8007b14:	2b10      	cmp	r3, #16
 8007b16:	d10a      	bne.n	8007b2e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b18:	2300      	movs	r3, #0
 8007b1a:	60fb      	str	r3, [r7, #12]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	60fb      	str	r3, [r7, #12]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	60fb      	str	r3, [r7, #12]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b32:	4619      	mov	r1, r3
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f7ff fdd1 	bl	80076dc <HAL_UARTEx_RxEventCallback>
 8007b3a:	e002      	b.n	8007b42 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7fa fe23 	bl	8002788 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	e002      	b.n	8007b4c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	e000      	b.n	8007b4c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007b4a:	2302      	movs	r3, #2
  }
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3730      	adds	r7, #48	; 0x30
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b58:	b0c0      	sub	sp, #256	; 0x100
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b70:	68d9      	ldr	r1, [r3, #12]
 8007b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	ea40 0301 	orr.w	r3, r0, r1
 8007b7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b82:	689a      	ldr	r2, [r3, #8]
 8007b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	431a      	orrs	r2, r3
 8007b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007bac:	f021 010c 	bic.w	r1, r1, #12
 8007bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bba:	430b      	orrs	r3, r1
 8007bbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bce:	6999      	ldr	r1, [r3, #24]
 8007bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	ea40 0301 	orr.w	r3, r0, r1
 8007bda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	4b8f      	ldr	r3, [pc, #572]	; (8007e20 <UART_SetConfig+0x2cc>)
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d005      	beq.n	8007bf4 <UART_SetConfig+0xa0>
 8007be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	4b8d      	ldr	r3, [pc, #564]	; (8007e24 <UART_SetConfig+0x2d0>)
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d104      	bne.n	8007bfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007bf4:	f7fd fab0 	bl	8005158 <HAL_RCC_GetPCLK2Freq>
 8007bf8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007bfc:	e003      	b.n	8007c06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007bfe:	f7fd fa97 	bl	8005130 <HAL_RCC_GetPCLK1Freq>
 8007c02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c0a:	69db      	ldr	r3, [r3, #28]
 8007c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c10:	f040 810c 	bne.w	8007e2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007c22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007c26:	4622      	mov	r2, r4
 8007c28:	462b      	mov	r3, r5
 8007c2a:	1891      	adds	r1, r2, r2
 8007c2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c2e:	415b      	adcs	r3, r3
 8007c30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c36:	4621      	mov	r1, r4
 8007c38:	eb12 0801 	adds.w	r8, r2, r1
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	eb43 0901 	adc.w	r9, r3, r1
 8007c42:	f04f 0200 	mov.w	r2, #0
 8007c46:	f04f 0300 	mov.w	r3, #0
 8007c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c56:	4690      	mov	r8, r2
 8007c58:	4699      	mov	r9, r3
 8007c5a:	4623      	mov	r3, r4
 8007c5c:	eb18 0303 	adds.w	r3, r8, r3
 8007c60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c64:	462b      	mov	r3, r5
 8007c66:	eb49 0303 	adc.w	r3, r9, r3
 8007c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c7a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007c7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007c82:	460b      	mov	r3, r1
 8007c84:	18db      	adds	r3, r3, r3
 8007c86:	653b      	str	r3, [r7, #80]	; 0x50
 8007c88:	4613      	mov	r3, r2
 8007c8a:	eb42 0303 	adc.w	r3, r2, r3
 8007c8e:	657b      	str	r3, [r7, #84]	; 0x54
 8007c90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007c94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007c98:	f7f8 fab0 	bl	80001fc <__aeabi_uldivmod>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4b61      	ldr	r3, [pc, #388]	; (8007e28 <UART_SetConfig+0x2d4>)
 8007ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ca6:	095b      	lsrs	r3, r3, #5
 8007ca8:	011c      	lsls	r4, r3, #4
 8007caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cb4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007cb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007cbc:	4642      	mov	r2, r8
 8007cbe:	464b      	mov	r3, r9
 8007cc0:	1891      	adds	r1, r2, r2
 8007cc2:	64b9      	str	r1, [r7, #72]	; 0x48
 8007cc4:	415b      	adcs	r3, r3
 8007cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ccc:	4641      	mov	r1, r8
 8007cce:	eb12 0a01 	adds.w	sl, r2, r1
 8007cd2:	4649      	mov	r1, r9
 8007cd4:	eb43 0b01 	adc.w	fp, r3, r1
 8007cd8:	f04f 0200 	mov.w	r2, #0
 8007cdc:	f04f 0300 	mov.w	r3, #0
 8007ce0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ce4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ce8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cec:	4692      	mov	sl, r2
 8007cee:	469b      	mov	fp, r3
 8007cf0:	4643      	mov	r3, r8
 8007cf2:	eb1a 0303 	adds.w	r3, sl, r3
 8007cf6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007cfa:	464b      	mov	r3, r9
 8007cfc:	eb4b 0303 	adc.w	r3, fp, r3
 8007d00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007d14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	18db      	adds	r3, r3, r3
 8007d1c:	643b      	str	r3, [r7, #64]	; 0x40
 8007d1e:	4613      	mov	r3, r2
 8007d20:	eb42 0303 	adc.w	r3, r2, r3
 8007d24:	647b      	str	r3, [r7, #68]	; 0x44
 8007d26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007d2e:	f7f8 fa65 	bl	80001fc <__aeabi_uldivmod>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	4611      	mov	r1, r2
 8007d38:	4b3b      	ldr	r3, [pc, #236]	; (8007e28 <UART_SetConfig+0x2d4>)
 8007d3a:	fba3 2301 	umull	r2, r3, r3, r1
 8007d3e:	095b      	lsrs	r3, r3, #5
 8007d40:	2264      	movs	r2, #100	; 0x64
 8007d42:	fb02 f303 	mul.w	r3, r2, r3
 8007d46:	1acb      	subs	r3, r1, r3
 8007d48:	00db      	lsls	r3, r3, #3
 8007d4a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007d4e:	4b36      	ldr	r3, [pc, #216]	; (8007e28 <UART_SetConfig+0x2d4>)
 8007d50:	fba3 2302 	umull	r2, r3, r3, r2
 8007d54:	095b      	lsrs	r3, r3, #5
 8007d56:	005b      	lsls	r3, r3, #1
 8007d58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d5c:	441c      	add	r4, r3
 8007d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d62:	2200      	movs	r2, #0
 8007d64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007d6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007d70:	4642      	mov	r2, r8
 8007d72:	464b      	mov	r3, r9
 8007d74:	1891      	adds	r1, r2, r2
 8007d76:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d78:	415b      	adcs	r3, r3
 8007d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d80:	4641      	mov	r1, r8
 8007d82:	1851      	adds	r1, r2, r1
 8007d84:	6339      	str	r1, [r7, #48]	; 0x30
 8007d86:	4649      	mov	r1, r9
 8007d88:	414b      	adcs	r3, r1
 8007d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d8c:	f04f 0200 	mov.w	r2, #0
 8007d90:	f04f 0300 	mov.w	r3, #0
 8007d94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007d98:	4659      	mov	r1, fp
 8007d9a:	00cb      	lsls	r3, r1, #3
 8007d9c:	4651      	mov	r1, sl
 8007d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007da2:	4651      	mov	r1, sl
 8007da4:	00ca      	lsls	r2, r1, #3
 8007da6:	4610      	mov	r0, r2
 8007da8:	4619      	mov	r1, r3
 8007daa:	4603      	mov	r3, r0
 8007dac:	4642      	mov	r2, r8
 8007dae:	189b      	adds	r3, r3, r2
 8007db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007db4:	464b      	mov	r3, r9
 8007db6:	460a      	mov	r2, r1
 8007db8:	eb42 0303 	adc.w	r3, r2, r3
 8007dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007dcc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007dd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	18db      	adds	r3, r3, r3
 8007dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dda:	4613      	mov	r3, r2
 8007ddc:	eb42 0303 	adc.w	r3, r2, r3
 8007de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007de2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007de6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007dea:	f7f8 fa07 	bl	80001fc <__aeabi_uldivmod>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	4b0d      	ldr	r3, [pc, #52]	; (8007e28 <UART_SetConfig+0x2d4>)
 8007df4:	fba3 1302 	umull	r1, r3, r3, r2
 8007df8:	095b      	lsrs	r3, r3, #5
 8007dfa:	2164      	movs	r1, #100	; 0x64
 8007dfc:	fb01 f303 	mul.w	r3, r1, r3
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	00db      	lsls	r3, r3, #3
 8007e04:	3332      	adds	r3, #50	; 0x32
 8007e06:	4a08      	ldr	r2, [pc, #32]	; (8007e28 <UART_SetConfig+0x2d4>)
 8007e08:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0c:	095b      	lsrs	r3, r3, #5
 8007e0e:	f003 0207 	and.w	r2, r3, #7
 8007e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4422      	add	r2, r4
 8007e1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e1c:	e106      	b.n	800802c <UART_SetConfig+0x4d8>
 8007e1e:	bf00      	nop
 8007e20:	40011000 	.word	0x40011000
 8007e24:	40011400 	.word	0x40011400
 8007e28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e30:	2200      	movs	r2, #0
 8007e32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007e3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007e3e:	4642      	mov	r2, r8
 8007e40:	464b      	mov	r3, r9
 8007e42:	1891      	adds	r1, r2, r2
 8007e44:	6239      	str	r1, [r7, #32]
 8007e46:	415b      	adcs	r3, r3
 8007e48:	627b      	str	r3, [r7, #36]	; 0x24
 8007e4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e4e:	4641      	mov	r1, r8
 8007e50:	1854      	adds	r4, r2, r1
 8007e52:	4649      	mov	r1, r9
 8007e54:	eb43 0501 	adc.w	r5, r3, r1
 8007e58:	f04f 0200 	mov.w	r2, #0
 8007e5c:	f04f 0300 	mov.w	r3, #0
 8007e60:	00eb      	lsls	r3, r5, #3
 8007e62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e66:	00e2      	lsls	r2, r4, #3
 8007e68:	4614      	mov	r4, r2
 8007e6a:	461d      	mov	r5, r3
 8007e6c:	4643      	mov	r3, r8
 8007e6e:	18e3      	adds	r3, r4, r3
 8007e70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e74:	464b      	mov	r3, r9
 8007e76:	eb45 0303 	adc.w	r3, r5, r3
 8007e7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e8e:	f04f 0200 	mov.w	r2, #0
 8007e92:	f04f 0300 	mov.w	r3, #0
 8007e96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	008b      	lsls	r3, r1, #2
 8007e9e:	4621      	mov	r1, r4
 8007ea0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ea4:	4621      	mov	r1, r4
 8007ea6:	008a      	lsls	r2, r1, #2
 8007ea8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007eac:	f7f8 f9a6 	bl	80001fc <__aeabi_uldivmod>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4b60      	ldr	r3, [pc, #384]	; (8008038 <UART_SetConfig+0x4e4>)
 8007eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8007eba:	095b      	lsrs	r3, r3, #5
 8007ebc:	011c      	lsls	r4, r3, #4
 8007ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ec8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007ecc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007ed0:	4642      	mov	r2, r8
 8007ed2:	464b      	mov	r3, r9
 8007ed4:	1891      	adds	r1, r2, r2
 8007ed6:	61b9      	str	r1, [r7, #24]
 8007ed8:	415b      	adcs	r3, r3
 8007eda:	61fb      	str	r3, [r7, #28]
 8007edc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ee0:	4641      	mov	r1, r8
 8007ee2:	1851      	adds	r1, r2, r1
 8007ee4:	6139      	str	r1, [r7, #16]
 8007ee6:	4649      	mov	r1, r9
 8007ee8:	414b      	adcs	r3, r1
 8007eea:	617b      	str	r3, [r7, #20]
 8007eec:	f04f 0200 	mov.w	r2, #0
 8007ef0:	f04f 0300 	mov.w	r3, #0
 8007ef4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ef8:	4659      	mov	r1, fp
 8007efa:	00cb      	lsls	r3, r1, #3
 8007efc:	4651      	mov	r1, sl
 8007efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f02:	4651      	mov	r1, sl
 8007f04:	00ca      	lsls	r2, r1, #3
 8007f06:	4610      	mov	r0, r2
 8007f08:	4619      	mov	r1, r3
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	4642      	mov	r2, r8
 8007f0e:	189b      	adds	r3, r3, r2
 8007f10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f14:	464b      	mov	r3, r9
 8007f16:	460a      	mov	r2, r1
 8007f18:	eb42 0303 	adc.w	r3, r2, r3
 8007f1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007f2c:	f04f 0200 	mov.w	r2, #0
 8007f30:	f04f 0300 	mov.w	r3, #0
 8007f34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007f38:	4649      	mov	r1, r9
 8007f3a:	008b      	lsls	r3, r1, #2
 8007f3c:	4641      	mov	r1, r8
 8007f3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f42:	4641      	mov	r1, r8
 8007f44:	008a      	lsls	r2, r1, #2
 8007f46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007f4a:	f7f8 f957 	bl	80001fc <__aeabi_uldivmod>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	460b      	mov	r3, r1
 8007f52:	4611      	mov	r1, r2
 8007f54:	4b38      	ldr	r3, [pc, #224]	; (8008038 <UART_SetConfig+0x4e4>)
 8007f56:	fba3 2301 	umull	r2, r3, r3, r1
 8007f5a:	095b      	lsrs	r3, r3, #5
 8007f5c:	2264      	movs	r2, #100	; 0x64
 8007f5e:	fb02 f303 	mul.w	r3, r2, r3
 8007f62:	1acb      	subs	r3, r1, r3
 8007f64:	011b      	lsls	r3, r3, #4
 8007f66:	3332      	adds	r3, #50	; 0x32
 8007f68:	4a33      	ldr	r2, [pc, #204]	; (8008038 <UART_SetConfig+0x4e4>)
 8007f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f6e:	095b      	lsrs	r3, r3, #5
 8007f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f74:	441c      	add	r4, r3
 8007f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	673b      	str	r3, [r7, #112]	; 0x70
 8007f7e:	677a      	str	r2, [r7, #116]	; 0x74
 8007f80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007f84:	4642      	mov	r2, r8
 8007f86:	464b      	mov	r3, r9
 8007f88:	1891      	adds	r1, r2, r2
 8007f8a:	60b9      	str	r1, [r7, #8]
 8007f8c:	415b      	adcs	r3, r3
 8007f8e:	60fb      	str	r3, [r7, #12]
 8007f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f94:	4641      	mov	r1, r8
 8007f96:	1851      	adds	r1, r2, r1
 8007f98:	6039      	str	r1, [r7, #0]
 8007f9a:	4649      	mov	r1, r9
 8007f9c:	414b      	adcs	r3, r1
 8007f9e:	607b      	str	r3, [r7, #4]
 8007fa0:	f04f 0200 	mov.w	r2, #0
 8007fa4:	f04f 0300 	mov.w	r3, #0
 8007fa8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007fac:	4659      	mov	r1, fp
 8007fae:	00cb      	lsls	r3, r1, #3
 8007fb0:	4651      	mov	r1, sl
 8007fb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fb6:	4651      	mov	r1, sl
 8007fb8:	00ca      	lsls	r2, r1, #3
 8007fba:	4610      	mov	r0, r2
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	4642      	mov	r2, r8
 8007fc2:	189b      	adds	r3, r3, r2
 8007fc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fc6:	464b      	mov	r3, r9
 8007fc8:	460a      	mov	r2, r1
 8007fca:	eb42 0303 	adc.w	r3, r2, r3
 8007fce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	663b      	str	r3, [r7, #96]	; 0x60
 8007fda:	667a      	str	r2, [r7, #100]	; 0x64
 8007fdc:	f04f 0200 	mov.w	r2, #0
 8007fe0:	f04f 0300 	mov.w	r3, #0
 8007fe4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007fe8:	4649      	mov	r1, r9
 8007fea:	008b      	lsls	r3, r1, #2
 8007fec:	4641      	mov	r1, r8
 8007fee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ff2:	4641      	mov	r1, r8
 8007ff4:	008a      	lsls	r2, r1, #2
 8007ff6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007ffa:	f7f8 f8ff 	bl	80001fc <__aeabi_uldivmod>
 8007ffe:	4602      	mov	r2, r0
 8008000:	460b      	mov	r3, r1
 8008002:	4b0d      	ldr	r3, [pc, #52]	; (8008038 <UART_SetConfig+0x4e4>)
 8008004:	fba3 1302 	umull	r1, r3, r3, r2
 8008008:	095b      	lsrs	r3, r3, #5
 800800a:	2164      	movs	r1, #100	; 0x64
 800800c:	fb01 f303 	mul.w	r3, r1, r3
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	011b      	lsls	r3, r3, #4
 8008014:	3332      	adds	r3, #50	; 0x32
 8008016:	4a08      	ldr	r2, [pc, #32]	; (8008038 <UART_SetConfig+0x4e4>)
 8008018:	fba2 2303 	umull	r2, r3, r2, r3
 800801c:	095b      	lsrs	r3, r3, #5
 800801e:	f003 020f 	and.w	r2, r3, #15
 8008022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4422      	add	r2, r4
 800802a:	609a      	str	r2, [r3, #8]
}
 800802c:	bf00      	nop
 800802e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008032:	46bd      	mov	sp, r7
 8008034:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008038:	51eb851f 	.word	0x51eb851f

0800803c <memset>:
 800803c:	4402      	add	r2, r0
 800803e:	4603      	mov	r3, r0
 8008040:	4293      	cmp	r3, r2
 8008042:	d100      	bne.n	8008046 <memset+0xa>
 8008044:	4770      	bx	lr
 8008046:	f803 1b01 	strb.w	r1, [r3], #1
 800804a:	e7f9      	b.n	8008040 <memset+0x4>

0800804c <__libc_init_array>:
 800804c:	b570      	push	{r4, r5, r6, lr}
 800804e:	4d0d      	ldr	r5, [pc, #52]	; (8008084 <__libc_init_array+0x38>)
 8008050:	4c0d      	ldr	r4, [pc, #52]	; (8008088 <__libc_init_array+0x3c>)
 8008052:	1b64      	subs	r4, r4, r5
 8008054:	10a4      	asrs	r4, r4, #2
 8008056:	2600      	movs	r6, #0
 8008058:	42a6      	cmp	r6, r4
 800805a:	d109      	bne.n	8008070 <__libc_init_array+0x24>
 800805c:	4d0b      	ldr	r5, [pc, #44]	; (800808c <__libc_init_array+0x40>)
 800805e:	4c0c      	ldr	r4, [pc, #48]	; (8008090 <__libc_init_array+0x44>)
 8008060:	f000 f818 	bl	8008094 <_init>
 8008064:	1b64      	subs	r4, r4, r5
 8008066:	10a4      	asrs	r4, r4, #2
 8008068:	2600      	movs	r6, #0
 800806a:	42a6      	cmp	r6, r4
 800806c:	d105      	bne.n	800807a <__libc_init_array+0x2e>
 800806e:	bd70      	pop	{r4, r5, r6, pc}
 8008070:	f855 3b04 	ldr.w	r3, [r5], #4
 8008074:	4798      	blx	r3
 8008076:	3601      	adds	r6, #1
 8008078:	e7ee      	b.n	8008058 <__libc_init_array+0xc>
 800807a:	f855 3b04 	ldr.w	r3, [r5], #4
 800807e:	4798      	blx	r3
 8008080:	3601      	adds	r6, #1
 8008082:	e7f2      	b.n	800806a <__libc_init_array+0x1e>
 8008084:	0800816c 	.word	0x0800816c
 8008088:	0800816c 	.word	0x0800816c
 800808c:	0800816c 	.word	0x0800816c
 8008090:	08008170 	.word	0x08008170

08008094 <_init>:
 8008094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008096:	bf00      	nop
 8008098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800809a:	bc08      	pop	{r3}
 800809c:	469e      	mov	lr, r3
 800809e:	4770      	bx	lr

080080a0 <_fini>:
 80080a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a2:	bf00      	nop
 80080a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080a6:	bc08      	pop	{r3}
 80080a8:	469e      	mov	lr, r3
 80080aa:	4770      	bx	lr
