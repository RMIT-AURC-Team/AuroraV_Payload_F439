
AuroraV_Payload_F439.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068d4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006a80  08006a80  00016a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b08  08006b08  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08006b08  08006b08  00016b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b10  08006b10  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b10  08006b10  00016b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b14  08006b14  00016b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          000002f0  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000314  20000314  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017bc2  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003432  00000000  00000000  00037c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013d0  00000000  00000000  0003b090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f76  00000000  00000000  0003c460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026e79  00000000  00000000  0003d3d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a0c4  00000000  00000000  0006424f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e6e34  00000000  00000000  0007e313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000052b4  00000000  00000000  00165148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0016a3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006a68 	.word	0x08006a68

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	08006a68 	.word	0x08006a68

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <init_accel>:
uint8_t OUT_Y_L 				= 0x2A;
uint8_t OUT_Y_H 				= 0x2B;
uint8_t OUT_Z_L 				= 0x2C;
uint8_t OUT_Z_H 				= 0x2D;

HAL_StatusTypeDef init_accel(I2C_HandleTypeDef* hi2c) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;

	// Write Control Register 1
	ret = i2c_write_reg(hi2c, H3LIS331DL_ADDR, &CTRL_REG1, MASK_1kHz);
 8000500:	2118      	movs	r1, #24
 8000502:	233f      	movs	r3, #63	; 0x3f
 8000504:	4a09      	ldr	r2, [pc, #36]	; (800052c <init_accel+0x34>)
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f000 faf4 	bl	8000af4 <i2c_write_reg>
 800050c:	4603      	mov	r3, r0
 800050e:	73fb      	strb	r3, [r7, #15]

	// Write Control Register 4
	ret = i2c_write_reg(hi2c, H3LIS331DL_ADDR, &CTRL_REG4, MASK_100G);
 8000510:	2118      	movs	r1, #24
 8000512:	2300      	movs	r3, #0
 8000514:	4a06      	ldr	r2, [pc, #24]	; (8000530 <init_accel+0x38>)
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f000 faec 	bl	8000af4 <i2c_write_reg>
 800051c:	4603      	mov	r3, r0
 800051e:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000520:	7bfb      	ldrb	r3, [r7, #15]
}
 8000522:	4618      	mov	r0, r3
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000000 	.word	0x20000000
 8000530:	20000001 	.word	0x20000001

08000534 <readAccelerometer>:

void readAccelerometer(uint8_t values[6], I2C_HandleTypeDef* hi2c) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
	uint8_t buf_x[2];
	uint8_t buf_y[2];
	uint8_t buf_z[2];

	// Read X-Axis
	buf_x[0] = i2c_read_reg(hi2c, H3LIS331DL_ADDR, &OUT_X_L);
 800053e:	2318      	movs	r3, #24
 8000540:	4a2c      	ldr	r2, [pc, #176]	; (80005f4 <readAccelerometer+0xc0>)
 8000542:	4619      	mov	r1, r3
 8000544:	6838      	ldr	r0, [r7, #0]
 8000546:	f000 faad 	bl	8000aa4 <i2c_read_reg>
 800054a:	4603      	mov	r3, r0
 800054c:	743b      	strb	r3, [r7, #16]
	buf_x[1] = i2c_read_reg(hi2c, H3LIS331DL_ADDR, &OUT_X_H);
 800054e:	2318      	movs	r3, #24
 8000550:	4a29      	ldr	r2, [pc, #164]	; (80005f8 <readAccelerometer+0xc4>)
 8000552:	4619      	mov	r1, r3
 8000554:	6838      	ldr	r0, [r7, #0]
 8000556:	f000 faa5 	bl	8000aa4 <i2c_read_reg>
 800055a:	4603      	mov	r3, r0
 800055c:	747b      	strb	r3, [r7, #17]

	// Read Y-Axis
	buf_y[0] = i2c_read_reg(hi2c, H3LIS331DL_ADDR, &OUT_Y_L);
 800055e:	2318      	movs	r3, #24
 8000560:	4a26      	ldr	r2, [pc, #152]	; (80005fc <readAccelerometer+0xc8>)
 8000562:	4619      	mov	r1, r3
 8000564:	6838      	ldr	r0, [r7, #0]
 8000566:	f000 fa9d 	bl	8000aa4 <i2c_read_reg>
 800056a:	4603      	mov	r3, r0
 800056c:	733b      	strb	r3, [r7, #12]
	buf_y[1] = i2c_read_reg(hi2c, H3LIS331DL_ADDR, &OUT_Y_H);
 800056e:	2318      	movs	r3, #24
 8000570:	4a23      	ldr	r2, [pc, #140]	; (8000600 <readAccelerometer+0xcc>)
 8000572:	4619      	mov	r1, r3
 8000574:	6838      	ldr	r0, [r7, #0]
 8000576:	f000 fa95 	bl	8000aa4 <i2c_read_reg>
 800057a:	4603      	mov	r3, r0
 800057c:	737b      	strb	r3, [r7, #13]

	// Read Z-Axis
	buf_z[0] = i2c_read_reg(hi2c, H3LIS331DL_ADDR, &OUT_Z_L);
 800057e:	2318      	movs	r3, #24
 8000580:	4a20      	ldr	r2, [pc, #128]	; (8000604 <readAccelerometer+0xd0>)
 8000582:	4619      	mov	r1, r3
 8000584:	6838      	ldr	r0, [r7, #0]
 8000586:	f000 fa8d 	bl	8000aa4 <i2c_read_reg>
 800058a:	4603      	mov	r3, r0
 800058c:	723b      	strb	r3, [r7, #8]
	buf_z[1] = i2c_read_reg(hi2c, H3LIS331DL_ADDR, &OUT_Z_H);
 800058e:	2318      	movs	r3, #24
 8000590:	4a1d      	ldr	r2, [pc, #116]	; (8000608 <readAccelerometer+0xd4>)
 8000592:	4619      	mov	r1, r3
 8000594:	6838      	ldr	r0, [r7, #0]
 8000596:	f000 fa85 	bl	8000aa4 <i2c_read_reg>
 800059a:	4603      	mov	r3, r0
 800059c:	727b      	strb	r3, [r7, #9]

	for (int i = 0; i < 2; i++) {
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
 80005a2:	e01f      	b.n	80005e4 <readAccelerometer+0xb0>
		values[i] = buf_x[i];
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	4413      	add	r3, r2
 80005aa:	f107 0110 	add.w	r1, r7, #16
 80005ae:	697a      	ldr	r2, [r7, #20]
 80005b0:	440a      	add	r2, r1
 80005b2:	7812      	ldrb	r2, [r2, #0]
 80005b4:	701a      	strb	r2, [r3, #0]
		values[i+2] = buf_y[i];
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	3302      	adds	r3, #2
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	4413      	add	r3, r2
 80005be:	f107 010c 	add.w	r1, r7, #12
 80005c2:	697a      	ldr	r2, [r7, #20]
 80005c4:	440a      	add	r2, r1
 80005c6:	7812      	ldrb	r2, [r2, #0]
 80005c8:	701a      	strb	r2, [r3, #0]
		values[i+4] = buf_z[i];
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	3304      	adds	r3, #4
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	4413      	add	r3, r2
 80005d2:	f107 0108 	add.w	r1, r7, #8
 80005d6:	697a      	ldr	r2, [r7, #20]
 80005d8:	440a      	add	r2, r1
 80005da:	7812      	ldrb	r2, [r2, #0]
 80005dc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	3301      	adds	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	dddc      	ble.n	80005a4 <readAccelerometer+0x70>
	}
}
 80005ea:	bf00      	nop
 80005ec:	bf00      	nop
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000003 	.word	0x20000003
 80005f8:	20000004 	.word	0x20000004
 80005fc:	20000005 	.word	0x20000005
 8000600:	20000006 	.word	0x20000006
 8000604:	20000007 	.word	0x20000007
 8000608:	20000008 	.word	0x20000008

0800060c <readAccel_whoami>:

uint8_t readAccel_whoami(I2C_HandleTypeDef* hi2c) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	return i2c_read_reg(hi2c, H3LIS331DL_ADDR, &WHOAMI);
 8000614:	2318      	movs	r3, #24
 8000616:	4a05      	ldr	r2, [pc, #20]	; (800062c <readAccel_whoami+0x20>)
 8000618:	4619      	mov	r1, r3
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f000 fa42 	bl	8000aa4 <i2c_read_reg>
 8000620:	4603      	mov	r3, r0
}
 8000622:	4618      	mov	r0, r3
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000002 	.word	0x20000002

08000630 <init_bme280>:
uint8_t OUT_TEMP_H 			= 0xFA;
uint8_t OUT_HUM_L 			= 0xFE;
uint8_t OUT_HUM_H 			= 0xFD;


HAL_StatusTypeDef init_bme280(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	73fb      	strb	r3, [r7, #15]
	if (bme == 0) {
 8000640:	78fb      	ldrb	r3, [r7, #3]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d102      	bne.n	800064c <init_bme280+0x1c>
		bme_addr = BME280_ADDR_0;
 8000646:	2376      	movs	r3, #118	; 0x76
 8000648:	73fb      	strb	r3, [r7, #15]
 800064a:	e004      	b.n	8000656 <init_bme280+0x26>
	} else if (bme == 1) {
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d101      	bne.n	8000656 <init_bme280+0x26>
		bme_addr = BME280_ADDR_1;
 8000652:	2377      	movs	r3, #119	; 0x77
 8000654:	73fb      	strb	r3, [r7, #15]
	}

	HAL_StatusTypeDef ret;
	uint8_t control_reg = 0x00;
 8000656:	2300      	movs	r3, #0
 8000658:	73bb      	strb	r3, [r7, #14]

	// Reset the sensor
	ret =  i2c_write_reg(hi2c, bme_addr, &RST_REG, RST);
 800065a:	7bf9      	ldrb	r1, [r7, #15]
 800065c:	23b6      	movs	r3, #182	; 0xb6
 800065e:	4a19      	ldr	r2, [pc, #100]	; (80006c4 <init_bme280+0x94>)
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f000 fa47 	bl	8000af4 <i2c_write_reg>
 8000666:	4603      	mov	r3, r0
 8000668:	737b      	strb	r3, [r7, #13]

	// Set humidity control register
	control_reg = i2c_read_reg(hi2c, bme_addr, &CTRL_HUM_REG);
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	4a16      	ldr	r2, [pc, #88]	; (80006c8 <init_bme280+0x98>)
 800066e:	4619      	mov	r1, r3
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f000 fa17 	bl	8000aa4 <i2c_read_reg>
 8000676:	4603      	mov	r3, r0
 8000678:	73bb      	strb	r3, [r7, #14]
	control_reg = control_reg & 0xF8;
 800067a:	7bbb      	ldrb	r3, [r7, #14]
 800067c:	f023 0307 	bic.w	r3, r3, #7
 8000680:	73bb      	strb	r3, [r7, #14]
	control_reg = control_reg | CTRL_HUM_MSK;
 8000682:	7bbb      	ldrb	r3, [r7, #14]
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	73bb      	strb	r3, [r7, #14]
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_HUM_REG, control_reg);
 800068a:	7bbb      	ldrb	r3, [r7, #14]
 800068c:	7bf9      	ldrb	r1, [r7, #15]
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <init_bme280+0x98>)
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f000 fa2f 	bl	8000af4 <i2c_write_reg>
 8000696:	4603      	mov	r3, r0
 8000698:	737b      	strb	r3, [r7, #13]

	// Set measure control register
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_MEAS_REG, CTRL_MEAS_MSK);
 800069a:	7bf9      	ldrb	r1, [r7, #15]
 800069c:	2327      	movs	r3, #39	; 0x27
 800069e:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <init_bme280+0x9c>)
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f000 fa27 	bl	8000af4 <i2c_write_reg>
 80006a6:	4603      	mov	r3, r0
 80006a8:	737b      	strb	r3, [r7, #13]

	// Set the config register
	ret = i2c_write_reg(hi2c, bme_addr, &CONF_REG, CONF_MSK);
 80006aa:	7bf9      	ldrb	r1, [r7, #15]
 80006ac:	2300      	movs	r3, #0
 80006ae:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <init_bme280+0xa0>)
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 fa1f 	bl	8000af4 <i2c_write_reg>
 80006b6:	4603      	mov	r3, r0
 80006b8:	737b      	strb	r3, [r7, #13]

	return ret;
 80006ba:	7b7b      	ldrb	r3, [r7, #13]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	2000000a 	.word	0x2000000a
 80006c8:	2000000b 	.word	0x2000000b
 80006cc:	2000000c 	.word	0x2000000c
 80006d0:	2000000d 	.word	0x2000000d

080006d4 <readBME280_id_reg>:

void readTempHumPres(uint8_t values[6], I2C_HandleTypeDef* hi2c) {

}

uint8_t readBME280_id_reg(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	73fb      	strb	r3, [r7, #15]
	if (bme == 0) {
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d102      	bne.n	80006f0 <readBME280_id_reg+0x1c>
		bme_addr = BME280_ADDR_0;
 80006ea:	2376      	movs	r3, #118	; 0x76
 80006ec:	73fb      	strb	r3, [r7, #15]
 80006ee:	e004      	b.n	80006fa <readBME280_id_reg+0x26>
	} else if (bme == 1) {
 80006f0:	78fb      	ldrb	r3, [r7, #3]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d101      	bne.n	80006fa <readBME280_id_reg+0x26>
		bme_addr = BME280_ADDR_1;
 80006f6:	2377      	movs	r3, #119	; 0x77
 80006f8:	73fb      	strb	r3, [r7, #15]
	}

	return i2c_read_reg(hi2c, bme_addr, &ID_REG);
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	4a04      	ldr	r2, [pc, #16]	; (8000710 <readBME280_id_reg+0x3c>)
 80006fe:	4619      	mov	r1, r3
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f000 f9cf 	bl	8000aa4 <i2c_read_reg>
 8000706:	4603      	mov	r3, r0
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000009 	.word	0x20000009

08000714 <erase_chip_spi>:
 *      Author: aidencontini
 */

#include "data_output_spi.h"

HAL_StatusTypeDef erase_chip_spi(SPI_HandleTypeDef *hspi) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;  // Initialize with success
 800071c:	2300      	movs	r3, #0
 800071e:	73bb      	strb	r3, [r7, #14]

	uint8_t busy = 0x01;
 8000720:	2301      	movs	r3, #1
 8000722:	73fb      	strb	r3, [r7, #15]
	while(busy) {
 8000724:	e006      	b.n	8000734 <erase_chip_spi+0x20>
		busy = (check_status_register(hspi) & 0x01);	// Check if there is a write in progress
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f000 f8be 	bl	80008a8 <check_status_register>
 800072c:	4603      	mov	r3, r0
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	73fb      	strb	r3, [r7, #15]
	while(busy) {
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d1f5      	bne.n	8000726 <erase_chip_spi+0x12>
	}

	write_enable_spi(hspi);
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f000 f834 	bl	80007a8 <write_enable_spi>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 8000740:	2200      	movs	r2, #0
 8000742:	2104      	movs	r1, #4
 8000744:	4810      	ldr	r0, [pc, #64]	; (8000788 <erase_chip_spi+0x74>)
 8000746:	f001 fd47 	bl	80021d8 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(hspi, &FLASH_ERASE, 1, 100);	// Write the chip erase value to the FLASH to initial writing
 800074a:	2364      	movs	r3, #100	; 0x64
 800074c:	2201      	movs	r2, #1
 800074e:	490f      	ldr	r1, [pc, #60]	; (800078c <erase_chip_spi+0x78>)
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f003 ff98 	bl	8004686 <HAL_SPI_Transmit>
 8000756:	4603      	mov	r3, r0
 8000758:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800075a:	2201      	movs	r2, #1
 800075c:	2104      	movs	r1, #4
 800075e:	480a      	ldr	r0, [pc, #40]	; (8000788 <erase_chip_spi+0x74>)
 8000760:	f001 fd3a 	bl	80021d8 <HAL_GPIO_WritePin>

	busy = 0x01;
 8000764:	2301      	movs	r3, #1
 8000766:	73fb      	strb	r3, [r7, #15]
	while(busy) {
 8000768:	e006      	b.n	8000778 <erase_chip_spi+0x64>
		busy = (check_status_register(hspi) & 0x01);	// Check if there is a write in progress
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f000 f89c 	bl	80008a8 <check_status_register>
 8000770:	4603      	mov	r3, r0
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	73fb      	strb	r3, [r7, #15]
	while(busy) {
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d1f5      	bne.n	800076a <erase_chip_spi+0x56>
	}

    // Return the status (HAL_OK for success, HAL_ERROR for failure)
    return status;
 800077e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40020c00 	.word	0x40020c00
 800078c:	20000012 	.word	0x20000012

08000790 <erase_32k_spi>:

void erase_32k_spi(SPI_HandleTypeDef *hspi, uint32_t addr) {
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
//	HAL_SPI_Transmit(hspi, &addrH, 1, 100);
//	HAL_SPI_Transmit(hspi, &addrM, 1, 100);
//	HAL_SPI_Transmit(hspi, &addrL, 1, 100);
//
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
	return;
 800079a:	bf00      	nop
}
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
	...

080007a8 <write_enable_spi>:

void write_enable_spi(SPI_HandleTypeDef *hspi) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 80007b0:	2200      	movs	r2, #0
 80007b2:	2104      	movs	r1, #4
 80007b4:	4808      	ldr	r0, [pc, #32]	; (80007d8 <write_enable_spi+0x30>)
 80007b6:	f001 fd0f 	bl	80021d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &FLASH_WREN, 1, 100);	// Write the write enable value to the FLASH to initial writing
 80007ba:	2364      	movs	r3, #100	; 0x64
 80007bc:	2201      	movs	r2, #1
 80007be:	4907      	ldr	r1, [pc, #28]	; (80007dc <write_enable_spi+0x34>)
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f003 ff60 	bl	8004686 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	2104      	movs	r1, #4
 80007ca:	4803      	ldr	r0, [pc, #12]	; (80007d8 <write_enable_spi+0x30>)
 80007cc:	f001 fd04 	bl	80021d8 <HAL_GPIO_WritePin>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40020c00 	.word	0x40020c00
 80007dc:	2000000e 	.word	0x2000000e

080007e0 <write_data_spi>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
	HAL_SPI_Transmit(hspi, &FLASH_WRDIS, 1, 100);	// Write the write enable value to the FLASH to initial writing
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
}

uint8_t write_data_spi(uint8_t page[PAGE_SIZE], GPIO_PinState flight_mode, SPI_HandleTypeDef *hspi, int addr) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	607a      	str	r2, [r7, #4]
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	460b      	mov	r3, r1
 80007ee:	72fb      	strb	r3, [r7, #11]
	uint8_t exit = EXIT_FAILURE;
 80007f0:	2301      	movs	r3, #1
 80007f2:	75fb      	strb	r3, [r7, #23]

	// If in flight mode, write data out to EEPROM
	if(flight_mode == GPIO_PIN_SET) {
 80007f4:	7afb      	ldrb	r3, [r7, #11]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d14a      	bne.n	8000890 <write_data_spi+0xb0>

		uint8_t busy = 0x01;
 80007fa:	2301      	movs	r3, #1
 80007fc:	75bb      	strb	r3, [r7, #22]
		while(busy) {
 80007fe:	e006      	b.n	800080e <write_data_spi+0x2e>
			busy = (check_status_register(hspi) & 0x01);	// Check if there is a write in progress
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f000 f851 	bl	80008a8 <check_status_register>
 8000806:	4603      	mov	r3, r0
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	75bb      	strb	r3, [r7, #22]
		while(busy) {
 800080e:	7dbb      	ldrb	r3, [r7, #22]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d1f5      	bne.n	8000800 <write_data_spi+0x20>
		}

		// Send the write enable signal
		write_enable_spi(hspi);
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff ffc7 	bl	80007a8 <write_enable_spi>

		// Split the 24 bit address into three 8 bit ints
		uint8_t addrL = addr & 0xFF;  // Get the low byte
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	757b      	strb	r3, [r7, #21]
		uint8_t addrM = (addr >> 8) & 0xFF;  // Get the middle byte
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	121b      	asrs	r3, r3, #8
 8000824:	b2db      	uxtb	r3, r3
 8000826:	753b      	strb	r3, [r7, #20]
		uint8_t addrH = (addr >> 16) & 0xFF;  // Get the high byte
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	141b      	asrs	r3, r3, #16
 800082c:	b2db      	uxtb	r3, r3
 800082e:	74fb      	strb	r3, [r7, #19]

		// Send the PageWrite command
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 8000830:	2200      	movs	r2, #0
 8000832:	2104      	movs	r1, #4
 8000834:	481a      	ldr	r0, [pc, #104]	; (80008a0 <write_data_spi+0xc0>)
 8000836:	f001 fccf 	bl	80021d8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi, &FLASH_PGWR, 1, 100);	// Write the write enable value to the Flash to initial writing
 800083a:	2364      	movs	r3, #100	; 0x64
 800083c:	2201      	movs	r2, #1
 800083e:	4919      	ldr	r1, [pc, #100]	; (80008a4 <write_data_spi+0xc4>)
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f003 ff20 	bl	8004686 <HAL_SPI_Transmit>

		// Transmit the 24 bit address of the page to write to
		HAL_SPI_Transmit(hspi, &addrH, 1, 100);
 8000846:	f107 0113 	add.w	r1, r7, #19
 800084a:	2364      	movs	r3, #100	; 0x64
 800084c:	2201      	movs	r2, #1
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f003 ff19 	bl	8004686 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(hspi, &addrM, 1, 100);
 8000854:	f107 0114 	add.w	r1, r7, #20
 8000858:	2364      	movs	r3, #100	; 0x64
 800085a:	2201      	movs	r2, #1
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f003 ff12 	bl	8004686 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(hspi, &addrL, 1, 100);
 8000862:	f107 0115 	add.w	r1, r7, #21
 8000866:	2364      	movs	r3, #100	; 0x64
 8000868:	2201      	movs	r2, #1
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f003 ff0b 	bl	8004686 <HAL_SPI_Transmit>

		// Transmit the data to be written to the entire page
		HAL_SPI_Transmit(hspi, page, PAGE_SIZE, 1000);
 8000870:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000874:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000878:	68f9      	ldr	r1, [r7, #12]
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f003 ff03 	bl	8004686 <HAL_SPI_Transmit>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);	// Set the chip select pin to high to remove the Flash from the SPI bus
 8000880:	2201      	movs	r2, #1
 8000882:	2104      	movs	r1, #4
 8000884:	4806      	ldr	r0, [pc, #24]	; (80008a0 <write_data_spi+0xc0>)
 8000886:	f001 fca7 	bl	80021d8 <HAL_GPIO_WritePin>
		exit = EXIT_SUCCESS;
 800088a:	2300      	movs	r3, #0
 800088c:	75fb      	strb	r3, [r7, #23]
 800088e:	e001      	b.n	8000894 <write_data_spi+0xb4>

	// If not in flight mode, exit
	} else {
		exit = EXIT_SUCCESS;
 8000890:	2300      	movs	r3, #0
 8000892:	75fb      	strb	r3, [r7, #23]
	}
	return exit;
 8000894:	7dfb      	ldrb	r3, [r7, #23]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40020c00 	.word	0x40020c00
 80008a4:	2000000f 	.word	0x2000000f

080008a8 <check_status_register>:
 *      Author: aidencontini
 */

#include <data_read_spi.h>

uint8_t check_status_register(SPI_HandleTypeDef *hspi) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	uint8_t status_reg = 0x00;
 80008b0:	2300      	movs	r3, #0
 80008b2:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 80008b4:	2200      	movs	r2, #0
 80008b6:	2104      	movs	r1, #4
 80008b8:	480c      	ldr	r0, [pc, #48]	; (80008ec <check_status_register+0x44>)
 80008ba:	f001 fc8d 	bl	80021d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &FLASH_READSR1, 1, 100);	// Write the write enable value to the Flash to initial reading
 80008be:	2364      	movs	r3, #100	; 0x64
 80008c0:	2201      	movs	r2, #1
 80008c2:	490b      	ldr	r1, [pc, #44]	; (80008f0 <check_status_register+0x48>)
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f003 fede 	bl	8004686 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &status_reg, 1, 100);
 80008ca:	f107 010f 	add.w	r1, r7, #15
 80008ce:	2364      	movs	r3, #100	; 0x64
 80008d0:	2201      	movs	r2, #1
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f004 f81a 	bl	800490c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	2104      	movs	r1, #4
 80008dc:	4803      	ldr	r0, [pc, #12]	; (80008ec <check_status_register+0x44>)
 80008de:	f001 fc7b 	bl	80021d8 <HAL_GPIO_WritePin>

	return status_reg;
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40020c00 	.word	0x40020c00
 80008f0:	20000010 	.word	0x20000010

080008f4 <find_next_blank_page>:

uint32_t find_next_blank_page(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_PinState *end_of_flash_ptr) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	; 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
	uint8_t page_start[4] = {0, 0, 0, 0};
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
	uint32_t page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 8000904:	7d3b      	ldrb	r3, [r7, #20]
 8000906:	061a      	lsls	r2, r3, #24
 8000908:	7d7b      	ldrb	r3, [r7, #21]
 800090a:	041b      	lsls	r3, r3, #16
 800090c:	431a      	orrs	r2, r3
 800090e:	7dbb      	ldrb	r3, [r7, #22]
 8000910:	021b      	lsls	r3, r3, #8
 8000912:	4313      	orrs	r3, r2
 8000914:	7dfa      	ldrb	r2, [r7, #23]
 8000916:	4313      	orrs	r3, r2
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t temp = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
	uint32_t page_address = temp;
 800091e:	6a3b      	ldr	r3, [r7, #32]
 8000920:	61fb      	str	r3, [r7, #28]

	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000922:	e054      	b.n	80009ce <find_next_blank_page+0xda>
		page_address = temp;
 8000924:	6a3b      	ldr	r3, [r7, #32]
 8000926:	61fb      	str	r3, [r7, #28]

		uint8_t busy = 0x01;
 8000928:	2301      	movs	r3, #1
 800092a:	76fb      	strb	r3, [r7, #27]
		while(busy) {
 800092c:	e006      	b.n	800093c <find_next_blank_page+0x48>
			busy = (check_status_register(hspi) & 0x01);	// Check if there is a write in progress
 800092e:	68f8      	ldr	r0, [r7, #12]
 8000930:	f7ff ffba 	bl	80008a8 <check_status_register>
 8000934:	4603      	mov	r3, r0
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	76fb      	strb	r3, [r7, #27]
		while(busy) {
 800093c:	7efb      	ldrb	r3, [r7, #27]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d1f5      	bne.n	800092e <find_next_blank_page+0x3a>
		}

		// Read the entire contents of a page starting from the given address
		// Split the 24 bit address into three 8 bit ints
		uint8_t addrL = page_address & 0xFF;  // Get the low byte
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	74fb      	strb	r3, [r7, #19]
		uint8_t addrM = (page_address >> 8) & 0xFF;  // Get the middle byte
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	0a1b      	lsrs	r3, r3, #8
 800094c:	b2db      	uxtb	r3, r3
 800094e:	74bb      	strb	r3, [r7, #18]
		uint8_t addrH = (page_address >> 16) & 0xFF;  // Get the high byte
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	0c1b      	lsrs	r3, r3, #16
 8000954:	b2db      	uxtb	r3, r3
 8000956:	747b      	strb	r3, [r7, #17]

		// Read the page denoted by the given address
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2104      	movs	r1, #4
 800095c:	4826      	ldr	r0, [pc, #152]	; (80009f8 <find_next_blank_page+0x104>)
 800095e:	f001 fc3b 	bl	80021d8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi, &FLASH_READEN, 1, 100);	// Write the read enable value
 8000962:	2364      	movs	r3, #100	; 0x64
 8000964:	2201      	movs	r2, #1
 8000966:	4925      	ldr	r1, [pc, #148]	; (80009fc <find_next_blank_page+0x108>)
 8000968:	68f8      	ldr	r0, [r7, #12]
 800096a:	f003 fe8c 	bl	8004686 <HAL_SPI_Transmit>

		// Transmit the 24 bit address of the page to initialise read from
		HAL_SPI_Transmit(hspi, &addrH, 1, 100);
 800096e:	f107 0111 	add.w	r1, r7, #17
 8000972:	2364      	movs	r3, #100	; 0x64
 8000974:	2201      	movs	r2, #1
 8000976:	68f8      	ldr	r0, [r7, #12]
 8000978:	f003 fe85 	bl	8004686 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(hspi, &addrM, 1, 100);
 800097c:	f107 0112 	add.w	r1, r7, #18
 8000980:	2364      	movs	r3, #100	; 0x64
 8000982:	2201      	movs	r2, #1
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f003 fe7e 	bl	8004686 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(hspi, &addrL, 1, 100);
 800098a:	f107 0113 	add.w	r1, r7, #19
 800098e:	2364      	movs	r3, #100	; 0x64
 8000990:	2201      	movs	r2, #1
 8000992:	68f8      	ldr	r0, [r7, #12]
 8000994:	f003 fe77 	bl	8004686 <HAL_SPI_Transmit>

		HAL_SPI_Receive(hspi, page_start, 4, 100);
 8000998:	f107 0114 	add.w	r1, r7, #20
 800099c:	2364      	movs	r3, #100	; 0x64
 800099e:	2204      	movs	r2, #4
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	f003 ffb3 	bl	800490c <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80009a6:	2201      	movs	r2, #1
 80009a8:	2104      	movs	r1, #4
 80009aa:	4813      	ldr	r0, [pc, #76]	; (80009f8 <find_next_blank_page+0x104>)
 80009ac:	f001 fc14 	bl	80021d8 <HAL_GPIO_WritePin>

		page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 80009b0:	7d3b      	ldrb	r3, [r7, #20]
 80009b2:	061a      	lsls	r2, r3, #24
 80009b4:	7d7b      	ldrb	r3, [r7, #21]
 80009b6:	041b      	lsls	r3, r3, #16
 80009b8:	431a      	orrs	r2, r3
 80009ba:	7dbb      	ldrb	r3, [r7, #22]
 80009bc:	021b      	lsls	r3, r3, #8
 80009be:	4313      	orrs	r3, r2
 80009c0:	7dfa      	ldrb	r2, [r7, #23]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
		temp += PAGE_SIZE;
 80009c6:	6a3b      	ldr	r3, [r7, #32]
 80009c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80009cc:	623b      	str	r3, [r7, #32]
	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 80009ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009d4:	d1a6      	bne.n	8000924 <find_next_blank_page+0x30>
 80009d6:	6a3b      	ldr	r3, [r7, #32]
 80009d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009dc:	d0a2      	beq.n	8000924 <find_next_blank_page+0x30>
	}

	if (page_address == (NUM_OF_PAGES * PAGE_SIZE)) {
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009e4:	d102      	bne.n	80009ec <find_next_blank_page+0xf8>
		*end_of_flash_ptr = GPIO_PIN_RESET;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
	}
	return page_address;
 80009ec:	69fb      	ldr	r3, [r7, #28]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3728      	adds	r7, #40	; 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40020c00 	.word	0x40020c00
 80009fc:	20000011 	.word	0x20000011

08000a00 <read_page_spi>:

void read_page_spi(uint8_t data_read[PAGE_SIZE], SPI_HandleTypeDef *hspi, uint32_t addr) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
	// Read the status register to ensure no write is currently in progress
	uint8_t busy = 0x01;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	75fb      	strb	r3, [r7, #23]
	while(busy) {
 8000a10:	e006      	b.n	8000a20 <read_page_spi+0x20>
		busy = (check_status_register(hspi) & 0x01);	// Check if there is a write in progress
 8000a12:	68b8      	ldr	r0, [r7, #8]
 8000a14:	f7ff ff48 	bl	80008a8 <check_status_register>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	75fb      	strb	r3, [r7, #23]
	while(busy) {
 8000a20:	7dfb      	ldrb	r3, [r7, #23]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1f5      	bne.n	8000a12 <read_page_spi+0x12>
	}

	// Read the entire contents of a page starting from the given address
	// Split the 24 bit address into three 8 bit ints
	uint8_t addrL = addr & 0xFF;  // Get the low byte
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	75bb      	strb	r3, [r7, #22]
	uint8_t addrM = (addr >> 8) & 0xFF;  // Get the middle byte
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	0a1b      	lsrs	r3, r3, #8
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	757b      	strb	r3, [r7, #21]
	uint8_t addrH = (addr >> 16) & 0xFF;  // Get the high byte
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	0c1b      	lsrs	r3, r3, #16
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	753b      	strb	r3, [r7, #20]

	// Read the page denoted by the given address
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2104      	movs	r1, #4
 8000a40:	4816      	ldr	r0, [pc, #88]	; (8000a9c <read_page_spi+0x9c>)
 8000a42:	f001 fbc9 	bl	80021d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &FLASH_READEN, 1, 100);	// Write the read enable value
 8000a46:	2364      	movs	r3, #100	; 0x64
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4915      	ldr	r1, [pc, #84]	; (8000aa0 <read_page_spi+0xa0>)
 8000a4c:	68b8      	ldr	r0, [r7, #8]
 8000a4e:	f003 fe1a 	bl	8004686 <HAL_SPI_Transmit>

	// Transmit the 24 bit address of the page to initialise read from
	HAL_SPI_Transmit(hspi, &addrH, 1, 100);
 8000a52:	f107 0114 	add.w	r1, r7, #20
 8000a56:	2364      	movs	r3, #100	; 0x64
 8000a58:	2201      	movs	r2, #1
 8000a5a:	68b8      	ldr	r0, [r7, #8]
 8000a5c:	f003 fe13 	bl	8004686 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrM, 1, 100);
 8000a60:	f107 0115 	add.w	r1, r7, #21
 8000a64:	2364      	movs	r3, #100	; 0x64
 8000a66:	2201      	movs	r2, #1
 8000a68:	68b8      	ldr	r0, [r7, #8]
 8000a6a:	f003 fe0c 	bl	8004686 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrL, 1, 100);
 8000a6e:	f107 0116 	add.w	r1, r7, #22
 8000a72:	2364      	movs	r3, #100	; 0x64
 8000a74:	2201      	movs	r2, #1
 8000a76:	68b8      	ldr	r0, [r7, #8]
 8000a78:	f003 fe05 	bl	8004686 <HAL_SPI_Transmit>

	HAL_SPI_Receive(hspi, data_read, PAGE_SIZE, 100);
 8000a7c:	2364      	movs	r3, #100	; 0x64
 8000a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a82:	68f9      	ldr	r1, [r7, #12]
 8000a84:	68b8      	ldr	r0, [r7, #8]
 8000a86:	f003 ff41 	bl	800490c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2104      	movs	r1, #4
 8000a8e:	4803      	ldr	r0, [pc, #12]	; (8000a9c <read_page_spi+0x9c>)
 8000a90:	f001 fba2 	bl	80021d8 <HAL_GPIO_WritePin>
}
 8000a94:	bf00      	nop
 8000a96:	3718      	adds	r7, #24
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40020c00 	.word	0x40020c00
 8000aa0:	20000011 	.word	0x20000011

08000aa4 <i2c_read_reg>:
 *      Author: aidencontini
 */

#include "i2c_driver.h"

uint8_t i2c_read_reg(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t* register_addr) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b088      	sub	sp, #32
 8000aa8:	af02      	add	r7, sp, #8
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	460b      	mov	r3, r1
 8000aae:	607a      	str	r2, [r7, #4]
 8000ab0:	72fb      	strb	r3, [r7, #11]
	uint8_t read = 0x00;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) | 0x00, register_addr, 1, 100);
 8000ab6:	7afb      	ldrb	r3, [r7, #11]
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	b299      	uxth	r1, r3
 8000abe:	2364      	movs	r3, #100	; 0x64
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	68f8      	ldr	r0, [r7, #12]
 8000ac8:	f001 fcfe 	bl	80024c8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, &read, 1, 100);
 8000acc:	7afb      	ldrb	r3, [r7, #11]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	b21b      	sxth	r3, r3
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	b21b      	sxth	r3, r3
 8000ad8:	b299      	uxth	r1, r3
 8000ada:	f107 0217 	add.w	r2, r7, #23
 8000ade:	2364      	movs	r3, #100	; 0x64
 8000ae0:	9300      	str	r3, [sp, #0]
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	68f8      	ldr	r0, [r7, #12]
 8000ae6:	f001 fded 	bl	80026c4 <HAL_I2C_Master_Receive>
	return read;
 8000aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <i2c_write_reg>:

HAL_StatusTypeDef i2c_write_reg(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t* register_addr, uint8_t data) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af02      	add	r7, sp, #8
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	607a      	str	r2, [r7, #4]
 8000afe:	461a      	mov	r2, r3
 8000b00:	460b      	mov	r3, r1
 8000b02:	72fb      	strb	r3, [r7, #11]
 8000b04:	4613      	mov	r3, r2
 8000b06:	72bb      	strb	r3, [r7, #10]
	uint8_t data_tx[2] = {*register_addr, data};
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	753b      	strb	r3, [r7, #20]
 8000b0e:	7abb      	ldrb	r3, [r7, #10]
 8000b10:	757b      	strb	r3, [r7, #21]
	return HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) | 0x00, data_tx, 2, 100);
 8000b12:	7afb      	ldrb	r3, [r7, #11]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	b299      	uxth	r1, r3
 8000b1a:	f107 0214 	add.w	r2, r7, #20
 8000b1e:	2364      	movs	r3, #100	; 0x64
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	2302      	movs	r3, #2
 8000b24:	68f8      	ldr	r0, [r7, #12]
 8000b26:	f001 fccf 	bl	80024c8 <HAL_I2C_Master_Transmit>
 8000b2a:	4603      	mov	r3, r0
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3a:	f000 ff73 	bl	8001a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b3e:	f000 f8b7 	bl	8000cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b42:	f000 fa53 	bl	8000fec <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b46:	f000 f915 	bl	8000d74 <MX_I2C1_Init>
  MX_RTC_Init();
 8000b4a:	f000 f993 	bl	8000e74 <MX_RTC_Init>
  MX_SPI1_Init();
 8000b4e:	f000 f9b7 	bl	8000ec0 <MX_SPI1_Init>
  MX_TIM6_Init();
 8000b52:	f000 f9eb 	bl	8000f2c <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000b56:	f000 fa1f 	bl	8000f98 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000b5a:	f000 f94b 	bl	8000df4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, UARTRxData,1);			// Initiate the UART Receive interrupt
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4946      	ldr	r1, [pc, #280]	; (8000c7c <main+0x148>)
 8000b62:	4847      	ldr	r0, [pc, #284]	; (8000c80 <main+0x14c>)
 8000b64:	f004 ff05 	bl	8005972 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);	// Turn LED off
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2180      	movs	r1, #128	; 0x80
 8000b6c:	4845      	ldr	r0, [pc, #276]	; (8000c84 <main+0x150>)
 8000b6e:	f001 fb33 	bl	80021d8 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim6);
 8000b72:	4845      	ldr	r0, [pc, #276]	; (8000c88 <main+0x154>)
 8000b74:	f004 fb24 	bl	80051c0 <HAL_TIM_Base_Start_IT>
  byte_tracker = 0;
 8000b78:	4b44      	ldr	r3, [pc, #272]	; (8000c8c <main+0x158>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	801a      	strh	r2, [r3, #0]
  end_of_flash = GPIO_PIN_SET;
 8000b7e:	4b44      	ldr	r3, [pc, #272]	; (8000c90 <main+0x15c>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
  clean_data_buffer();
 8000b84:	f000 fb1a 	bl	80011bc <clean_data_buffer>
  initialise_rtc_default(&hrtc);
 8000b88:	4842      	ldr	r0, [pc, #264]	; (8000c94 <main+0x160>)
 8000b8a:	f000 fb37 	bl	80011fc <initialise_rtc_default>
  init_accel(&hi2c1);
 8000b8e:	4842      	ldr	r0, [pc, #264]	; (8000c98 <main+0x164>)
 8000b90:	f7ff fcb2 	bl	80004f8 <init_accel>
  init_bme280(&hi2c2, 0);
 8000b94:	2100      	movs	r1, #0
 8000b96:	4841      	ldr	r0, [pc, #260]	; (8000c9c <main+0x168>)
 8000b98:	f7ff fd4a 	bl	8000630 <init_bme280>
//  init_bme280(&hi2c2, 1);
  HAL_UART_Receive_IT(&huart2, UARTRxData,1);				// Initiate the UART Receive interrupt
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4937      	ldr	r1, [pc, #220]	; (8000c7c <main+0x148>)
 8000ba0:	4837      	ldr	r0, [pc, #220]	; (8000c80 <main+0x14c>)
 8000ba2:	f004 fee6 	bl	8005972 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);		// SET SPI CS High to disable bus
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2104      	movs	r1, #4
 8000baa:	483d      	ldr	r0, [pc, #244]	; (8000ca0 <main+0x16c>)
 8000bac:	f001 fb14 	bl	80021d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);		// Turn LED off
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2180      	movs	r1, #128	; 0x80
 8000bb4:	4833      	ldr	r0, [pc, #204]	; (8000c84 <main+0x150>)
 8000bb6:	f001 fb0f 	bl	80021d8 <HAL_GPIO_WritePin>
  next_blank_page = find_next_blank_page(&hspi1, &huart2, &end_of_flash);
  // Advance erase 32k
  erase_32k_spi(&hspi1, next_blank_page);
  **/

  uint32_t next_erase_page = next_blank_page + (100 * PAGE_SIZE);
 8000bba:	4b3a      	ldr	r3, [pc, #232]	; (8000ca4 <main+0x170>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
 8000bc2:	607b      	str	r3, [r7, #4]
  HAL_TIM_Base_Start_IT(&htim6);
 8000bc4:	4830      	ldr	r0, [pc, #192]	; (8000c88 <main+0x154>)
 8000bc6:	f004 fafb 	bl	80051c0 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // If at the end of the data buffer, write the page out
    if(byte_tracker > (PAGE_SIZE - READ_SIZE)) {
 8000bca:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <main+0x158>)
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	2bf6      	cmp	r3, #246	; 0xf6
 8000bd0:	d943      	bls.n	8000c5a <main+0x126>
      GPIO_PinState flight_mode = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000bd2:	2102      	movs	r1, #2
 8000bd4:	482b      	ldr	r0, [pc, #172]	; (8000c84 <main+0x150>)
 8000bd6:	f001 fae7 	bl	80021a8 <HAL_GPIO_ReadPin>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	70fb      	strb	r3, [r7, #3]
      if((flight_mode & end_of_flash) == GPIO_PIN_SET) {
 8000bde:	4b2c      	ldr	r3, [pc, #176]	; (8000c90 <main+0x15c>)
 8000be0:	781a      	ldrb	r2, [r3, #0]
 8000be2:	78fb      	ldrb	r3, [r7, #3]
 8000be4:	4013      	ands	r3, r2
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d131      	bne.n	8000c50 <main+0x11c>
        // Disable interrupts briefly
        HAL_UART_AbortReceive_IT(&huart2); // Disable UART receive interrupt
 8000bec:	4824      	ldr	r0, [pc, #144]	; (8000c80 <main+0x14c>)
 8000bee:	f004 fee5 	bl	80059bc <HAL_UART_AbortReceive_IT>
        HAL_TIM_Base_Stop_IT(&htim6); // Disable timer interrupt
 8000bf2:	4825      	ldr	r0, [pc, #148]	; (8000c88 <main+0x154>)
 8000bf4:	f004 fb54 	bl	80052a0 <HAL_TIM_Base_Stop_IT>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);		// Toggle LED when writing data
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2180      	movs	r1, #128	; 0x80
 8000bfc:	4821      	ldr	r0, [pc, #132]	; (8000c84 <main+0x150>)
 8000bfe:	f001 faeb 	bl	80021d8 <HAL_GPIO_WritePin>
        write_data_spi(data_buffer, flight_mode, &hspi1, next_blank_page);
 8000c02:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <main+0x170>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	78f9      	ldrb	r1, [r7, #3]
 8000c08:	4a27      	ldr	r2, [pc, #156]	; (8000ca8 <main+0x174>)
 8000c0a:	4828      	ldr	r0, [pc, #160]	; (8000cac <main+0x178>)
 8000c0c:	f7ff fde8 	bl	80007e0 <write_data_spi>
        next_blank_page += PAGE_SIZE;
 8000c10:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <main+0x170>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c18:	4a22      	ldr	r2, [pc, #136]	; (8000ca4 <main+0x170>)
 8000c1a:	6013      	str	r3, [r2, #0]

        // Renenable interrupts
        HAL_UART_Receive_IT(&huart2, UARTRxData,1);			// Initiate the UART Receive interrupt
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	4917      	ldr	r1, [pc, #92]	; (8000c7c <main+0x148>)
 8000c20:	4817      	ldr	r0, [pc, #92]	; (8000c80 <main+0x14c>)
 8000c22:	f004 fea6 	bl	8005972 <HAL_UART_Receive_IT>
        HAL_TIM_Base_Start_IT(&htim6);
 8000c26:	4818      	ldr	r0, [pc, #96]	; (8000c88 <main+0x154>)
 8000c28:	f004 faca 	bl	80051c0 <HAL_TIM_Base_Start_IT>

        if(next_blank_page == (NUM_OF_PAGES*PAGE_SIZE)) {
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <main+0x170>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c34:	d107      	bne.n	8000c46 <main+0x112>
          next_blank_page = find_next_blank_page(&hspi1, &huart2, &end_of_flash);
 8000c36:	4a16      	ldr	r2, [pc, #88]	; (8000c90 <main+0x15c>)
 8000c38:	4911      	ldr	r1, [pc, #68]	; (8000c80 <main+0x14c>)
 8000c3a:	481b      	ldr	r0, [pc, #108]	; (8000ca8 <main+0x174>)
 8000c3c:	f7ff fe5a 	bl	80008f4 <find_next_blank_page>
 8000c40:	4603      	mov	r3, r0
 8000c42:	4a18      	ldr	r2, [pc, #96]	; (8000ca4 <main+0x170>)
 8000c44:	6013      	str	r3, [r2, #0]
        }
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);		// Toggle LED when writing data
 8000c46:	2200      	movs	r2, #0
 8000c48:	2180      	movs	r1, #128	; 0x80
 8000c4a:	480e      	ldr	r0, [pc, #56]	; (8000c84 <main+0x150>)
 8000c4c:	f001 fac4 	bl	80021d8 <HAL_GPIO_WritePin>
      }
      byte_tracker = 0;
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <main+0x158>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	801a      	strh	r2, [r3, #0]
      clean_data_buffer();
 8000c56:	f000 fab1 	bl	80011bc <clean_data_buffer>
    }

    if(next_blank_page == next_erase_page) {
 8000c5a:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <main+0x170>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d1b2      	bne.n	8000bca <main+0x96>
      erase_32k_spi(&hspi1, next_blank_page);
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <main+0x170>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480f      	ldr	r0, [pc, #60]	; (8000ca8 <main+0x174>)
 8000c6c:	f7ff fd90 	bl	8000790 <erase_32k_spi>
      next_erase_page = next_blank_page + (100 * PAGE_SIZE);
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <main+0x170>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
 8000c78:	607b      	str	r3, [r7, #4]
    if(byte_tracker > (PAGE_SIZE - READ_SIZE)) {
 8000c7a:	e7a6      	b.n	8000bca <main+0x96>
 8000c7c:	200001f0 	.word	0x200001f0
 8000c80:	200001a8 	.word	0x200001a8
 8000c84:	40020400 	.word	0x40020400
 8000c88:	20000160 	.word	0x20000160
 8000c8c:	200002f8 	.word	0x200002f8
 8000c90:	200002fa 	.word	0x200002fa
 8000c94:	200000e8 	.word	0x200000e8
 8000c98:	20000040 	.word	0x20000040
 8000c9c:	20000094 	.word	0x20000094
 8000ca0:	40020c00 	.word	0x40020c00
 8000ca4:	200002f4 	.word	0x200002f4
 8000ca8:	20000108 	.word	0x20000108
 8000cac:	200001f4 	.word	0x200001f4

08000cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b094      	sub	sp, #80	; 0x50
 8000cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb6:	f107 0320 	add.w	r3, r7, #32
 8000cba:	2230      	movs	r2, #48	; 0x30
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f005 fea6 	bl	8006a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <SystemClock_Config+0xbc>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	4a23      	ldr	r2, [pc, #140]	; (8000d6c <SystemClock_Config+0xbc>)
 8000cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce4:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <SystemClock_Config+0xbc>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <SystemClock_Config+0xc0>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cfc:	4a1c      	ldr	r2, [pc, #112]	; (8000d70 <SystemClock_Config+0xc0>)
 8000cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d02:	6013      	str	r3, [r2, #0]
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <SystemClock_Config+0xc0>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000d10:	230a      	movs	r3, #10
 8000d12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d14:	2301      	movs	r3, #1
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d18:	2310      	movs	r3, #16
 8000d1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d24:	f107 0320 	add.w	r3, r7, #32
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f002 faff 	bl	800332c <HAL_RCC_OscConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000d34:	f000 fa5c 	bl	80011f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d38:	230f      	movs	r3, #15
 8000d3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f002 fd62 	bl	800381c <HAL_RCC_ClockConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000d5e:	f000 fa47 	bl	80011f0 <Error_Handler>
  }
}
 8000d62:	bf00      	nop
 8000d64:	3750      	adds	r7, #80	; 0x50
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40007000 	.word	0x40007000

08000d74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d78:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <MX_I2C1_Init+0x74>)
 8000d7a:	4a1c      	ldr	r2, [pc, #112]	; (8000dec <MX_I2C1_Init+0x78>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <MX_I2C1_Init+0x74>)
 8000d80:	4a1b      	ldr	r2, [pc, #108]	; (8000df0 <MX_I2C1_Init+0x7c>)
 8000d82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <MX_I2C1_Init+0x74>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <MX_I2C1_Init+0x74>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <MX_I2C1_Init+0x74>)
 8000d92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <MX_I2C1_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <MX_I2C1_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000da4:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <MX_I2C1_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_I2C1_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <MX_I2C1_Init+0x74>)
 8000db2:	f001 fa45 	bl	8002240 <HAL_I2C_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dbc:	f000 fa18 	bl	80011f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4809      	ldr	r0, [pc, #36]	; (8000de8 <MX_I2C1_Init+0x74>)
 8000dc4:	f002 fa36 	bl	8003234 <HAL_I2CEx_ConfigAnalogFilter>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000dce:	f000 fa0f 	bl	80011f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4804      	ldr	r0, [pc, #16]	; (8000de8 <MX_I2C1_Init+0x74>)
 8000dd6:	f002 fa69 	bl	80032ac <HAL_I2CEx_ConfigDigitalFilter>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000de0:	f000 fa06 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000040 	.word	0x20000040
 8000dec:	40005400 	.word	0x40005400
 8000df0:	000186a0 	.word	0x000186a0

08000df4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <MX_I2C2_Init+0x74>)
 8000dfa:	4a1c      	ldr	r2, [pc, #112]	; (8000e6c <MX_I2C2_Init+0x78>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_I2C2_Init+0x74>)
 8000e00:	4a1b      	ldr	r2, [pc, #108]	; (8000e70 <MX_I2C2_Init+0x7c>)
 8000e02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <MX_I2C2_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <MX_I2C2_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e10:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <MX_I2C2_Init+0x74>)
 8000e12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e16:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <MX_I2C2_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e1e:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <MX_I2C2_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e24:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <MX_I2C2_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <MX_I2C2_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e30:	480d      	ldr	r0, [pc, #52]	; (8000e68 <MX_I2C2_Init+0x74>)
 8000e32:	f001 fa05 	bl	8002240 <HAL_I2C_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e3c:	f000 f9d8 	bl	80011f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e40:	2100      	movs	r1, #0
 8000e42:	4809      	ldr	r0, [pc, #36]	; (8000e68 <MX_I2C2_Init+0x74>)
 8000e44:	f002 f9f6 	bl	8003234 <HAL_I2CEx_ConfigAnalogFilter>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000e4e:	f000 f9cf 	bl	80011f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e52:	2100      	movs	r1, #0
 8000e54:	4804      	ldr	r0, [pc, #16]	; (8000e68 <MX_I2C2_Init+0x74>)
 8000e56:	f002 fa29 	bl	80032ac <HAL_I2CEx_ConfigDigitalFilter>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000e60:	f000 f9c6 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000094 	.word	0x20000094
 8000e6c:	40005800 	.word	0x40005800
 8000e70:	000186a0 	.word	0x000186a0

08000e74 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_RTC_Init+0x44>)
 8000e7a:	4a10      	ldr	r2, [pc, #64]	; (8000ebc <MX_RTC_Init+0x48>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_RTC_Init+0x44>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_RTC_Init+0x44>)
 8000e86:	227f      	movs	r2, #127	; 0x7f
 8000e88:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <MX_RTC_Init+0x44>)
 8000e8c:	22ff      	movs	r2, #255	; 0xff
 8000e8e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_RTC_Init+0x44>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <MX_RTC_Init+0x44>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_RTC_Init+0x44>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_RTC_Init+0x44>)
 8000ea4:	f003 f85a 	bl	8003f5c <HAL_RTC_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000eae:	f000 f99f 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200000e8 	.word	0x200000e8
 8000ebc:	40002800 	.word	0x40002800

08000ec0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ec4:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <MX_SPI1_Init+0x64>)
 8000ec6:	4a18      	ldr	r2, [pc, #96]	; (8000f28 <MX_SPI1_Init+0x68>)
 8000ec8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <MX_SPI1_Init+0x64>)
 8000ecc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ed0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <MX_SPI1_Init+0x64>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <MX_SPI1_Init+0x64>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_SPI1_Init+0x64>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <MX_SPI1_Init+0x64>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_SPI1_Init+0x64>)
 8000eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_SPI1_Init+0x64>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <MX_SPI1_Init+0x64>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_SPI1_Init+0x64>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <MX_SPI1_Init+0x64>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_SPI1_Init+0x64>)
 8000f0c:	220a      	movs	r2, #10
 8000f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f10:	4804      	ldr	r0, [pc, #16]	; (8000f24 <MX_SPI1_Init+0x64>)
 8000f12:	f003 fb2f 	bl	8004574 <HAL_SPI_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f1c:	f000 f968 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000108 	.word	0x20000108
 8000f28:	40013000 	.word	0x40013000

08000f2c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f32:	463b      	mov	r3, r7
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <MX_TIM6_Init+0x64>)
 8000f3c:	4a15      	ldr	r2, [pc, #84]	; (8000f94 <MX_TIM6_Init+0x68>)
 8000f3e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <MX_TIM6_Init+0x64>)
 8000f42:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000f46:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_TIM6_Init+0x64>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <MX_TIM6_Init+0x64>)
 8000f50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f54:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_TIM6_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f5c:	480c      	ldr	r0, [pc, #48]	; (8000f90 <MX_TIM6_Init+0x64>)
 8000f5e:	f004 f8df 	bl	8005120 <HAL_TIM_Base_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f68:	f000 f942 	bl	80011f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f74:	463b      	mov	r3, r7
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <MX_TIM6_Init+0x64>)
 8000f7a:	f004 fb8f 	bl	800569c <HAL_TIMEx_MasterConfigSynchronization>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f84:	f000 f934 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000160 	.word	0x20000160
 8000f94:	40001000 	.word	0x40001000

08000f98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <MX_USART2_UART_Init+0x50>)
 8000fa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fa4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fd0:	f004 fbf4 	bl	80057bc <HAL_UART_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fda:	f000 f909 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200001a8 	.word	0x200001a8
 8000fe8:	40004400 	.word	0x40004400

08000fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b68      	ldr	r3, [pc, #416]	; (80011a8 <MX_GPIO_Init+0x1bc>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a67      	ldr	r2, [pc, #412]	; (80011a8 <MX_GPIO_Init+0x1bc>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b65      	ldr	r3, [pc, #404]	; (80011a8 <MX_GPIO_Init+0x1bc>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b61      	ldr	r3, [pc, #388]	; (80011a8 <MX_GPIO_Init+0x1bc>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a60      	ldr	r2, [pc, #384]	; (80011a8 <MX_GPIO_Init+0x1bc>)
 8001028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b5e      	ldr	r3, [pc, #376]	; (80011a8 <MX_GPIO_Init+0x1bc>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b5a      	ldr	r3, [pc, #360]	; (80011a8 <MX_GPIO_Init+0x1bc>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a59      	ldr	r2, [pc, #356]	; (80011a8 <MX_GPIO_Init+0x1bc>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b57      	ldr	r3, [pc, #348]	; (80011a8 <MX_GPIO_Init+0x1bc>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b53      	ldr	r3, [pc, #332]	; (80011a8 <MX_GPIO_Init+0x1bc>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a52      	ldr	r2, [pc, #328]	; (80011a8 <MX_GPIO_Init+0x1bc>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b50      	ldr	r3, [pc, #320]	; (80011a8 <MX_GPIO_Init+0x1bc>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	4b4c      	ldr	r3, [pc, #304]	; (80011a8 <MX_GPIO_Init+0x1bc>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a4b      	ldr	r2, [pc, #300]	; (80011a8 <MX_GPIO_Init+0x1bc>)
 800107c:	f043 0308 	orr.w	r3, r3, #8
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b49      	ldr	r3, [pc, #292]	; (80011a8 <MX_GPIO_Init+0x1bc>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_WP_GPIO_Port, SPI2_WP_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2101      	movs	r1, #1
 8001092:	4846      	ldr	r0, [pc, #280]	; (80011ac <MX_GPIO_Init+0x1c0>)
 8001094:	f001 f8a0 	bl	80021d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	f44f 41a1 	mov.w	r1, #20608	; 0x5080
 800109e:	4844      	ldr	r0, [pc, #272]	; (80011b0 <MX_GPIO_Init+0x1c4>)
 80010a0:	f001 f89a 	bl	80021d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI1_WP_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	f244 0104 	movw	r1, #16388	; 0x4004
 80010aa:	4842      	ldr	r0, [pc, #264]	; (80011b4 <MX_GPIO_Init+0x1c8>)
 80010ac:	f001 f894 	bl	80021d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_WP_Pin */
  GPIO_InitStruct.Pin = SPI2_WP_Pin;
 80010b0:	2301      	movs	r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_WP_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	4839      	ldr	r0, [pc, #228]	; (80011ac <MX_GPIO_Init+0x1c0>)
 80010c8:	f000 fec2 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010cc:	230c      	movs	r3, #12
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d8:	2303      	movs	r3, #3
 80010da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010dc:	2305      	movs	r3, #5
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4619      	mov	r1, r3
 80010e6:	4831      	ldr	r0, [pc, #196]	; (80011ac <MX_GPIO_Init+0x1c0>)
 80010e8:	f000 feb2 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : JMP_Flight_Pin */
  GPIO_InitStruct.Pin = JMP_Flight_Pin;
 80010ec:	2302      	movs	r3, #2
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010f4:	2302      	movs	r3, #2
 80010f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(JMP_Flight_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	482c      	ldr	r0, [pc, #176]	; (80011b0 <MX_GPIO_Init+0x1c4>)
 8001100:	f000 fea6 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800110e:	2301      	movs	r3, #1
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4824      	ldr	r0, [pc, #144]	; (80011b0 <MX_GPIO_Init+0x1c4>)
 800111e:	f000 fe97 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8001122:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800112c:	2302      	movs	r3, #2
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	481d      	ldr	r0, [pc, #116]	; (80011b0 <MX_GPIO_Init+0x1c4>)
 800113c:	f000 fe88 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_WP_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_WP_Pin|SPI1_CS_Pin;
 8001140:	f244 0304 	movw	r3, #16388	; 0x4004
 8001144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	2301      	movs	r3, #1
 8001148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800114a:	2301      	movs	r3, #1
 800114c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	4816      	ldr	r0, [pc, #88]	; (80011b4 <MX_GPIO_Init+0x1c8>)
 800115a:	f000 fe79 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800115e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001170:	2309      	movs	r3, #9
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	480f      	ldr	r0, [pc, #60]	; (80011b8 <MX_GPIO_Init+0x1cc>)
 800117c:	f000 fe68 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001180:	2308      	movs	r3, #8
 8001182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001190:	2305      	movs	r3, #5
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	4806      	ldr	r0, [pc, #24]	; (80011b4 <MX_GPIO_Init+0x1c8>)
 800119c:	f000 fe58 	bl	8001e50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	; 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40020c00 	.word	0x40020c00
 80011b8:	40020000 	.word	0x40020000

080011bc <clean_data_buffer>:

/* USER CODE BEGIN 4 */
void clean_data_buffer() {
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
    for (int i = 0; i < PAGE_SIZE; ++i) {
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	e007      	b.n	80011d8 <clean_data_buffer+0x1c>
        data_buffer[i] = 0xFF;  // Initialize each element to 0xFF
 80011c8:	4a08      	ldr	r2, [pc, #32]	; (80011ec <clean_data_buffer+0x30>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	22ff      	movs	r2, #255	; 0xff
 80011d0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < PAGE_SIZE; ++i) {
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3301      	adds	r3, #1
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2bff      	cmp	r3, #255	; 0xff
 80011dc:	ddf4      	ble.n	80011c8 <clean_data_buffer+0xc>
    }
}
 80011de:	bf00      	nop
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	200001f4 	.word	0x200001f4

080011f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f4:	b672      	cpsid	i
}
 80011f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <Error_Handler+0x8>
	...

080011fc <initialise_rtc_default>:
    .Month = RTC_MONTH_JANUARY, // Set default month (e.g., January)
    .Date = 1, // Set default day of the month
    .Year = 24 // Set default year (e.g., 2021)
};

void initialise_rtc_default(RTC_HandleTypeDef* hrtc) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	// Reset RTC on boot
	HAL_RTC_MspInit(hrtc); // Initialize RTC hardware
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f90d 	bl	8001424 <HAL_RTC_MspInit>
	HAL_RTC_SetTime(hrtc, &defaultTime, RTC_FORMAT_BIN); // Set default time
 800120a:	2200      	movs	r2, #0
 800120c:	4906      	ldr	r1, [pc, #24]	; (8001228 <initialise_rtc_default+0x2c>)
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f002 ff27 	bl	8004062 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(hrtc, &defaultDate, RTC_FORMAT_BIN); // Set default date
 8001214:	2200      	movs	r2, #0
 8001216:	4905      	ldr	r1, [pc, #20]	; (800122c <initialise_rtc_default+0x30>)
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f003 f81a 	bl	8004252 <HAL_RTC_SetDate>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200002fc 	.word	0x200002fc
 800122c:	20000014 	.word	0x20000014

08001230 <getTimestampMilliseconds>:

uint32_t getTimestampMilliseconds(RTC_HandleTypeDef* hrtc) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	; 0x30
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef rtcTime;
    RTC_DateTypeDef rtcDate;

    // Read RTC time and date
    HAL_RTC_GetTime(hrtc, &rtcTime, RTC_FORMAT_BIN);
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	2200      	movs	r2, #0
 800123e:	4619      	mov	r1, r3
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f002 ffa8 	bl	8004196 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(hrtc, &rtcDate, RTC_FORMAT_BIN);
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2200      	movs	r2, #0
 800124c:	4619      	mov	r1, r3
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f003 f883 	bl	800435a <HAL_RTC_GetDate>

    // Calculate timestamp in milliseconds
    uint32_t timestampSeconds = rtcTime.Seconds + rtcTime.Minutes * 60 + rtcTime.Hours * 3600;
 8001254:	7cbb      	ldrb	r3, [r7, #18]
 8001256:	4619      	mov	r1, r3
 8001258:	7c7b      	ldrb	r3, [r7, #17]
 800125a:	461a      	mov	r2, r3
 800125c:	4613      	mov	r3, r2
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	1a9b      	subs	r3, r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	18ca      	adds	r2, r1, r3
 8001266:	7c3b      	ldrb	r3, [r7, #16]
 8001268:	4619      	mov	r1, r3
 800126a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800126e:	fb01 f303 	mul.w	r3, r1, r3
 8001272:	4413      	add	r3, r2
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t timestampMilliseconds = timestampSeconds * 1000;
 8001276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800127c:	fb02 f303 	mul.w	r3, r2, r3
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
    float subsecondsFraction = (float)(rtcTime.SecondFraction - rtcTime.SubSeconds) / (rtcTime.SecondFraction + 1);
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	ee07 3a90 	vmov	s15, r3
 800128c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	3301      	adds	r3, #1
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800129c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012a0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    timestampMilliseconds += subsecondsFraction * 1000;
 80012a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a6:	ee07 3a90 	vmov	s15, r3
 80012aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80012b2:	eddf 6a08 	vldr	s13, [pc, #32]	; 80012d4 <getTimestampMilliseconds+0xa4>
 80012b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012c2:	ee17 3a90 	vmov	r3, s15
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28

    return timestampMilliseconds;
 80012c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3730      	adds	r7, #48	; 0x30
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	447a0000 	.word	0x447a0000

080012d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <HAL_MspInit+0x4c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	4a0f      	ldr	r2, [pc, #60]	; (8001324 <HAL_MspInit+0x4c>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ec:	6453      	str	r3, [r2, #68]	; 0x44
 80012ee:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <HAL_MspInit+0x4c>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <HAL_MspInit+0x4c>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	4a08      	ldr	r2, [pc, #32]	; (8001324 <HAL_MspInit+0x4c>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001308:	6413      	str	r3, [r2, #64]	; 0x40
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_MspInit+0x4c>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800

08001328 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08c      	sub	sp, #48	; 0x30
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a33      	ldr	r2, [pc, #204]	; (8001414 <HAL_I2C_MspInit+0xec>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d12d      	bne.n	80013a6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]
 800134e:	4b32      	ldr	r3, [pc, #200]	; (8001418 <HAL_I2C_MspInit+0xf0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a31      	ldr	r2, [pc, #196]	; (8001418 <HAL_I2C_MspInit+0xf0>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <HAL_I2C_MspInit+0xf0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	61bb      	str	r3, [r7, #24]
 8001364:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001366:	f44f 7340 	mov.w	r3, #768	; 0x300
 800136a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800136c:	2312      	movs	r3, #18
 800136e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001374:	2303      	movs	r3, #3
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001378:	2304      	movs	r3, #4
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	4826      	ldr	r0, [pc, #152]	; (800141c <HAL_I2C_MspInit+0xf4>)
 8001384:	f000 fd64 	bl	8001e50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <HAL_I2C_MspInit+0xf0>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	4a21      	ldr	r2, [pc, #132]	; (8001418 <HAL_I2C_MspInit+0xf0>)
 8001392:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001396:	6413      	str	r3, [r2, #64]	; 0x40
 8001398:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <HAL_I2C_MspInit+0xf0>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013a4:	e031      	b.n	800140a <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a1d      	ldr	r2, [pc, #116]	; (8001420 <HAL_I2C_MspInit+0xf8>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d12c      	bne.n	800140a <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <HAL_I2C_MspInit+0xf0>)
 80013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b8:	4a17      	ldr	r2, [pc, #92]	; (8001418 <HAL_I2C_MspInit+0xf0>)
 80013ba:	f043 0302 	orr.w	r3, r3, #2
 80013be:	6313      	str	r3, [r2, #48]	; 0x30
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_I2C_MspInit+0xf0>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d2:	2312      	movs	r3, #18
 80013d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013de:	2304      	movs	r3, #4
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4619      	mov	r1, r3
 80013e8:	480c      	ldr	r0, [pc, #48]	; (800141c <HAL_I2C_MspInit+0xf4>)
 80013ea:	f000 fd31 	bl	8001e50 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_I2C_MspInit+0xf0>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	4a08      	ldr	r2, [pc, #32]	; (8001418 <HAL_I2C_MspInit+0xf0>)
 80013f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_I2C_MspInit+0xf0>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
}
 800140a:	bf00      	nop
 800140c:	3730      	adds	r7, #48	; 0x30
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40005400 	.word	0x40005400
 8001418:	40023800 	.word	0x40023800
 800141c:	40020400 	.word	0x40020400
 8001420:	40005800 	.word	0x40005800

08001424 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08e      	sub	sp, #56	; 0x38
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	2230      	movs	r2, #48	; 0x30
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f005 faeb 	bl	8006a10 <memset>
  if(hrtc->Instance==RTC)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a0c      	ldr	r2, [pc, #48]	; (8001470 <HAL_RTC_MspInit+0x4c>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d111      	bne.n	8001468 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001444:	2320      	movs	r3, #32
 8001446:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800144c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	4618      	mov	r0, r3
 8001454:	f002 fbc2 	bl	8003bdc <HAL_RCCEx_PeriphCLKConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800145e:	f7ff fec7 	bl	80011f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <HAL_RTC_MspInit+0x50>)
 8001464:	2201      	movs	r2, #1
 8001466:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001468:	bf00      	nop
 800146a:	3738      	adds	r7, #56	; 0x38
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40002800 	.word	0x40002800
 8001474:	42470e3c 	.word	0x42470e3c

08001478 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a19      	ldr	r2, [pc, #100]	; (80014fc <HAL_SPI_MspInit+0x84>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d12b      	bne.n	80014f2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <HAL_SPI_MspInit+0x88>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	4a17      	ldr	r2, [pc, #92]	; (8001500 <HAL_SPI_MspInit+0x88>)
 80014a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014a8:	6453      	str	r3, [r2, #68]	; 0x44
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <HAL_SPI_MspInit+0x88>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <HAL_SPI_MspInit+0x88>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a10      	ldr	r2, [pc, #64]	; (8001500 <HAL_SPI_MspInit+0x88>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <HAL_SPI_MspInit+0x88>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014d2:	23e0      	movs	r3, #224	; 0xe0
 80014d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014e2:	2305      	movs	r3, #5
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	; (8001504 <HAL_SPI_MspInit+0x8c>)
 80014ee:	f000 fcaf 	bl	8001e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40013000 	.word	0x40013000
 8001500:	40023800 	.word	0x40023800
 8001504:	40020000 	.word	0x40020000

08001508 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <HAL_TIM_Base_MspInit+0x48>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d115      	bne.n	8001546 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <HAL_TIM_Base_MspInit+0x4c>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a0c      	ldr	r2, [pc, #48]	; (8001554 <HAL_TIM_Base_MspInit+0x4c>)
 8001524:	f043 0310 	orr.w	r3, r3, #16
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_TIM_Base_MspInit+0x4c>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	2036      	movs	r0, #54	; 0x36
 800153c:	f000 fbbf 	bl	8001cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001540:	2036      	movs	r0, #54	; 0x36
 8001542:	f000 fbd8 	bl	8001cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40001000 	.word	0x40001000
 8001554:	40023800 	.word	0x40023800

08001558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a1d      	ldr	r2, [pc, #116]	; (80015ec <HAL_UART_MspInit+0x94>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d133      	bne.n	80015e2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <HAL_UART_MspInit+0x98>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <HAL_UART_MspInit+0x98>)
 8001584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_UART_MspInit+0x98>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_UART_MspInit+0x98>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <HAL_UART_MspInit+0x98>)
 80015a0:	f043 0308 	orr.w	r3, r3, #8
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_UART_MspInit+0x98>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80015b2:	2360      	movs	r3, #96	; 0x60
 80015b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015be:	2303      	movs	r3, #3
 80015c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015c2:	2307      	movs	r3, #7
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	4809      	ldr	r0, [pc, #36]	; (80015f4 <HAL_UART_MspInit+0x9c>)
 80015ce:	f000 fc3f 	bl	8001e50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	2026      	movs	r0, #38	; 0x26
 80015d8:	f000 fb71 	bl	8001cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015dc:	2026      	movs	r0, #38	; 0x26
 80015de:	f000 fb8a 	bl	8001cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	; 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40004400 	.word	0x40004400
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020c00 	.word	0x40020c00

080015f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <NMI_Handler+0x4>

080015fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <HardFault_Handler+0x4>

08001604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <MemManage_Handler+0x4>

0800160a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <BusFault_Handler+0x4>

08001610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <UsageFault_Handler+0x4>

08001616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001644:	f000 fa40 	bl	8001ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}

0800164c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <USART2_IRQHandler+0x10>)
 8001652:	f004 fa65 	bl	8005b20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200001a8 	.word	0x200001a8

08001660 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001666:	482b      	ldr	r0, [pc, #172]	; (8001714 <TIM6_DAC_IRQHandler+0xb4>)
 8001668:	f003 fe49 	bl	80052fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800166c:	2180      	movs	r1, #128	; 0x80
 800166e:	482a      	ldr	r0, [pc, #168]	; (8001718 <TIM6_DAC_IRQHandler+0xb8>)
 8001670:	f000 fdcb 	bl	800220a <HAL_GPIO_TogglePin>

  uint8_t accel_data[6];
  readAccelerometer(accel_data, &hi2c1);
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	4929      	ldr	r1, [pc, #164]	; (800171c <TIM6_DAC_IRQHandler+0xbc>)
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff5b 	bl	8000534 <readAccelerometer>

  uint32_t time = getTimestampMilliseconds(&hrtc);
 800167e:	4828      	ldr	r0, [pc, #160]	; (8001720 <TIM6_DAC_IRQHandler+0xc0>)
 8001680:	f7ff fdd6 	bl	8001230 <getTimestampMilliseconds>
 8001684:	60f8      	str	r0, [r7, #12]

  // Store the time in the buffer
  if (byte_tracker < (PAGE_SIZE - READ_SIZE)) {
 8001686:	4b27      	ldr	r3, [pc, #156]	; (8001724 <TIM6_DAC_IRQHandler+0xc4>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	2bf5      	cmp	r3, #245	; 0xf5
 800168c:	d83d      	bhi.n	800170a <TIM6_DAC_IRQHandler+0xaa>
    data_buffer[byte_tracker + 0] = (uint8_t) ((time >> 24) & 0xFF); // Most significant byte (MSB)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	0e19      	lsrs	r1, r3, #24
 8001692:	4b24      	ldr	r3, [pc, #144]	; (8001724 <TIM6_DAC_IRQHandler+0xc4>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	b2c9      	uxtb	r1, r1
 800169a:	4b23      	ldr	r3, [pc, #140]	; (8001728 <TIM6_DAC_IRQHandler+0xc8>)
 800169c:	5499      	strb	r1, [r3, r2]
    data_buffer[byte_tracker + 1] = (uint8_t) ((time >> 16) & 0xFF);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	0c1a      	lsrs	r2, r3, #16
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <TIM6_DAC_IRQHandler+0xc4>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	b2d1      	uxtb	r1, r2
 80016aa:	4a1f      	ldr	r2, [pc, #124]	; (8001728 <TIM6_DAC_IRQHandler+0xc8>)
 80016ac:	54d1      	strb	r1, [r2, r3]
    data_buffer[byte_tracker + 2] = (uint8_t) ((time >> 8) & 0xFF);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	0a1a      	lsrs	r2, r3, #8
 80016b2:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <TIM6_DAC_IRQHandler+0xc4>)
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	3302      	adds	r3, #2
 80016b8:	b2d1      	uxtb	r1, r2
 80016ba:	4a1b      	ldr	r2, [pc, #108]	; (8001728 <TIM6_DAC_IRQHandler+0xc8>)
 80016bc:	54d1      	strb	r1, [r2, r3]
    data_buffer[byte_tracker + 3] = (uint8_t) (time & 0xFF); // Least significant byte (LSB)
 80016be:	4b19      	ldr	r3, [pc, #100]	; (8001724 <TIM6_DAC_IRQHandler+0xc4>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	3303      	adds	r3, #3
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	b2d1      	uxtb	r1, r2
 80016c8:	4a17      	ldr	r2, [pc, #92]	; (8001728 <TIM6_DAC_IRQHandler+0xc8>)
 80016ca:	54d1      	strb	r1, [r2, r3]

    uint8_t array_ptr = 4;
 80016cc:	2304      	movs	r3, #4
 80016ce:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 6; i++) {
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	e010      	b.n	80016f8 <TIM6_DAC_IRQHandler+0x98>
      data_buffer[byte_tracker + array_ptr] = accel_data[i];
 80016d6:	4b13      	ldr	r3, [pc, #76]	; (8001724 <TIM6_DAC_IRQHandler+0xc4>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	7dfb      	ldrb	r3, [r7, #23]
 80016de:	4413      	add	r3, r2
 80016e0:	1d39      	adds	r1, r7, #4
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	440a      	add	r2, r1
 80016e6:	7811      	ldrb	r1, [r2, #0]
 80016e8:	4a0f      	ldr	r2, [pc, #60]	; (8001728 <TIM6_DAC_IRQHandler+0xc8>)
 80016ea:	54d1      	strb	r1, [r2, r3]
      array_ptr += 1;
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
 80016ee:	3301      	adds	r3, #1
 80016f0:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 6; i++) {
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	3301      	adds	r3, #1
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	2b05      	cmp	r3, #5
 80016fc:	ddeb      	ble.n	80016d6 <TIM6_DAC_IRQHandler+0x76>
    }
    byte_tracker = byte_tracker + 10;
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <TIM6_DAC_IRQHandler+0xc4>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	330a      	adds	r3, #10
 8001704:	b29a      	uxth	r2, r3
 8001706:	4b07      	ldr	r3, [pc, #28]	; (8001724 <TIM6_DAC_IRQHandler+0xc4>)
 8001708:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000160 	.word	0x20000160
 8001718:	40020400 	.word	0x40020400
 800171c:	20000040 	.word	0x20000040
 8001720:	200000e8 	.word	0x200000e8
 8001724:	200002f8 	.word	0x200002f8
 8001728:	200001f4 	.word	0x200001f4

0800172c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b0ca      	sub	sp, #296	; 0x128
 8001730:	af00      	add	r7, sp, #0
 8001732:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001736:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800173a:	6018      	str	r0, [r3, #0]
	// Read the received data
	uint8_t received_data = huart2.Instance->DR;
 800173c:	4b73      	ldr	r3, [pc, #460]	; (800190c <HAL_UART_RxCpltCallback+0x1e0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	// Check if the received data matches the expected value (0x68 = 'h')
	if (received_data == 0x68) {
 8001746:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800174a:	2b68      	cmp	r3, #104	; 0x68
 800174c:	d112      	bne.n	8001774 <HAL_UART_RxCpltCallback+0x48>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);		// Activate the "write out" LED
 800174e:	2201      	movs	r2, #1
 8001750:	2180      	movs	r1, #128	; 0x80
 8001752:	486f      	ldr	r0, [pc, #444]	; (8001910 <HAL_UART_RxCpltCallback+0x1e4>)
 8001754:	f000 fd40 	bl	80021d8 <HAL_GPIO_WritePin>
		send_uart_string(huart, "**Heartbeat**\r\n");			// Transmit the data
 8001758:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800175c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001760:	496c      	ldr	r1, [pc, #432]	; (8001914 <HAL_UART_RxCpltCallback+0x1e8>)
 8001762:	6818      	ldr	r0, [r3, #0]
 8001764:	f000 f90b 	bl	800197e <send_uart_string>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 8001768:	2200      	movs	r2, #0
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	4868      	ldr	r0, [pc, #416]	; (8001910 <HAL_UART_RxCpltCallback+0x1e4>)
 800176e:	f000 fd33 	bl	80021d8 <HAL_GPIO_WritePin>
 8001772:	e0c1      	b.n	80018f8 <HAL_UART_RxCpltCallback+0x1cc>
	}

	// Check if the received data matches the expected value (0x65 = 'e')
	else if (received_data == 0x65) {
 8001774:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001778:	2b65      	cmp	r3, #101	; 0x65
 800177a:	d12d      	bne.n	80017d8 <HAL_UART_RxCpltCallback+0xac>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);		// Activate the "write out" LED
 800177c:	2201      	movs	r2, #1
 800177e:	2180      	movs	r1, #128	; 0x80
 8001780:	4863      	ldr	r0, [pc, #396]	; (8001910 <HAL_UART_RxCpltCallback+0x1e4>)
 8001782:	f000 fd29 	bl	80021d8 <HAL_GPIO_WritePin>
		if (erase_chip_spi(&hspi1) == HAL_OK) {
 8001786:	4864      	ldr	r0, [pc, #400]	; (8001918 <HAL_UART_RxCpltCallback+0x1ec>)
 8001788:	f7fe ffc4 	bl	8000714 <erase_chip_spi>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d114      	bne.n	80017bc <HAL_UART_RxCpltCallback+0x90>
			send_uart_string(huart, "Successful Chip Erase\r\n");
 8001792:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001796:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800179a:	4960      	ldr	r1, [pc, #384]	; (800191c <HAL_UART_RxCpltCallback+0x1f0>)
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	f000 f8ee 	bl	800197e <send_uart_string>
			next_blank_page = find_next_blank_page(&hspi1, huart, &end_of_flash);
 80017a2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017a6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017aa:	4a5d      	ldr	r2, [pc, #372]	; (8001920 <HAL_UART_RxCpltCallback+0x1f4>)
 80017ac:	6819      	ldr	r1, [r3, #0]
 80017ae:	485a      	ldr	r0, [pc, #360]	; (8001918 <HAL_UART_RxCpltCallback+0x1ec>)
 80017b0:	f7ff f8a0 	bl	80008f4 <find_next_blank_page>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4a5b      	ldr	r2, [pc, #364]	; (8001924 <HAL_UART_RxCpltCallback+0x1f8>)
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e007      	b.n	80017cc <HAL_UART_RxCpltCallback+0xa0>
		} else {
			send_uart_string(huart, "Error during chip erase. Please check the connection and try again.\r\n");
 80017bc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017c4:	4958      	ldr	r1, [pc, #352]	; (8001928 <HAL_UART_RxCpltCallback+0x1fc>)
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	f000 f8d9 	bl	800197e <send_uart_string>
		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 80017cc:	2200      	movs	r2, #0
 80017ce:	2180      	movs	r1, #128	; 0x80
 80017d0:	484f      	ldr	r0, [pc, #316]	; (8001910 <HAL_UART_RxCpltCallback+0x1e4>)
 80017d2:	f000 fd01 	bl	80021d8 <HAL_GPIO_WritePin>
 80017d6:	e08f      	b.n	80018f8 <HAL_UART_RxCpltCallback+0x1cc>
	}

	// Check if the received data matches the expected value (0x72 = 'r')
	else if (received_data == 0x72) {
 80017d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80017dc:	2b72      	cmp	r3, #114	; 0x72
 80017de:	d145      	bne.n	800186c <HAL_UART_RxCpltCallback+0x140>
		uint32_t num_of_pages = next_blank_page;
 80017e0:	4b50      	ldr	r3, [pc, #320]	; (8001924 <HAL_UART_RxCpltCallback+0x1f8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		if(num_of_pages == 0) {
 80017e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d103      	bne.n	80017f8 <HAL_UART_RxCpltCallback+0xcc>
			num_of_pages = PAGE_SIZE;
 80017f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		}
		num_of_pages = num_of_pages/PAGE_SIZE;
 80017f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		uint32_t address = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);		// Activate the "write out" LED
 8001808:	2201      	movs	r2, #1
 800180a:	2180      	movs	r1, #128	; 0x80
 800180c:	4840      	ldr	r0, [pc, #256]	; (8001910 <HAL_UART_RxCpltCallback+0x1e4>)
 800180e:	f000 fce3 	bl	80021d8 <HAL_GPIO_WritePin>

		for (int i = 0; i < (num_of_pages); i++) {
 8001812:	2300      	movs	r3, #0
 8001814:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001818:	e01c      	b.n	8001854 <HAL_UART_RxCpltCallback+0x128>
			uint8_t page[PAGE_SIZE];
			read_page_spi(page, &hspi1, address);//
 800181a:	f107 030c 	add.w	r3, r7, #12
 800181e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001822:	493d      	ldr	r1, [pc, #244]	; (8001918 <HAL_UART_RxCpltCallback+0x1ec>)
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff f8eb 	bl	8000a00 <read_page_spi>
			uart_transmit_page(huart, page);						// Transmit the data//
 800182a:	f107 020c 	add.w	r2, r7, #12
 800182e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001832:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001836:	4611      	mov	r1, r2
 8001838:	6818      	ldr	r0, [r3, #0]
 800183a:	f000 f88f 	bl	800195c <uart_transmit_page>
			address += PAGE_SIZE;
 800183e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001842:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001846:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		for (int i = 0; i < (num_of_pages); i++) {
 800184a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800184e:	3301      	adds	r3, #1
 8001850:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001854:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001858:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800185c:	429a      	cmp	r2, r3
 800185e:	d8dc      	bhi.n	800181a <HAL_UART_RxCpltCallback+0xee>
		}

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 8001860:	2200      	movs	r2, #0
 8001862:	2180      	movs	r1, #128	; 0x80
 8001864:	482a      	ldr	r0, [pc, #168]	; (8001910 <HAL_UART_RxCpltCallback+0x1e4>)
 8001866:	f000 fcb7 	bl	80021d8 <HAL_GPIO_WritePin>
 800186a:	e045      	b.n	80018f8 <HAL_UART_RxCpltCallback+0x1cc>

		next_blank_page += PAGE_SIZE;
	}
************************************************************************************/
	// Read Accelerometer CTRL1 (data_rx = "c")
	else if (received_data == 0x63) {
 800186c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001870:	2b63      	cmp	r3, #99	; 0x63
 8001872:	d10e      	bne.n	8001892 <HAL_UART_RxCpltCallback+0x166>
		uint8_t ctrl = readAccel_whoami(&hi2c1);
 8001874:	482d      	ldr	r0, [pc, #180]	; (800192c <HAL_UART_RxCpltCallback+0x200>)
 8001876:	f7fe fec9 	bl	800060c <readAccel_whoami>
 800187a:	4603      	mov	r3, r0
 800187c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		HAL_UART_Transmit(&huart2, &ctrl, 1, HAL_MAX_DELAY);
 8001880:	f207 1115 	addw	r1, r7, #277	; 0x115
 8001884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001888:	2201      	movs	r2, #1
 800188a:	4820      	ldr	r0, [pc, #128]	; (800190c <HAL_UART_RxCpltCallback+0x1e0>)
 800188c:	f003 ffe6 	bl	800585c <HAL_UART_Transmit>
 8001890:	e032      	b.n	80018f8 <HAL_UART_RxCpltCallback+0x1cc>
	}

	// Read the accelerometer and print to the UART (data_rx = "a")
	else if (received_data == 0x61) {
 8001892:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001896:	2b61      	cmp	r3, #97	; 0x61
 8001898:	d11d      	bne.n	80018d6 <HAL_UART_RxCpltCallback+0x1aa>
		uint8_t readings[6];
		readAccelerometer(readings, &hi2c1);
 800189a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800189e:	4923      	ldr	r1, [pc, #140]	; (800192c <HAL_UART_RxCpltCallback+0x200>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe47 	bl	8000534 <readAccelerometer>
		for (int i = 0; i < 6; i++) {
 80018a6:	2300      	movs	r3, #0
 80018a8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80018ac:	e00e      	b.n	80018cc <HAL_UART_RxCpltCallback+0x1a0>
			send_uart_hex(&huart2, readings[i]);
 80018ae:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80018b2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80018b6:	4413      	add	r3, r2
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	4619      	mov	r1, r3
 80018bc:	4813      	ldr	r0, [pc, #76]	; (800190c <HAL_UART_RxCpltCallback+0x1e0>)
 80018be:	f000 f872 	bl	80019a6 <send_uart_hex>
		for (int i = 0; i < 6; i++) {
 80018c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80018c6:	3301      	adds	r3, #1
 80018c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80018cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80018d0:	2b05      	cmp	r3, #5
 80018d2:	ddec      	ble.n	80018ae <HAL_UART_RxCpltCallback+0x182>
 80018d4:	e010      	b.n	80018f8 <HAL_UART_RxCpltCallback+0x1cc>
		}
	}

	// Read the temp sensor and print to the UART (data_rx = "t")
	else if (received_data == 0x74) {
 80018d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80018da:	2b74      	cmp	r3, #116	; 0x74
 80018dc:	d10c      	bne.n	80018f8 <HAL_UART_RxCpltCallback+0x1cc>
		uint8_t reading = readBME280_id_reg(&hi2c2, 0);
 80018de:	2100      	movs	r1, #0
 80018e0:	4813      	ldr	r0, [pc, #76]	; (8001930 <HAL_UART_RxCpltCallback+0x204>)
 80018e2:	f7fe fef7 	bl	80006d4 <readBME280_id_reg>
 80018e6:	4603      	mov	r3, r0
 80018e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		send_uart_hex(&huart2, reading);
 80018ec:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80018f0:	4619      	mov	r1, r3
 80018f2:	4806      	ldr	r0, [pc, #24]	; (800190c <HAL_UART_RxCpltCallback+0x1e0>)
 80018f4:	f000 f857 	bl	80019a6 <send_uart_hex>
	}


	HAL_UART_Receive_IT(&huart2, UARTRxData, 1);
 80018f8:	2201      	movs	r2, #1
 80018fa:	490e      	ldr	r1, [pc, #56]	; (8001934 <HAL_UART_RxCpltCallback+0x208>)
 80018fc:	4803      	ldr	r0, [pc, #12]	; (800190c <HAL_UART_RxCpltCallback+0x1e0>)
 80018fe:	f004 f838 	bl	8005972 <HAL_UART_Receive_IT>
}
 8001902:	bf00      	nop
 8001904:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	200001a8 	.word	0x200001a8
 8001910:	40020400 	.word	0x40020400
 8001914:	08006a80 	.word	0x08006a80
 8001918:	20000108 	.word	0x20000108
 800191c:	08006a90 	.word	0x08006a90
 8001920:	200002fa 	.word	0x200002fa
 8001924:	200002f4 	.word	0x200002f4
 8001928:	08006aa8 	.word	0x08006aa8
 800192c:	20000040 	.word	0x20000040
 8001930:	20000094 	.word	0x20000094
 8001934:	200001f0 	.word	0x200001f0

08001938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <SystemInit+0x20>)
 800193e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001942:	4a05      	ldr	r2, [pc, #20]	; (8001958 <SystemInit+0x20>)
 8001944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <uart_transmit_page>:

#include "uart_transmit.h"
/**
 * Transmit one single page over the UART interface
 */
void uart_transmit_page(UART_HandleTypeDef *huart, uint8_t page[PAGE_SIZE]) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, page, PAGE_SIZE, HAL_MAX_DELAY);
 8001966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800196a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800196e:	6839      	ldr	r1, [r7, #0]
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f003 ff73 	bl	800585c <HAL_UART_Transmit>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <send_uart_string>:

void send_uart_string(UART_HandleTypeDef *huart, const char *str) {
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001988:	6838      	ldr	r0, [r7, #0]
 800198a:	f7fe fc2f 	bl	80001ec <strlen>
 800198e:	4603      	mov	r3, r0
 8001990:	b29a      	uxth	r2, r3
 8001992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001996:	6839      	ldr	r1, [r7, #0]
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f003 ff5f 	bl	800585c <HAL_UART_Transmit>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <send_uart_hex>:
	// Call the send_uart_string function to send the value to UART
	send_uart_string(huart, value_str);
	send_uart_string(huart, "\r\n");
}

void send_uart_hex(UART_HandleTypeDef *huart, uint8_t value) {
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	460b      	mov	r3, r1
 80019b0:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[1];
	buffer[0] = value;
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(huart, buffer, 1, HAL_MAX_DELAY);
 80019b6:	f107 010c 	add.w	r1, r7, #12
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019be:	2201      	movs	r2, #1
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f003 ff4b 	bl	800585c <HAL_UART_Transmit>
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019d4:	f7ff ffb0 	bl	8001938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019d8:	480c      	ldr	r0, [pc, #48]	; (8001a0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019da:	490d      	ldr	r1, [pc, #52]	; (8001a10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019dc:	4a0d      	ldr	r2, [pc, #52]	; (8001a14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e0:	e002      	b.n	80019e8 <LoopCopyDataInit>

080019e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e6:	3304      	adds	r3, #4

080019e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019ec:	d3f9      	bcc.n	80019e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ee:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019f0:	4c0a      	ldr	r4, [pc, #40]	; (8001a1c <LoopFillZerobss+0x22>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f4:	e001      	b.n	80019fa <LoopFillZerobss>

080019f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f8:	3204      	adds	r2, #4

080019fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019fc:	d3fb      	bcc.n	80019f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019fe:	f005 f80f 	bl	8006a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a02:	f7ff f897 	bl	8000b34 <main>
  bx  lr    
 8001a06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a08:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a10:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001a14:	08006b18 	.word	0x08006b18
  ldr r2, =_sbss
 8001a18:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001a1c:	20000314 	.word	0x20000314

08001a20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a20:	e7fe      	b.n	8001a20 <ADC_IRQHandler>
	...

08001a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <HAL_Init+0x40>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <HAL_Init+0x40>)
 8001a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_Init+0x40>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <HAL_Init+0x40>)
 8001a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <HAL_Init+0x40>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <HAL_Init+0x40>)
 8001a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	f000 f92b 	bl	8001ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a52:	200f      	movs	r0, #15
 8001a54:	f000 f808 	bl	8001a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a58:	f7ff fc3e 	bl	80012d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023c00 	.word	0x40023c00

08001a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_InitTick+0x54>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_InitTick+0x58>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 f943 	bl	8001d12 <HAL_SYSTICK_Config>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00e      	b.n	8001ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b0f      	cmp	r3, #15
 8001a9a:	d80a      	bhi.n	8001ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001aa4:	f000 f90b 	bl	8001cbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa8:	4a06      	ldr	r2, [pc, #24]	; (8001ac4 <HAL_InitTick+0x5c>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e000      	b.n	8001ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000018 	.word	0x20000018
 8001ac0:	20000020 	.word	0x20000020
 8001ac4:	2000001c 	.word	0x2000001c

08001ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_IncTick+0x20>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_IncTick+0x24>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	4a04      	ldr	r2, [pc, #16]	; (8001aec <HAL_IncTick+0x24>)
 8001ada:	6013      	str	r3, [r2, #0]
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	20000020 	.word	0x20000020
 8001aec:	20000310 	.word	0x20000310

08001af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return uwTick;
 8001af4:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <HAL_GetTick+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000310 	.word	0x20000310

08001b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b24:	4013      	ands	r3, r2
 8001b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3a:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	60d3      	str	r3, [r2, #12]
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <__NVIC_GetPriorityGrouping+0x18>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	f003 0307 	and.w	r3, r3, #7
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	db0b      	blt.n	8001b96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	f003 021f 	and.w	r2, r3, #31
 8001b84:	4907      	ldr	r1, [pc, #28]	; (8001ba4 <__NVIC_EnableIRQ+0x38>)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	095b      	lsrs	r3, r3, #5
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000e100 	.word	0xe000e100

08001ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	6039      	str	r1, [r7, #0]
 8001bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	db0a      	blt.n	8001bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	490c      	ldr	r1, [pc, #48]	; (8001bf4 <__NVIC_SetPriority+0x4c>)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	0112      	lsls	r2, r2, #4
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	440b      	add	r3, r1
 8001bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd0:	e00a      	b.n	8001be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4908      	ldr	r1, [pc, #32]	; (8001bf8 <__NVIC_SetPriority+0x50>)
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	3b04      	subs	r3, #4
 8001be0:	0112      	lsls	r2, r2, #4
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	440b      	add	r3, r1
 8001be6:	761a      	strb	r2, [r3, #24]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000e100 	.word	0xe000e100
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b089      	sub	sp, #36	; 0x24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f1c3 0307 	rsb	r3, r3, #7
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	bf28      	it	cs
 8001c1a:	2304      	movcs	r3, #4
 8001c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3304      	adds	r3, #4
 8001c22:	2b06      	cmp	r3, #6
 8001c24:	d902      	bls.n	8001c2c <NVIC_EncodePriority+0x30>
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3b03      	subs	r3, #3
 8001c2a:	e000      	b.n	8001c2e <NVIC_EncodePriority+0x32>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	401a      	ands	r2, r3
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4e:	43d9      	mvns	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c54:	4313      	orrs	r3, r2
         );
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3724      	adds	r7, #36	; 0x24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c74:	d301      	bcc.n	8001c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c76:	2301      	movs	r3, #1
 8001c78:	e00f      	b.n	8001c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <SysTick_Config+0x40>)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c82:	210f      	movs	r1, #15
 8001c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c88:	f7ff ff8e 	bl	8001ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <SysTick_Config+0x40>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c92:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <SysTick_Config+0x40>)
 8001c94:	2207      	movs	r2, #7
 8001c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	e000e010 	.word	0xe000e010

08001ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ff29 	bl	8001b08 <__NVIC_SetPriorityGrouping>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
 8001cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd0:	f7ff ff3e 	bl	8001b50 <__NVIC_GetPriorityGrouping>
 8001cd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	68b9      	ldr	r1, [r7, #8]
 8001cda:	6978      	ldr	r0, [r7, #20]
 8001cdc:	f7ff ff8e 	bl	8001bfc <NVIC_EncodePriority>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff5d 	bl	8001ba8 <__NVIC_SetPriority>
}
 8001cee:	bf00      	nop
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff31 	bl	8001b6c <__NVIC_EnableIRQ>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ffa2 	bl	8001c64 <SysTick_Config>
 8001d20:	4603      	mov	r3, r0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d36:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d38:	f7ff feda 	bl	8001af0 <HAL_GetTick>
 8001d3c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d008      	beq.n	8001d5c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2280      	movs	r2, #128	; 0x80
 8001d4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e052      	b.n	8001e02 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0216 	bic.w	r2, r2, #22
 8001d6a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	695a      	ldr	r2, [r3, #20]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d7a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d103      	bne.n	8001d8c <HAL_DMA_Abort+0x62>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d007      	beq.n	8001d9c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0208 	bic.w	r2, r2, #8
 8001d9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0201 	bic.w	r2, r2, #1
 8001daa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dac:	e013      	b.n	8001dd6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dae:	f7ff fe9f 	bl	8001af0 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b05      	cmp	r3, #5
 8001dba:	d90c      	bls.n	8001dd6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e015      	b.n	8001e02 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1e4      	bne.n	8001dae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de8:	223f      	movs	r2, #63	; 0x3f
 8001dea:	409a      	lsls	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d004      	beq.n	8001e28 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2280      	movs	r2, #128	; 0x80
 8001e22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e00c      	b.n	8001e42 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2205      	movs	r2, #5
 8001e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0201 	bic.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b089      	sub	sp, #36	; 0x24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
 8001e6a:	e177      	b.n	800215c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	f040 8166 	bne.w	8002156 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d005      	beq.n	8001ea2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d130      	bne.n	8001f04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	2203      	movs	r2, #3
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ed8:	2201      	movs	r2, #1
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	f003 0201 	and.w	r2, r3, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d017      	beq.n	8001f40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d123      	bne.n	8001f94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	08da      	lsrs	r2, r3, #3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3208      	adds	r2, #8
 8001f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	220f      	movs	r2, #15
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	08da      	lsrs	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3208      	adds	r2, #8
 8001f8e:	69b9      	ldr	r1, [r7, #24]
 8001f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0203 	and.w	r2, r3, #3
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 80c0 	beq.w	8002156 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	4b66      	ldr	r3, [pc, #408]	; (8002174 <HAL_GPIO_Init+0x324>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	4a65      	ldr	r2, [pc, #404]	; (8002174 <HAL_GPIO_Init+0x324>)
 8001fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe6:	4b63      	ldr	r3, [pc, #396]	; (8002174 <HAL_GPIO_Init+0x324>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ff2:	4a61      	ldr	r2, [pc, #388]	; (8002178 <HAL_GPIO_Init+0x328>)
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	220f      	movs	r2, #15
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a58      	ldr	r2, [pc, #352]	; (800217c <HAL_GPIO_Init+0x32c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d037      	beq.n	800208e <HAL_GPIO_Init+0x23e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a57      	ldr	r2, [pc, #348]	; (8002180 <HAL_GPIO_Init+0x330>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d031      	beq.n	800208a <HAL_GPIO_Init+0x23a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a56      	ldr	r2, [pc, #344]	; (8002184 <HAL_GPIO_Init+0x334>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d02b      	beq.n	8002086 <HAL_GPIO_Init+0x236>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a55      	ldr	r2, [pc, #340]	; (8002188 <HAL_GPIO_Init+0x338>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d025      	beq.n	8002082 <HAL_GPIO_Init+0x232>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a54      	ldr	r2, [pc, #336]	; (800218c <HAL_GPIO_Init+0x33c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d01f      	beq.n	800207e <HAL_GPIO_Init+0x22e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a53      	ldr	r2, [pc, #332]	; (8002190 <HAL_GPIO_Init+0x340>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d019      	beq.n	800207a <HAL_GPIO_Init+0x22a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a52      	ldr	r2, [pc, #328]	; (8002194 <HAL_GPIO_Init+0x344>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d013      	beq.n	8002076 <HAL_GPIO_Init+0x226>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a51      	ldr	r2, [pc, #324]	; (8002198 <HAL_GPIO_Init+0x348>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00d      	beq.n	8002072 <HAL_GPIO_Init+0x222>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a50      	ldr	r2, [pc, #320]	; (800219c <HAL_GPIO_Init+0x34c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d007      	beq.n	800206e <HAL_GPIO_Init+0x21e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a4f      	ldr	r2, [pc, #316]	; (80021a0 <HAL_GPIO_Init+0x350>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d101      	bne.n	800206a <HAL_GPIO_Init+0x21a>
 8002066:	2309      	movs	r3, #9
 8002068:	e012      	b.n	8002090 <HAL_GPIO_Init+0x240>
 800206a:	230a      	movs	r3, #10
 800206c:	e010      	b.n	8002090 <HAL_GPIO_Init+0x240>
 800206e:	2308      	movs	r3, #8
 8002070:	e00e      	b.n	8002090 <HAL_GPIO_Init+0x240>
 8002072:	2307      	movs	r3, #7
 8002074:	e00c      	b.n	8002090 <HAL_GPIO_Init+0x240>
 8002076:	2306      	movs	r3, #6
 8002078:	e00a      	b.n	8002090 <HAL_GPIO_Init+0x240>
 800207a:	2305      	movs	r3, #5
 800207c:	e008      	b.n	8002090 <HAL_GPIO_Init+0x240>
 800207e:	2304      	movs	r3, #4
 8002080:	e006      	b.n	8002090 <HAL_GPIO_Init+0x240>
 8002082:	2303      	movs	r3, #3
 8002084:	e004      	b.n	8002090 <HAL_GPIO_Init+0x240>
 8002086:	2302      	movs	r3, #2
 8002088:	e002      	b.n	8002090 <HAL_GPIO_Init+0x240>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_GPIO_Init+0x240>
 800208e:	2300      	movs	r3, #0
 8002090:	69fa      	ldr	r2, [r7, #28]
 8002092:	f002 0203 	and.w	r2, r2, #3
 8002096:	0092      	lsls	r2, r2, #2
 8002098:	4093      	lsls	r3, r2
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020a0:	4935      	ldr	r1, [pc, #212]	; (8002178 <HAL_GPIO_Init+0x328>)
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	3302      	adds	r3, #2
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ae:	4b3d      	ldr	r3, [pc, #244]	; (80021a4 <HAL_GPIO_Init+0x354>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020d2:	4a34      	ldr	r2, [pc, #208]	; (80021a4 <HAL_GPIO_Init+0x354>)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020d8:	4b32      	ldr	r3, [pc, #200]	; (80021a4 <HAL_GPIO_Init+0x354>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020fc:	4a29      	ldr	r2, [pc, #164]	; (80021a4 <HAL_GPIO_Init+0x354>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002102:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <HAL_GPIO_Init+0x354>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002126:	4a1f      	ldr	r2, [pc, #124]	; (80021a4 <HAL_GPIO_Init+0x354>)
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_GPIO_Init+0x354>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002150:	4a14      	ldr	r2, [pc, #80]	; (80021a4 <HAL_GPIO_Init+0x354>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3301      	adds	r3, #1
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	2b0f      	cmp	r3, #15
 8002160:	f67f ae84 	bls.w	8001e6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	3724      	adds	r7, #36	; 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800
 8002178:	40013800 	.word	0x40013800
 800217c:	40020000 	.word	0x40020000
 8002180:	40020400 	.word	0x40020400
 8002184:	40020800 	.word	0x40020800
 8002188:	40020c00 	.word	0x40020c00
 800218c:	40021000 	.word	0x40021000
 8002190:	40021400 	.word	0x40021400
 8002194:	40021800 	.word	0x40021800
 8002198:	40021c00 	.word	0x40021c00
 800219c:	40022000 	.word	0x40022000
 80021a0:	40022400 	.word	0x40022400
 80021a4:	40013c00 	.word	0x40013c00

080021a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	887b      	ldrh	r3, [r7, #2]
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021c0:	2301      	movs	r3, #1
 80021c2:	73fb      	strb	r3, [r7, #15]
 80021c4:	e001      	b.n	80021ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021c6:	2300      	movs	r3, #0
 80021c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	807b      	strh	r3, [r7, #2]
 80021e4:	4613      	mov	r3, r2
 80021e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e8:	787b      	ldrb	r3, [r7, #1]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ee:	887a      	ldrh	r2, [r7, #2]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021f4:	e003      	b.n	80021fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021f6:	887b      	ldrh	r3, [r7, #2]
 80021f8:	041a      	lsls	r2, r3, #16
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	619a      	str	r2, [r3, #24]
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800220a:	b480      	push	{r7}
 800220c:	b085      	sub	sp, #20
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	460b      	mov	r3, r1
 8002214:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800221c:	887a      	ldrh	r2, [r7, #2]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4013      	ands	r3, r2
 8002222:	041a      	lsls	r2, r3, #16
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	43d9      	mvns	r1, r3
 8002228:	887b      	ldrh	r3, [r7, #2]
 800222a:	400b      	ands	r3, r1
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	619a      	str	r2, [r3, #24]
}
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e12b      	b.n	80024aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff f85e 	bl	8001328 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2224      	movs	r2, #36	; 0x24
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002292:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022a4:	f001 fc72 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 80022a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4a81      	ldr	r2, [pc, #516]	; (80024b4 <HAL_I2C_Init+0x274>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d807      	bhi.n	80022c4 <HAL_I2C_Init+0x84>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4a80      	ldr	r2, [pc, #512]	; (80024b8 <HAL_I2C_Init+0x278>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	bf94      	ite	ls
 80022bc:	2301      	movls	r3, #1
 80022be:	2300      	movhi	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	e006      	b.n	80022d2 <HAL_I2C_Init+0x92>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4a7d      	ldr	r2, [pc, #500]	; (80024bc <HAL_I2C_Init+0x27c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	bf94      	ite	ls
 80022cc:	2301      	movls	r3, #1
 80022ce:	2300      	movhi	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e0e7      	b.n	80024aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4a78      	ldr	r2, [pc, #480]	; (80024c0 <HAL_I2C_Init+0x280>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	0c9b      	lsrs	r3, r3, #18
 80022e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	4a6a      	ldr	r2, [pc, #424]	; (80024b4 <HAL_I2C_Init+0x274>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d802      	bhi.n	8002314 <HAL_I2C_Init+0xd4>
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	3301      	adds	r3, #1
 8002312:	e009      	b.n	8002328 <HAL_I2C_Init+0xe8>
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800231a:	fb02 f303 	mul.w	r3, r2, r3
 800231e:	4a69      	ldr	r2, [pc, #420]	; (80024c4 <HAL_I2C_Init+0x284>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	099b      	lsrs	r3, r3, #6
 8002326:	3301      	adds	r3, #1
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	430b      	orrs	r3, r1
 800232e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800233a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	495c      	ldr	r1, [pc, #368]	; (80024b4 <HAL_I2C_Init+0x274>)
 8002344:	428b      	cmp	r3, r1
 8002346:	d819      	bhi.n	800237c <HAL_I2C_Init+0x13c>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1e59      	subs	r1, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	fbb1 f3f3 	udiv	r3, r1, r3
 8002356:	1c59      	adds	r1, r3, #1
 8002358:	f640 73fc 	movw	r3, #4092	; 0xffc
 800235c:	400b      	ands	r3, r1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_I2C_Init+0x138>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1e59      	subs	r1, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002370:	3301      	adds	r3, #1
 8002372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002376:	e051      	b.n	800241c <HAL_I2C_Init+0x1dc>
 8002378:	2304      	movs	r3, #4
 800237a:	e04f      	b.n	800241c <HAL_I2C_Init+0x1dc>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d111      	bne.n	80023a8 <HAL_I2C_Init+0x168>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1e58      	subs	r0, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	440b      	add	r3, r1
 8002392:	fbb0 f3f3 	udiv	r3, r0, r3
 8002396:	3301      	adds	r3, #1
 8002398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	e012      	b.n	80023ce <HAL_I2C_Init+0x18e>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1e58      	subs	r0, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6859      	ldr	r1, [r3, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	0099      	lsls	r1, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80023be:	3301      	adds	r3, #1
 80023c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf0c      	ite	eq
 80023c8:	2301      	moveq	r3, #1
 80023ca:	2300      	movne	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_I2C_Init+0x196>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e022      	b.n	800241c <HAL_I2C_Init+0x1dc>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10e      	bne.n	80023fc <HAL_I2C_Init+0x1bc>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1e58      	subs	r0, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6859      	ldr	r1, [r3, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	440b      	add	r3, r1
 80023ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f0:	3301      	adds	r3, #1
 80023f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023fa:	e00f      	b.n	800241c <HAL_I2C_Init+0x1dc>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1e58      	subs	r0, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	0099      	lsls	r1, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002412:	3301      	adds	r3, #1
 8002414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	6809      	ldr	r1, [r1, #0]
 8002420:	4313      	orrs	r3, r2
 8002422:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69da      	ldr	r2, [r3, #28]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800244a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6911      	ldr	r1, [r2, #16]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68d2      	ldr	r2, [r2, #12]
 8002456:	4311      	orrs	r1, r2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	430b      	orrs	r3, r1
 800245e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2220      	movs	r2, #32
 8002496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	000186a0 	.word	0x000186a0
 80024b8:	001e847f 	.word	0x001e847f
 80024bc:	003d08ff 	.word	0x003d08ff
 80024c0:	431bde83 	.word	0x431bde83
 80024c4:	10624dd3 	.word	0x10624dd3

080024c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	607a      	str	r2, [r7, #4]
 80024d2:	461a      	mov	r2, r3
 80024d4:	460b      	mov	r3, r1
 80024d6:	817b      	strh	r3, [r7, #10]
 80024d8:	4613      	mov	r3, r2
 80024da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024dc:	f7ff fb08 	bl	8001af0 <HAL_GetTick>
 80024e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	f040 80e0 	bne.w	80026b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	2319      	movs	r3, #25
 80024f6:	2201      	movs	r2, #1
 80024f8:	4970      	ldr	r1, [pc, #448]	; (80026bc <HAL_I2C_Master_Transmit+0x1f4>)
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 fc64 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002506:	2302      	movs	r3, #2
 8002508:	e0d3      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_I2C_Master_Transmit+0x50>
 8002514:	2302      	movs	r3, #2
 8002516:	e0cc      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x1ea>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b01      	cmp	r3, #1
 800252c:	d007      	beq.n	800253e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 0201 	orr.w	r2, r2, #1
 800253c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800254c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2221      	movs	r2, #33	; 0x21
 8002552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2210      	movs	r2, #16
 800255a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	893a      	ldrh	r2, [r7, #8]
 800256e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4a50      	ldr	r2, [pc, #320]	; (80026c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800257e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002580:	8979      	ldrh	r1, [r7, #10]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	6a3a      	ldr	r2, [r7, #32]
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 face 	bl	8002b28 <I2C_MasterRequestWrite>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e08d      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025ac:	e066      	b.n	800267c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	6a39      	ldr	r1, [r7, #32]
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 fd22 	bl	8002ffc <I2C_WaitOnTXEFlagUntilTimeout>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00d      	beq.n	80025da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d107      	bne.n	80025d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e06b      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	781a      	ldrb	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002602:	3b01      	subs	r3, #1
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b04      	cmp	r3, #4
 8002616:	d11b      	bne.n	8002650 <HAL_I2C_Master_Transmit+0x188>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261c:	2b00      	cmp	r3, #0
 800261e:	d017      	beq.n	8002650 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	781a      	ldrb	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	6a39      	ldr	r1, [r7, #32]
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 fd19 	bl	800308c <I2C_WaitOnBTFFlagUntilTimeout>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00d      	beq.n	800267c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	2b04      	cmp	r3, #4
 8002666:	d107      	bne.n	8002678 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002676:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e01a      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002680:	2b00      	cmp	r3, #0
 8002682:	d194      	bne.n	80025ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	e000      	b.n	80026b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026b0:	2302      	movs	r3, #2
  }
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	00100002 	.word	0x00100002
 80026c0:	ffff0000 	.word	0xffff0000

080026c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08c      	sub	sp, #48	; 0x30
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	461a      	mov	r2, r3
 80026d0:	460b      	mov	r3, r1
 80026d2:	817b      	strh	r3, [r7, #10]
 80026d4:	4613      	mov	r3, r2
 80026d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026d8:	f7ff fa0a 	bl	8001af0 <HAL_GetTick>
 80026dc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b20      	cmp	r3, #32
 80026e8:	f040 8217 	bne.w	8002b1a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	2319      	movs	r3, #25
 80026f2:	2201      	movs	r2, #1
 80026f4:	497c      	ldr	r1, [pc, #496]	; (80028e8 <HAL_I2C_Master_Receive+0x224>)
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 fb66 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002702:	2302      	movs	r3, #2
 8002704:	e20a      	b.n	8002b1c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_I2C_Master_Receive+0x50>
 8002710:	2302      	movs	r3, #2
 8002712:	e203      	b.n	8002b1c <HAL_I2C_Master_Receive+0x458>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b01      	cmp	r3, #1
 8002728:	d007      	beq.n	800273a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0201 	orr.w	r2, r2, #1
 8002738:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002748:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2222      	movs	r2, #34	; 0x22
 800274e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2210      	movs	r2, #16
 8002756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	893a      	ldrh	r2, [r7, #8]
 800276a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002770:	b29a      	uxth	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4a5c      	ldr	r2, [pc, #368]	; (80028ec <HAL_I2C_Master_Receive+0x228>)
 800277a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800277c:	8979      	ldrh	r1, [r7, #10]
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 fa52 	bl	8002c2c <I2C_MasterRequestRead>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e1c4      	b.n	8002b1c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002796:	2b00      	cmp	r3, #0
 8002798:	d113      	bne.n	80027c2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279a:	2300      	movs	r3, #0
 800279c:	623b      	str	r3, [r7, #32]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	623b      	str	r3, [r7, #32]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	623b      	str	r3, [r7, #32]
 80027ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	e198      	b.n	8002af4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d11b      	bne.n	8002802 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	61fb      	str	r3, [r7, #28]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	61fb      	str	r3, [r7, #28]
 80027ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	e178      	b.n	8002af4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002806:	2b02      	cmp	r3, #2
 8002808:	d11b      	bne.n	8002842 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002818:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002828:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	61bb      	str	r3, [r7, #24]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	e158      	b.n	8002af4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002850:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002868:	e144      	b.n	8002af4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286e:	2b03      	cmp	r3, #3
 8002870:	f200 80f1 	bhi.w	8002a56 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002878:	2b01      	cmp	r3, #1
 800287a:	d123      	bne.n	80028c4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800287c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 fc4b 	bl	800311c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e145      	b.n	8002b1c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028c2:	e117      	b.n	8002af4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d14e      	bne.n	800296a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d2:	2200      	movs	r2, #0
 80028d4:	4906      	ldr	r1, [pc, #24]	; (80028f0 <HAL_I2C_Master_Receive+0x22c>)
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 fa76 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d008      	beq.n	80028f4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e11a      	b.n	8002b1c <HAL_I2C_Master_Receive+0x458>
 80028e6:	bf00      	nop
 80028e8:	00100002 	.word	0x00100002
 80028ec:	ffff0000 	.word	0xffff0000
 80028f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002902:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691a      	ldr	r2, [r3, #16]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	1c5a      	adds	r2, r3, #1
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002968:	e0c4      	b.n	8002af4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002970:	2200      	movs	r2, #0
 8002972:	496c      	ldr	r1, [pc, #432]	; (8002b24 <HAL_I2C_Master_Receive+0x460>)
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 fa27 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0cb      	b.n	8002b1c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002992:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029bc:	b29b      	uxth	r3, r3
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029cc:	2200      	movs	r2, #0
 80029ce:	4955      	ldr	r1, [pc, #340]	; (8002b24 <HAL_I2C_Master_Receive+0x460>)
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 f9f9 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e09d      	b.n	8002b1c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691a      	ldr	r2, [r3, #16]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a54:	e04e      	b.n	8002af4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fb5e 	bl	800311c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e058      	b.n	8002b1c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d124      	bne.n	8002af4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d107      	bne.n	8002ac2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f47f aeb6 	bne.w	800286a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2220      	movs	r2, #32
 8002b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e000      	b.n	8002b1c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002b1a:	2302      	movs	r3, #2
  }
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3728      	adds	r7, #40	; 0x28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	00010004 	.word	0x00010004

08002b28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	460b      	mov	r3, r1
 8002b36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d006      	beq.n	8002b52 <I2C_MasterRequestWrite+0x2a>
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d003      	beq.n	8002b52 <I2C_MasterRequestWrite+0x2a>
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b50:	d108      	bne.n	8002b64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	e00b      	b.n	8002b7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	2b12      	cmp	r3, #18
 8002b6a:	d107      	bne.n	8002b7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f91d 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00d      	beq.n	8002bb0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba2:	d103      	bne.n	8002bac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002baa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e035      	b.n	8002c1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bb8:	d108      	bne.n	8002bcc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bba:	897b      	ldrh	r3, [r7, #10]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bc8:	611a      	str	r2, [r3, #16]
 8002bca:	e01b      	b.n	8002c04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bcc:	897b      	ldrh	r3, [r7, #10]
 8002bce:	11db      	asrs	r3, r3, #7
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	f003 0306 	and.w	r3, r3, #6
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f063 030f 	orn	r3, r3, #15
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	490e      	ldr	r1, [pc, #56]	; (8002c24 <I2C_MasterRequestWrite+0xfc>)
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f966 	bl	8002ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e010      	b.n	8002c1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002bfa:	897b      	ldrh	r3, [r7, #10]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	4907      	ldr	r1, [pc, #28]	; (8002c28 <I2C_MasterRequestWrite+0x100>)
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 f956 	bl	8002ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	00010008 	.word	0x00010008
 8002c28:	00010002 	.word	0x00010002

08002c2c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c50:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d006      	beq.n	8002c66 <I2C_MasterRequestRead+0x3a>
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d003      	beq.n	8002c66 <I2C_MasterRequestRead+0x3a>
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c64:	d108      	bne.n	8002c78 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	e00b      	b.n	8002c90 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	2b11      	cmp	r3, #17
 8002c7e:	d107      	bne.n	8002c90 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 f893 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00d      	beq.n	8002cc4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cb6:	d103      	bne.n	8002cc0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e079      	b.n	8002db8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ccc:	d108      	bne.n	8002ce0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002cce:	897b      	ldrh	r3, [r7, #10]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	611a      	str	r2, [r3, #16]
 8002cde:	e05f      	b.n	8002da0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ce0:	897b      	ldrh	r3, [r7, #10]
 8002ce2:	11db      	asrs	r3, r3, #7
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f003 0306 	and.w	r3, r3, #6
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	f063 030f 	orn	r3, r3, #15
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	4930      	ldr	r1, [pc, #192]	; (8002dc0 <I2C_MasterRequestRead+0x194>)
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f8dc 	bl	8002ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e054      	b.n	8002db8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d0e:	897b      	ldrh	r3, [r7, #10]
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	4929      	ldr	r1, [pc, #164]	; (8002dc4 <I2C_MasterRequestRead+0x198>)
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f8cc 	bl	8002ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e044      	b.n	8002db8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d2e:	2300      	movs	r3, #0
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d52:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 f831 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00d      	beq.n	8002d88 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d7a:	d103      	bne.n	8002d84 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d82:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e017      	b.n	8002db8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002d88:	897b      	ldrh	r3, [r7, #10]
 8002d8a:	11db      	asrs	r3, r3, #7
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	f003 0306 	and.w	r3, r3, #6
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f063 030e 	orn	r3, r3, #14
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4907      	ldr	r1, [pc, #28]	; (8002dc4 <I2C_MasterRequestRead+0x198>)
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f888 	bl	8002ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	00010008 	.word	0x00010008
 8002dc4:	00010002 	.word	0x00010002

08002dc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dd8:	e048      	b.n	8002e6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002de0:	d044      	beq.n	8002e6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de2:	f7fe fe85 	bl	8001af0 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d302      	bcc.n	8002df8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d139      	bne.n	8002e6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	0c1b      	lsrs	r3, r3, #16
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d10d      	bne.n	8002e1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	43da      	mvns	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bf0c      	ite	eq
 8002e14:	2301      	moveq	r3, #1
 8002e16:	2300      	movne	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	e00c      	b.n	8002e38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	43da      	mvns	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bf0c      	ite	eq
 8002e30:	2301      	moveq	r3, #1
 8002e32:	2300      	movne	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d116      	bne.n	8002e6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	f043 0220 	orr.w	r2, r3, #32
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e023      	b.n	8002eb4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	0c1b      	lsrs	r3, r3, #16
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d10d      	bne.n	8002e92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	43da      	mvns	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	4013      	ands	r3, r2
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	bf0c      	ite	eq
 8002e88:	2301      	moveq	r3, #1
 8002e8a:	2300      	movne	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	461a      	mov	r2, r3
 8002e90:	e00c      	b.n	8002eac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	43da      	mvns	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d093      	beq.n	8002dda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eca:	e071      	b.n	8002fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eda:	d123      	bne.n	8002f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ef4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	f043 0204 	orr.w	r2, r3, #4
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e067      	b.n	8002ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f2a:	d041      	beq.n	8002fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2c:	f7fe fde0 	bl	8001af0 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d302      	bcc.n	8002f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d136      	bne.n	8002fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d10c      	bne.n	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	43da      	mvns	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4013      	ands	r3, r2
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	bf14      	ite	ne
 8002f5e:	2301      	movne	r3, #1
 8002f60:	2300      	moveq	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	e00b      	b.n	8002f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	43da      	mvns	r2, r3
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	4013      	ands	r3, r2
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf14      	ite	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	2300      	moveq	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d016      	beq.n	8002fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	f043 0220 	orr.w	r2, r3, #32
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e021      	b.n	8002ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	0c1b      	lsrs	r3, r3, #16
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d10c      	bne.n	8002fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	43da      	mvns	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf14      	ite	ne
 8002fcc:	2301      	movne	r3, #1
 8002fce:	2300      	moveq	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	e00b      	b.n	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	bf14      	ite	ne
 8002fe6:	2301      	movne	r3, #1
 8002fe8:	2300      	moveq	r3, #0
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f47f af6d 	bne.w	8002ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003008:	e034      	b.n	8003074 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f8e3 	bl	80031d6 <I2C_IsAcknowledgeFailed>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e034      	b.n	8003084 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003020:	d028      	beq.n	8003074 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003022:	f7fe fd65 	bl	8001af0 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	429a      	cmp	r2, r3
 8003030:	d302      	bcc.n	8003038 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d11d      	bne.n	8003074 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003042:	2b80      	cmp	r3, #128	; 0x80
 8003044:	d016      	beq.n	8003074 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	f043 0220 	orr.w	r2, r3, #32
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e007      	b.n	8003084 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307e:	2b80      	cmp	r3, #128	; 0x80
 8003080:	d1c3      	bne.n	800300a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003098:	e034      	b.n	8003104 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f89b 	bl	80031d6 <I2C_IsAcknowledgeFailed>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e034      	b.n	8003114 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030b0:	d028      	beq.n	8003104 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b2:	f7fe fd1d 	bl	8001af0 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d302      	bcc.n	80030c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d11d      	bne.n	8003104 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d016      	beq.n	8003104 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	f043 0220 	orr.w	r2, r3, #32
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e007      	b.n	8003114 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	2b04      	cmp	r3, #4
 8003110:	d1c3      	bne.n	800309a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003128:	e049      	b.n	80031be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b10      	cmp	r3, #16
 8003136:	d119      	bne.n	800316c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0210 	mvn.w	r2, #16
 8003140:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e030      	b.n	80031ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316c:	f7fe fcc0 	bl	8001af0 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	429a      	cmp	r2, r3
 800317a:	d302      	bcc.n	8003182 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d11d      	bne.n	80031be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318c:	2b40      	cmp	r3, #64	; 0x40
 800318e:	d016      	beq.n	80031be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f043 0220 	orr.w	r2, r3, #32
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e007      	b.n	80031ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c8:	2b40      	cmp	r3, #64	; 0x40
 80031ca:	d1ae      	bne.n	800312a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ec:	d11b      	bne.n	8003226 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f043 0204 	orr.w	r2, r3, #4
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b20      	cmp	r3, #32
 8003248:	d129      	bne.n	800329e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2224      	movs	r2, #36	; 0x24
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0201 	bic.w	r2, r2, #1
 8003260:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0210 	bic.w	r2, r2, #16
 8003270:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f042 0201 	orr.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	e000      	b.n	80032a0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800329e:	2302      	movs	r3, #2
  }
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	d12a      	bne.n	800331c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2224      	movs	r2, #36	; 0x24
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0201 	bic.w	r2, r2, #1
 80032dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80032e6:	89fb      	ldrh	r3, [r7, #14]
 80032e8:	f023 030f 	bic.w	r3, r3, #15
 80032ec:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	89fb      	ldrh	r3, [r7, #14]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	89fa      	ldrh	r2, [r7, #14]
 80032fe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003318:	2300      	movs	r3, #0
 800331a:	e000      	b.n	800331e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800331c:	2302      	movs	r3, #2
  }
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
	...

0800332c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e267      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d075      	beq.n	8003436 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800334a:	4b88      	ldr	r3, [pc, #544]	; (800356c <HAL_RCC_OscConfig+0x240>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b04      	cmp	r3, #4
 8003354:	d00c      	beq.n	8003370 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003356:	4b85      	ldr	r3, [pc, #532]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800335e:	2b08      	cmp	r3, #8
 8003360:	d112      	bne.n	8003388 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003362:	4b82      	ldr	r3, [pc, #520]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800336a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800336e:	d10b      	bne.n	8003388 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003370:	4b7e      	ldr	r3, [pc, #504]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d05b      	beq.n	8003434 <HAL_RCC_OscConfig+0x108>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d157      	bne.n	8003434 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e242      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003390:	d106      	bne.n	80033a0 <HAL_RCC_OscConfig+0x74>
 8003392:	4b76      	ldr	r3, [pc, #472]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a75      	ldr	r2, [pc, #468]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e01d      	b.n	80033dc <HAL_RCC_OscConfig+0xb0>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033a8:	d10c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x98>
 80033aa:	4b70      	ldr	r3, [pc, #448]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a6f      	ldr	r2, [pc, #444]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80033b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	4b6d      	ldr	r3, [pc, #436]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a6c      	ldr	r2, [pc, #432]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e00b      	b.n	80033dc <HAL_RCC_OscConfig+0xb0>
 80033c4:	4b69      	ldr	r3, [pc, #420]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a68      	ldr	r2, [pc, #416]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80033ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	4b66      	ldr	r3, [pc, #408]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a65      	ldr	r2, [pc, #404]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80033d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d013      	beq.n	800340c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e4:	f7fe fb84 	bl	8001af0 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ec:	f7fe fb80 	bl	8001af0 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b64      	cmp	r3, #100	; 0x64
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e207      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	4b5b      	ldr	r3, [pc, #364]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0xc0>
 800340a:	e014      	b.n	8003436 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340c:	f7fe fb70 	bl	8001af0 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003414:	f7fe fb6c 	bl	8001af0 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e1f3      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003426:	4b51      	ldr	r3, [pc, #324]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0xe8>
 8003432:	e000      	b.n	8003436 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d063      	beq.n	800350a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003442:	4b4a      	ldr	r3, [pc, #296]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00b      	beq.n	8003466 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800344e:	4b47      	ldr	r3, [pc, #284]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003456:	2b08      	cmp	r3, #8
 8003458:	d11c      	bne.n	8003494 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800345a:	4b44      	ldr	r3, [pc, #272]	; (800356c <HAL_RCC_OscConfig+0x240>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d116      	bne.n	8003494 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003466:	4b41      	ldr	r3, [pc, #260]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <HAL_RCC_OscConfig+0x152>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d001      	beq.n	800347e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e1c7      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347e:	4b3b      	ldr	r3, [pc, #236]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4937      	ldr	r1, [pc, #220]	; (800356c <HAL_RCC_OscConfig+0x240>)
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003492:	e03a      	b.n	800350a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d020      	beq.n	80034de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800349c:	4b34      	ldr	r3, [pc, #208]	; (8003570 <HAL_RCC_OscConfig+0x244>)
 800349e:	2201      	movs	r2, #1
 80034a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a2:	f7fe fb25 	bl	8001af0 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034aa:	f7fe fb21 	bl	8001af0 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e1a8      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034bc:	4b2b      	ldr	r3, [pc, #172]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f0      	beq.n	80034aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c8:	4b28      	ldr	r3, [pc, #160]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	4925      	ldr	r1, [pc, #148]	; (800356c <HAL_RCC_OscConfig+0x240>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	600b      	str	r3, [r1, #0]
 80034dc:	e015      	b.n	800350a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034de:	4b24      	ldr	r3, [pc, #144]	; (8003570 <HAL_RCC_OscConfig+0x244>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fe fb04 	bl	8001af0 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ec:	f7fe fb00 	bl	8001af0 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e187      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fe:	4b1b      	ldr	r3, [pc, #108]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d036      	beq.n	8003584 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d016      	beq.n	800354c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800351e:	4b15      	ldr	r3, [pc, #84]	; (8003574 <HAL_RCC_OscConfig+0x248>)
 8003520:	2201      	movs	r2, #1
 8003522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003524:	f7fe fae4 	bl	8001af0 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800352c:	f7fe fae0 	bl	8001af0 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e167      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353e:	4b0b      	ldr	r3, [pc, #44]	; (800356c <HAL_RCC_OscConfig+0x240>)
 8003540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0x200>
 800354a:	e01b      	b.n	8003584 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800354c:	4b09      	ldr	r3, [pc, #36]	; (8003574 <HAL_RCC_OscConfig+0x248>)
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003552:	f7fe facd 	bl	8001af0 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003558:	e00e      	b.n	8003578 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800355a:	f7fe fac9 	bl	8001af0 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d907      	bls.n	8003578 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e150      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
 800356c:	40023800 	.word	0x40023800
 8003570:	42470000 	.word	0x42470000
 8003574:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003578:	4b88      	ldr	r3, [pc, #544]	; (800379c <HAL_RCC_OscConfig+0x470>)
 800357a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1ea      	bne.n	800355a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 8097 	beq.w	80036c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003592:	2300      	movs	r3, #0
 8003594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003596:	4b81      	ldr	r3, [pc, #516]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10f      	bne.n	80035c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	60bb      	str	r3, [r7, #8]
 80035a6:	4b7d      	ldr	r3, [pc, #500]	; (800379c <HAL_RCC_OscConfig+0x470>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	4a7c      	ldr	r2, [pc, #496]	; (800379c <HAL_RCC_OscConfig+0x470>)
 80035ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b0:	6413      	str	r3, [r2, #64]	; 0x40
 80035b2:	4b7a      	ldr	r3, [pc, #488]	; (800379c <HAL_RCC_OscConfig+0x470>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ba:	60bb      	str	r3, [r7, #8]
 80035bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035be:	2301      	movs	r3, #1
 80035c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c2:	4b77      	ldr	r3, [pc, #476]	; (80037a0 <HAL_RCC_OscConfig+0x474>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d118      	bne.n	8003600 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ce:	4b74      	ldr	r3, [pc, #464]	; (80037a0 <HAL_RCC_OscConfig+0x474>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a73      	ldr	r2, [pc, #460]	; (80037a0 <HAL_RCC_OscConfig+0x474>)
 80035d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035da:	f7fe fa89 	bl	8001af0 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e2:	f7fe fa85 	bl	8001af0 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e10c      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f4:	4b6a      	ldr	r3, [pc, #424]	; (80037a0 <HAL_RCC_OscConfig+0x474>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d106      	bne.n	8003616 <HAL_RCC_OscConfig+0x2ea>
 8003608:	4b64      	ldr	r3, [pc, #400]	; (800379c <HAL_RCC_OscConfig+0x470>)
 800360a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360c:	4a63      	ldr	r2, [pc, #396]	; (800379c <HAL_RCC_OscConfig+0x470>)
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	6713      	str	r3, [r2, #112]	; 0x70
 8003614:	e01c      	b.n	8003650 <HAL_RCC_OscConfig+0x324>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	2b05      	cmp	r3, #5
 800361c:	d10c      	bne.n	8003638 <HAL_RCC_OscConfig+0x30c>
 800361e:	4b5f      	ldr	r3, [pc, #380]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003622:	4a5e      	ldr	r2, [pc, #376]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003624:	f043 0304 	orr.w	r3, r3, #4
 8003628:	6713      	str	r3, [r2, #112]	; 0x70
 800362a:	4b5c      	ldr	r3, [pc, #368]	; (800379c <HAL_RCC_OscConfig+0x470>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	4a5b      	ldr	r2, [pc, #364]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	6713      	str	r3, [r2, #112]	; 0x70
 8003636:	e00b      	b.n	8003650 <HAL_RCC_OscConfig+0x324>
 8003638:	4b58      	ldr	r3, [pc, #352]	; (800379c <HAL_RCC_OscConfig+0x470>)
 800363a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363c:	4a57      	ldr	r2, [pc, #348]	; (800379c <HAL_RCC_OscConfig+0x470>)
 800363e:	f023 0301 	bic.w	r3, r3, #1
 8003642:	6713      	str	r3, [r2, #112]	; 0x70
 8003644:	4b55      	ldr	r3, [pc, #340]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003648:	4a54      	ldr	r2, [pc, #336]	; (800379c <HAL_RCC_OscConfig+0x470>)
 800364a:	f023 0304 	bic.w	r3, r3, #4
 800364e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d015      	beq.n	8003684 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003658:	f7fe fa4a 	bl	8001af0 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365e:	e00a      	b.n	8003676 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003660:	f7fe fa46 	bl	8001af0 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f241 3288 	movw	r2, #5000	; 0x1388
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e0cb      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003676:	4b49      	ldr	r3, [pc, #292]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0ee      	beq.n	8003660 <HAL_RCC_OscConfig+0x334>
 8003682:	e014      	b.n	80036ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003684:	f7fe fa34 	bl	8001af0 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800368a:	e00a      	b.n	80036a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800368c:	f7fe fa30 	bl	8001af0 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f241 3288 	movw	r2, #5000	; 0x1388
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e0b5      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a2:	4b3e      	ldr	r3, [pc, #248]	; (800379c <HAL_RCC_OscConfig+0x470>)
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1ee      	bne.n	800368c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ae:	7dfb      	ldrb	r3, [r7, #23]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d105      	bne.n	80036c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b4:	4b39      	ldr	r3, [pc, #228]	; (800379c <HAL_RCC_OscConfig+0x470>)
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	4a38      	ldr	r2, [pc, #224]	; (800379c <HAL_RCC_OscConfig+0x470>)
 80036ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 80a1 	beq.w	800380c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ca:	4b34      	ldr	r3, [pc, #208]	; (800379c <HAL_RCC_OscConfig+0x470>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 030c 	and.w	r3, r3, #12
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d05c      	beq.n	8003790 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d141      	bne.n	8003762 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036de:	4b31      	ldr	r3, [pc, #196]	; (80037a4 <HAL_RCC_OscConfig+0x478>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e4:	f7fe fa04 	bl	8001af0 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ec:	f7fe fa00 	bl	8001af0 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e087      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fe:	4b27      	ldr	r3, [pc, #156]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69da      	ldr	r2, [r3, #28]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	019b      	lsls	r3, r3, #6
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	085b      	lsrs	r3, r3, #1
 8003722:	3b01      	subs	r3, #1
 8003724:	041b      	lsls	r3, r3, #16
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	061b      	lsls	r3, r3, #24
 800372e:	491b      	ldr	r1, [pc, #108]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003730:	4313      	orrs	r3, r2
 8003732:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003734:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <HAL_RCC_OscConfig+0x478>)
 8003736:	2201      	movs	r2, #1
 8003738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373a:	f7fe f9d9 	bl	8001af0 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003742:	f7fe f9d5 	bl	8001af0 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e05c      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003754:	4b11      	ldr	r3, [pc, #68]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f0      	beq.n	8003742 <HAL_RCC_OscConfig+0x416>
 8003760:	e054      	b.n	800380c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003762:	4b10      	ldr	r3, [pc, #64]	; (80037a4 <HAL_RCC_OscConfig+0x478>)
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003768:	f7fe f9c2 	bl	8001af0 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003770:	f7fe f9be 	bl	8001af0 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e045      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003782:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_RCC_OscConfig+0x470>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f0      	bne.n	8003770 <HAL_RCC_OscConfig+0x444>
 800378e:	e03d      	b.n	800380c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d107      	bne.n	80037a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e038      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
 800379c:	40023800 	.word	0x40023800
 80037a0:	40007000 	.word	0x40007000
 80037a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037a8:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <HAL_RCC_OscConfig+0x4ec>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d028      	beq.n	8003808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d121      	bne.n	8003808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d11a      	bne.n	8003808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037d8:	4013      	ands	r3, r2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d111      	bne.n	8003808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	085b      	lsrs	r3, r3, #1
 80037f0:	3b01      	subs	r3, #1
 80037f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d107      	bne.n	8003808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e000      	b.n	800380e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40023800 	.word	0x40023800

0800381c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0cc      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003830:	4b68      	ldr	r3, [pc, #416]	; (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 030f 	and.w	r3, r3, #15
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d90c      	bls.n	8003858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383e:	4b65      	ldr	r3, [pc, #404]	; (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003846:	4b63      	ldr	r3, [pc, #396]	; (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0b8      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d020      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d005      	beq.n	800387c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003870:	4b59      	ldr	r3, [pc, #356]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	4a58      	ldr	r2, [pc, #352]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800387a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003888:	4b53      	ldr	r3, [pc, #332]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	4a52      	ldr	r2, [pc, #328]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003892:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003894:	4b50      	ldr	r3, [pc, #320]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	494d      	ldr	r1, [pc, #308]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d044      	beq.n	800393c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d107      	bne.n	80038ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ba:	4b47      	ldr	r3, [pc, #284]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d119      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e07f      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d003      	beq.n	80038da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d107      	bne.n	80038ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038da:	4b3f      	ldr	r3, [pc, #252]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e06f      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ea:	4b3b      	ldr	r3, [pc, #236]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e067      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038fa:	4b37      	ldr	r3, [pc, #220]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f023 0203 	bic.w	r2, r3, #3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	4934      	ldr	r1, [pc, #208]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	4313      	orrs	r3, r2
 800390a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800390c:	f7fe f8f0 	bl	8001af0 <HAL_GetTick>
 8003910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003912:	e00a      	b.n	800392a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003914:	f7fe f8ec 	bl	8001af0 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003922:	4293      	cmp	r3, r2
 8003924:	d901      	bls.n	800392a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e04f      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	4b2b      	ldr	r3, [pc, #172]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 020c 	and.w	r2, r3, #12
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	429a      	cmp	r2, r3
 800393a:	d1eb      	bne.n	8003914 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800393c:	4b25      	ldr	r3, [pc, #148]	; (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d20c      	bcs.n	8003964 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394a:	4b22      	ldr	r3, [pc, #136]	; (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003952:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d001      	beq.n	8003964 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e032      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003970:	4b19      	ldr	r3, [pc, #100]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	4916      	ldr	r1, [pc, #88]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	4313      	orrs	r3, r2
 8003980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d009      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800398e:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	490e      	ldr	r1, [pc, #56]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039a2:	f000 f821 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 80039a6:	4602      	mov	r2, r0
 80039a8:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	091b      	lsrs	r3, r3, #4
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	490a      	ldr	r1, [pc, #40]	; (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 80039b4:	5ccb      	ldrb	r3, [r1, r3]
 80039b6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ba:	4a09      	ldr	r2, [pc, #36]	; (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80039bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039be:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe f850 	bl	8001a68 <HAL_InitTick>

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40023c00 	.word	0x40023c00
 80039d8:	40023800 	.word	0x40023800
 80039dc:	08006af0 	.word	0x08006af0
 80039e0:	20000018 	.word	0x20000018
 80039e4:	2000001c 	.word	0x2000001c

080039e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039ec:	b090      	sub	sp, #64	; 0x40
 80039ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	637b      	str	r3, [r7, #52]	; 0x34
 80039f4:	2300      	movs	r3, #0
 80039f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039f8:	2300      	movs	r3, #0
 80039fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a00:	4b59      	ldr	r3, [pc, #356]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 030c 	and.w	r3, r3, #12
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d00d      	beq.n	8003a28 <HAL_RCC_GetSysClockFreq+0x40>
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	f200 80a1 	bhi.w	8003b54 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_RCC_GetSysClockFreq+0x34>
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d003      	beq.n	8003a22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a1a:	e09b      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a1c:	4b53      	ldr	r3, [pc, #332]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x184>)
 8003a1e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a20:	e09b      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a22:	4b53      	ldr	r3, [pc, #332]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a26:	e098      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a28:	4b4f      	ldr	r3, [pc, #316]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a30:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a32:	4b4d      	ldr	r3, [pc, #308]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d028      	beq.n	8003a90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a3e:	4b4a      	ldr	r3, [pc, #296]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	099b      	lsrs	r3, r3, #6
 8003a44:	2200      	movs	r2, #0
 8003a46:	623b      	str	r3, [r7, #32]
 8003a48:	627a      	str	r2, [r7, #36]	; 0x24
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a50:	2100      	movs	r1, #0
 8003a52:	4b47      	ldr	r3, [pc, #284]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a54:	fb03 f201 	mul.w	r2, r3, r1
 8003a58:	2300      	movs	r3, #0
 8003a5a:	fb00 f303 	mul.w	r3, r0, r3
 8003a5e:	4413      	add	r3, r2
 8003a60:	4a43      	ldr	r2, [pc, #268]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a62:	fba0 1202 	umull	r1, r2, r0, r2
 8003a66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a68:	460a      	mov	r2, r1
 8003a6a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a6e:	4413      	add	r3, r2
 8003a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a74:	2200      	movs	r2, #0
 8003a76:	61bb      	str	r3, [r7, #24]
 8003a78:	61fa      	str	r2, [r7, #28]
 8003a7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a82:	f7fc fbbb 	bl	80001fc <__aeabi_uldivmod>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a8e:	e053      	b.n	8003b38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a90:	4b35      	ldr	r3, [pc, #212]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	099b      	lsrs	r3, r3, #6
 8003a96:	2200      	movs	r2, #0
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	617a      	str	r2, [r7, #20]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003aa2:	f04f 0b00 	mov.w	fp, #0
 8003aa6:	4652      	mov	r2, sl
 8003aa8:	465b      	mov	r3, fp
 8003aaa:	f04f 0000 	mov.w	r0, #0
 8003aae:	f04f 0100 	mov.w	r1, #0
 8003ab2:	0159      	lsls	r1, r3, #5
 8003ab4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab8:	0150      	lsls	r0, r2, #5
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	ebb2 080a 	subs.w	r8, r2, sl
 8003ac2:	eb63 090b 	sbc.w	r9, r3, fp
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	f04f 0300 	mov.w	r3, #0
 8003ace:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ad2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ad6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ada:	ebb2 0408 	subs.w	r4, r2, r8
 8003ade:	eb63 0509 	sbc.w	r5, r3, r9
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	f04f 0300 	mov.w	r3, #0
 8003aea:	00eb      	lsls	r3, r5, #3
 8003aec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003af0:	00e2      	lsls	r2, r4, #3
 8003af2:	4614      	mov	r4, r2
 8003af4:	461d      	mov	r5, r3
 8003af6:	eb14 030a 	adds.w	r3, r4, sl
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	eb45 030b 	adc.w	r3, r5, fp
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b0e:	4629      	mov	r1, r5
 8003b10:	028b      	lsls	r3, r1, #10
 8003b12:	4621      	mov	r1, r4
 8003b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b18:	4621      	mov	r1, r4
 8003b1a:	028a      	lsls	r2, r1, #10
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	4619      	mov	r1, r3
 8003b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b22:	2200      	movs	r2, #0
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	60fa      	str	r2, [r7, #12]
 8003b28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b2c:	f7fc fb66 	bl	80001fc <__aeabi_uldivmod>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4613      	mov	r3, r2
 8003b36:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b38:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	3301      	adds	r3, #1
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003b48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b52:	e002      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b54:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x184>)
 8003b56:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3740      	adds	r7, #64	; 0x40
 8003b60:	46bd      	mov	sp, r7
 8003b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	00f42400 	.word	0x00f42400
 8003b70:	017d7840 	.word	0x017d7840

08003b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b78:	4b03      	ldr	r3, [pc, #12]	; (8003b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	20000018 	.word	0x20000018

08003b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b90:	f7ff fff0 	bl	8003b74 <HAL_RCC_GetHCLKFreq>
 8003b94:	4602      	mov	r2, r0
 8003b96:	4b05      	ldr	r3, [pc, #20]	; (8003bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	0a9b      	lsrs	r3, r3, #10
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	4903      	ldr	r1, [pc, #12]	; (8003bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ba2:	5ccb      	ldrb	r3, [r1, r3]
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	08006b00 	.word	0x08006b00

08003bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bb8:	f7ff ffdc 	bl	8003b74 <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	0b5b      	lsrs	r3, r3, #13
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4903      	ldr	r1, [pc, #12]	; (8003bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	08006b00 	.word	0x08006b00

08003bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10b      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d105      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d075      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c10:	4b91      	ldr	r3, [pc, #580]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c16:	f7fd ff6b 	bl	8001af0 <HAL_GetTick>
 8003c1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c1e:	f7fd ff67 	bl	8001af0 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e189      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c30:	4b8a      	ldr	r3, [pc, #552]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f0      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d009      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	019a      	lsls	r2, r3, #6
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	071b      	lsls	r3, r3, #28
 8003c54:	4981      	ldr	r1, [pc, #516]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01f      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c68:	4b7c      	ldr	r3, [pc, #496]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c6e:	0f1b      	lsrs	r3, r3, #28
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	019a      	lsls	r2, r3, #6
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	061b      	lsls	r3, r3, #24
 8003c82:	431a      	orrs	r2, r3
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	071b      	lsls	r3, r3, #28
 8003c88:	4974      	ldr	r1, [pc, #464]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c90:	4b72      	ldr	r3, [pc, #456]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c96:	f023 021f 	bic.w	r2, r3, #31
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	496e      	ldr	r1, [pc, #440]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00d      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	019a      	lsls	r2, r3, #6
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	061b      	lsls	r3, r3, #24
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	071b      	lsls	r3, r3, #28
 8003cc8:	4964      	ldr	r1, [pc, #400]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cd0:	4b61      	ldr	r3, [pc, #388]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cd6:	f7fd ff0b 	bl	8001af0 <HAL_GetTick>
 8003cda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cde:	f7fd ff07 	bl	8001af0 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e129      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cf0:	4b5a      	ldr	r3, [pc, #360]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0f0      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d105      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d079      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d14:	4b52      	ldr	r3, [pc, #328]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d1a:	f7fd fee9 	bl	8001af0 <HAL_GetTick>
 8003d1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d20:	e008      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d22:	f7fd fee5 	bl	8001af0 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e107      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d34:	4b49      	ldr	r3, [pc, #292]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d40:	d0ef      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d020      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d4e:	4b43      	ldr	r3, [pc, #268]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d54:	0f1b      	lsrs	r3, r3, #28
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	019a      	lsls	r2, r3, #6
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	061b      	lsls	r3, r3, #24
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	071b      	lsls	r3, r3, #28
 8003d6e:	493b      	ldr	r1, [pc, #236]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d76:	4b39      	ldr	r3, [pc, #228]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d7c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	3b01      	subs	r3, #1
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	4934      	ldr	r1, [pc, #208]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d01e      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d9c:	4b2f      	ldr	r3, [pc, #188]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da2:	0e1b      	lsrs	r3, r3, #24
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	019a      	lsls	r2, r3, #6
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	061b      	lsls	r3, r3, #24
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	071b      	lsls	r3, r3, #28
 8003dbc:	4927      	ldr	r1, [pc, #156]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003dc4:	4b25      	ldr	r3, [pc, #148]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	4922      	ldr	r1, [pc, #136]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003dda:	4b21      	ldr	r3, [pc, #132]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003de0:	f7fd fe86 	bl	8001af0 <HAL_GetTick>
 8003de4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003de8:	f7fd fe82 	bl	8001af0 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e0a4      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003dfa:	4b18      	ldr	r3, [pc, #96]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e06:	d1ef      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0320 	and.w	r3, r3, #32
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 808b 	beq.w	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	4a0f      	ldr	r2, [pc, #60]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e24:	6413      	str	r3, [r2, #64]	; 0x40
 8003e26:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e32:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a0b      	ldr	r2, [pc, #44]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e3e:	f7fd fe57 	bl	8001af0 <HAL_GetTick>
 8003e42:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e44:	e010      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e46:	f7fd fe53 	bl	8001af0 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d909      	bls.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e075      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003e58:	42470068 	.word	0x42470068
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	42470070 	.word	0x42470070
 8003e64:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e68:	4b38      	ldr	r3, [pc, #224]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0e8      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e74:	4b36      	ldr	r3, [pc, #216]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d02f      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d028      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e92:	4b2f      	ldr	r3, [pc, #188]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e9a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e9c:	4b2d      	ldr	r3, [pc, #180]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ea2:	4b2c      	ldr	r3, [pc, #176]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ea8:	4a29      	ldr	r2, [pc, #164]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003eae:	4b28      	ldr	r3, [pc, #160]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d114      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003eba:	f7fd fe19 	bl	8001af0 <HAL_GetTick>
 8003ebe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec0:	e00a      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec2:	f7fd fe15 	bl	8001af0 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e035      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed8:	4b1d      	ldr	r3, [pc, #116]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0ee      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ef0:	d10d      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003ef2:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f06:	4912      	ldr	r1, [pc, #72]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	608b      	str	r3, [r1, #8]
 8003f0c:	e005      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003f0e:	4b10      	ldr	r3, [pc, #64]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	4a0f      	ldr	r2, [pc, #60]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f14:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f18:	6093      	str	r3, [r2, #8]
 8003f1a:	4b0d      	ldr	r3, [pc, #52]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f26:	490a      	ldr	r1, [pc, #40]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0310 	and.w	r3, r3, #16
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d004      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003f3e:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003f40:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40007000 	.word	0x40007000
 8003f50:	40023800 	.word	0x40023800
 8003f54:	42470e40 	.word	0x42470e40
 8003f58:	424711e0 	.word	0x424711e0

08003f5c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e073      	b.n	800405a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	7f5b      	ldrb	r3, [r3, #29]
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d105      	bne.n	8003f88 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7fd fa4e 	bl	8001424 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	2b10      	cmp	r3, #16
 8003f9a:	d055      	beq.n	8004048 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	22ca      	movs	r2, #202	; 0xca
 8003fa2:	625a      	str	r2, [r3, #36]	; 0x24
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2253      	movs	r2, #83	; 0x53
 8003faa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fa49 	bl	8004444 <RTC_EnterInitMode>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d12c      	bne.n	8004016 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6812      	ldr	r2, [r2, #0]
 8003fc6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fce:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6899      	ldr	r1, [r3, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68d2      	ldr	r2, [r2, #12]
 8003ff6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6919      	ldr	r1, [r3, #16]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	041a      	lsls	r2, r3, #16
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 fa50 	bl	80044b2 <RTC_ExitInitMode>
 8004012:	4603      	mov	r3, r0
 8004014:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004016:	7bfb      	ldrb	r3, [r7, #15]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d110      	bne.n	800403e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800402a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	22ff      	movs	r2, #255	; 0xff
 8004044:	625a      	str	r2, [r3, #36]	; 0x24
 8004046:	e001      	b.n	800404c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d102      	bne.n	8004058 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004058:	7bfb      	ldrb	r3, [r7, #15]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004062:	b590      	push	{r4, r7, lr}
 8004064:	b087      	sub	sp, #28
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	7f1b      	ldrb	r3, [r3, #28]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_RTC_SetTime+0x1c>
 800407a:	2302      	movs	r3, #2
 800407c:	e087      	b.n	800418e <HAL_RTC_SetTime+0x12c>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2202      	movs	r2, #2
 8004088:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d126      	bne.n	80040de <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d102      	bne.n	80040a4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2200      	movs	r2, #0
 80040a2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fa27 	bl	80044fc <RTC_ByteToBcd2>
 80040ae:	4603      	mov	r3, r0
 80040b0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	785b      	ldrb	r3, [r3, #1]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fa20 	bl	80044fc <RTC_ByteToBcd2>
 80040bc:	4603      	mov	r3, r0
 80040be:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80040c0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	789b      	ldrb	r3, [r3, #2]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 fa18 	bl	80044fc <RTC_ByteToBcd2>
 80040cc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80040ce:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	78db      	ldrb	r3, [r3, #3]
 80040d6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80040d8:	4313      	orrs	r3, r2
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	e018      	b.n	8004110 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d102      	bne.n	80040f2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	2200      	movs	r2, #0
 80040f0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	785b      	ldrb	r3, [r3, #1]
 80040fc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80040fe:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004104:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	78db      	ldrb	r3, [r3, #3]
 800410a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	22ca      	movs	r2, #202	; 0xca
 8004116:	625a      	str	r2, [r3, #36]	; 0x24
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2253      	movs	r2, #83	; 0x53
 800411e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 f98f 	bl	8004444 <RTC_EnterInitMode>
 8004126:	4603      	mov	r3, r0
 8004128:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800412a:	7cfb      	ldrb	r3, [r7, #19]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d120      	bne.n	8004172 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800413a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800413e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800414e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6899      	ldr	r1, [r3, #8]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	431a      	orrs	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 f9a2 	bl	80044b2 <RTC_ExitInitMode>
 800416e:	4603      	mov	r3, r0
 8004170:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004172:	7cfb      	ldrb	r3, [r7, #19]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d102      	bne.n	800417e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	22ff      	movs	r2, #255	; 0xff
 8004184:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	771a      	strb	r2, [r3, #28]

  return status;
 800418c:	7cfb      	ldrb	r3, [r7, #19]
}
 800418e:	4618      	mov	r0, r3
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	bd90      	pop	{r4, r7, pc}

08004196 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b086      	sub	sp, #24
 800419a:	af00      	add	r7, sp, #0
 800419c:	60f8      	str	r0, [r7, #12]
 800419e:	60b9      	str	r1, [r7, #8]
 80041a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80041c8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80041cc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	0c1b      	lsrs	r3, r3, #16
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	0a1b      	lsrs	r3, r3, #8
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	0d9b      	lsrs	r3, r3, #22
 8004200:	b2db      	uxtb	r3, r3
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	b2da      	uxtb	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d11a      	bne.n	8004248 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f000 f98e 	bl	8004538 <RTC_Bcd2ToByte>
 800421c:	4603      	mov	r3, r0
 800421e:	461a      	mov	r2, r3
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	785b      	ldrb	r3, [r3, #1]
 8004228:	4618      	mov	r0, r3
 800422a:	f000 f985 	bl	8004538 <RTC_Bcd2ToByte>
 800422e:	4603      	mov	r3, r0
 8004230:	461a      	mov	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	789b      	ldrb	r3, [r3, #2]
 800423a:	4618      	mov	r0, r3
 800423c:	f000 f97c 	bl	8004538 <RTC_Bcd2ToByte>
 8004240:	4603      	mov	r3, r0
 8004242:	461a      	mov	r2, r3
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004252:	b590      	push	{r4, r7, lr}
 8004254:	b087      	sub	sp, #28
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	7f1b      	ldrb	r3, [r3, #28]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d101      	bne.n	800426e <HAL_RTC_SetDate+0x1c>
 800426a:	2302      	movs	r3, #2
 800426c:	e071      	b.n	8004352 <HAL_RTC_SetDate+0x100>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2201      	movs	r2, #1
 8004272:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2202      	movs	r2, #2
 8004278:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10e      	bne.n	800429e <HAL_RTC_SetDate+0x4c>
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	785b      	ldrb	r3, [r3, #1]
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	2b00      	cmp	r3, #0
 800428a:	d008      	beq.n	800429e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	785b      	ldrb	r3, [r3, #1]
 8004290:	f023 0310 	bic.w	r3, r3, #16
 8004294:	b2db      	uxtb	r3, r3
 8004296:	330a      	adds	r3, #10
 8004298:	b2da      	uxtb	r2, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d11c      	bne.n	80042de <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	78db      	ldrb	r3, [r3, #3]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 f927 	bl	80044fc <RTC_ByteToBcd2>
 80042ae:	4603      	mov	r3, r0
 80042b0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	785b      	ldrb	r3, [r3, #1]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 f920 	bl	80044fc <RTC_ByteToBcd2>
 80042bc:	4603      	mov	r3, r0
 80042be:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80042c0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	789b      	ldrb	r3, [r3, #2]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 f918 	bl	80044fc <RTC_ByteToBcd2>
 80042cc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80042ce:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	e00e      	b.n	80042fc <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	78db      	ldrb	r3, [r3, #3]
 80042e2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	785b      	ldrb	r3, [r3, #1]
 80042e8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80042ea:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80042f0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80042f8:	4313      	orrs	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	22ca      	movs	r2, #202	; 0xca
 8004302:	625a      	str	r2, [r3, #36]	; 0x24
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2253      	movs	r2, #83	; 0x53
 800430a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f899 	bl	8004444 <RTC_EnterInitMode>
 8004312:	4603      	mov	r3, r0
 8004314:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004316:	7cfb      	ldrb	r3, [r7, #19]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10c      	bne.n	8004336 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004326:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800432a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 f8c0 	bl	80044b2 <RTC_ExitInitMode>
 8004332:	4603      	mov	r3, r0
 8004334:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004336:	7cfb      	ldrb	r3, [r7, #19]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d102      	bne.n	8004342 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2201      	movs	r2, #1
 8004340:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	22ff      	movs	r2, #255	; 0xff
 8004348:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	771a      	strb	r2, [r3, #28]

  return status;
 8004350:	7cfb      	ldrb	r3, [r7, #19]
}
 8004352:	4618      	mov	r0, r3
 8004354:	371c      	adds	r7, #28
 8004356:	46bd      	mov	sp, r7
 8004358:	bd90      	pop	{r4, r7, pc}

0800435a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b086      	sub	sp, #24
 800435e:	af00      	add	r7, sp, #0
 8004360:	60f8      	str	r0, [r7, #12]
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004366:	2300      	movs	r3, #0
 8004368:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004374:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004378:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	0c1b      	lsrs	r3, r3, #16
 800437e:	b2da      	uxtb	r2, r3
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	0a1b      	lsrs	r3, r3, #8
 8004388:	b2db      	uxtb	r3, r3
 800438a:	f003 031f 	and.w	r3, r3, #31
 800438e:	b2da      	uxtb	r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800439c:	b2da      	uxtb	r2, r3
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	0b5b      	lsrs	r3, r3, #13
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d11a      	bne.n	80043ee <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	78db      	ldrb	r3, [r3, #3]
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 f8bb 	bl	8004538 <RTC_Bcd2ToByte>
 80043c2:	4603      	mov	r3, r0
 80043c4:	461a      	mov	r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	785b      	ldrb	r3, [r3, #1]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 f8b2 	bl	8004538 <RTC_Bcd2ToByte>
 80043d4:	4603      	mov	r3, r0
 80043d6:	461a      	mov	r2, r3
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	789b      	ldrb	r3, [r3, #2]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 f8a9 	bl	8004538 <RTC_Bcd2ToByte>
 80043e6:	4603      	mov	r3, r0
 80043e8:	461a      	mov	r2, r3
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3718      	adds	r7, #24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a0d      	ldr	r2, [pc, #52]	; (8004440 <HAL_RTC_WaitForSynchro+0x48>)
 800440a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800440c:	f7fd fb70 	bl	8001af0 <HAL_GetTick>
 8004410:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004412:	e009      	b.n	8004428 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004414:	f7fd fb6c 	bl	8001af0 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004422:	d901      	bls.n	8004428 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e007      	b.n	8004438 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0ee      	beq.n	8004414 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	00017f5f 	.word	0x00017f5f

08004444 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445e:	2b00      	cmp	r3, #0
 8004460:	d122      	bne.n	80044a8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004470:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004472:	f7fd fb3d 	bl	8001af0 <HAL_GetTick>
 8004476:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004478:	e00c      	b.n	8004494 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800447a:	f7fd fb39 	bl	8001af0 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004488:	d904      	bls.n	8004494 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2204      	movs	r2, #4
 800448e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d102      	bne.n	80044a8 <RTC_EnterInitMode+0x64>
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d1e8      	bne.n	800447a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b084      	sub	sp, #16
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044cc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 0320 	and.w	r3, r3, #32
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10a      	bne.n	80044f2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff ff8b 	bl	80043f8 <HAL_RTC_WaitForSynchro>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2204      	movs	r2, #4
 80044ec:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80044f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800450a:	e005      	b.n	8004518 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	3301      	adds	r3, #1
 8004510:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004512:	79fb      	ldrb	r3, [r7, #7]
 8004514:	3b0a      	subs	r3, #10
 8004516:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	2b09      	cmp	r3, #9
 800451c:	d8f6      	bhi.n	800450c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	b2da      	uxtb	r2, r3
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	4313      	orrs	r3, r2
 800452a:	b2db      	uxtb	r3, r3
}
 800452c:	4618      	mov	r0, r3
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	091b      	lsrs	r3, r3, #4
 800454a:	b2db      	uxtb	r3, r3
 800454c:	461a      	mov	r2, r3
 800454e:	4613      	mov	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4413      	add	r3, r2
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	b2da      	uxtb	r2, r3
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	b2db      	uxtb	r3, r3
 8004564:	4413      	add	r3, r2
 8004566:	b2db      	uxtb	r3, r3
}
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e07b      	b.n	800467e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	2b00      	cmp	r3, #0
 800458c:	d108      	bne.n	80045a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004596:	d009      	beq.n	80045ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	61da      	str	r2, [r3, #28]
 800459e:	e005      	b.n	80045ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fc ff56 	bl	8001478 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	431a      	orrs	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800461c:	431a      	orrs	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004630:	ea42 0103 	orr.w	r1, r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004638:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	0c1b      	lsrs	r3, r3, #16
 800464a:	f003 0104 	and.w	r1, r3, #4
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	f003 0210 	and.w	r2, r3, #16
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69da      	ldr	r2, [r3, #28]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800466c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b088      	sub	sp, #32
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	603b      	str	r3, [r7, #0]
 8004692:	4613      	mov	r3, r2
 8004694:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_SPI_Transmit+0x22>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e12d      	b.n	8004904 <HAL_SPI_Transmit+0x27e>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046b0:	f7fd fa1e 	bl	8001af0 <HAL_GetTick>
 80046b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80046b6:	88fb      	ldrh	r3, [r7, #6]
 80046b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d002      	beq.n	80046cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80046c6:	2302      	movs	r3, #2
 80046c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80046ca:	e116      	b.n	80048fa <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <HAL_SPI_Transmit+0x52>
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d102      	bne.n	80046de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80046dc:	e10d      	b.n	80048fa <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2203      	movs	r2, #3
 80046e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	88fa      	ldrh	r2, [r7, #6]
 80046f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	88fa      	ldrh	r2, [r7, #6]
 80046fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004724:	d10f      	bne.n	8004746 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004734:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004744:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b40      	cmp	r3, #64	; 0x40
 8004752:	d007      	beq.n	8004764 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004762:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800476c:	d14f      	bne.n	800480e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <HAL_SPI_Transmit+0xf6>
 8004776:	8afb      	ldrh	r3, [r7, #22]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d142      	bne.n	8004802 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004780:	881a      	ldrh	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	1c9a      	adds	r2, r3, #2
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047a0:	e02f      	b.n	8004802 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d112      	bne.n	80047d6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	881a      	ldrh	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	1c9a      	adds	r2, r3, #2
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80047d4:	e015      	b.n	8004802 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047d6:	f7fd f98b 	bl	8001af0 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d803      	bhi.n	80047ee <HAL_SPI_Transmit+0x168>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ec:	d102      	bne.n	80047f4 <HAL_SPI_Transmit+0x16e>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d106      	bne.n	8004802 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004800:	e07b      	b.n	80048fa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1ca      	bne.n	80047a2 <HAL_SPI_Transmit+0x11c>
 800480c:	e050      	b.n	80048b0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <HAL_SPI_Transmit+0x196>
 8004816:	8afb      	ldrh	r3, [r7, #22]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d144      	bne.n	80048a6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	330c      	adds	r3, #12
 8004826:	7812      	ldrb	r2, [r2, #0]
 8004828:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004838:	b29b      	uxth	r3, r3
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004842:	e030      	b.n	80048a6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b02      	cmp	r3, #2
 8004850:	d113      	bne.n	800487a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	330c      	adds	r3, #12
 800485c:	7812      	ldrb	r2, [r2, #0]
 800485e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800486e:	b29b      	uxth	r3, r3
 8004870:	3b01      	subs	r3, #1
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	86da      	strh	r2, [r3, #54]	; 0x36
 8004878:	e015      	b.n	80048a6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800487a:	f7fd f939 	bl	8001af0 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d803      	bhi.n	8004892 <HAL_SPI_Transmit+0x20c>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004890:	d102      	bne.n	8004898 <HAL_SPI_Transmit+0x212>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d106      	bne.n	80048a6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80048a4:	e029      	b.n	80048fa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1c9      	bne.n	8004844 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	6839      	ldr	r1, [r7, #0]
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 fbdf 	bl	8005078 <SPI_EndRxTxTransaction>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2220      	movs	r2, #32
 80048c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10a      	bne.n	80048e4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048ce:	2300      	movs	r3, #0
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	77fb      	strb	r3, [r7, #31]
 80048f0:	e003      	b.n	80048fa <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004902:	7ffb      	ldrb	r3, [r7, #31]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3720      	adds	r7, #32
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af02      	add	r7, sp, #8
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	4613      	mov	r3, r2
 800491a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b01      	cmp	r3, #1
 800492a:	d002      	beq.n	8004932 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800492c:	2302      	movs	r3, #2
 800492e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004930:	e0fb      	b.n	8004b2a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800493a:	d112      	bne.n	8004962 <HAL_SPI_Receive+0x56>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10e      	bne.n	8004962 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2204      	movs	r2, #4
 8004948:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800494c:	88fa      	ldrh	r2, [r7, #6]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	4613      	mov	r3, r2
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	68b9      	ldr	r1, [r7, #8]
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 f8ef 	bl	8004b3c <HAL_SPI_TransmitReceive>
 800495e:	4603      	mov	r3, r0
 8004960:	e0e8      	b.n	8004b34 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004968:	2b01      	cmp	r3, #1
 800496a:	d101      	bne.n	8004970 <HAL_SPI_Receive+0x64>
 800496c:	2302      	movs	r3, #2
 800496e:	e0e1      	b.n	8004b34 <HAL_SPI_Receive+0x228>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004978:	f7fd f8ba 	bl	8001af0 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <HAL_SPI_Receive+0x7e>
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d102      	bne.n	8004990 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800498e:	e0cc      	b.n	8004b2a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2204      	movs	r2, #4
 8004994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	88fa      	ldrh	r2, [r7, #6]
 80049a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	88fa      	ldrh	r2, [r7, #6]
 80049ae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049d6:	d10f      	bne.n	80049f8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049f6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a02:	2b40      	cmp	r3, #64	; 0x40
 8004a04:	d007      	beq.n	8004a16 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a14:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d16a      	bne.n	8004af4 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a1e:	e032      	b.n	8004a86 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d115      	bne.n	8004a5a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f103 020c 	add.w	r2, r3, #12
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3a:	7812      	ldrb	r2, [r2, #0]
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a58:	e015      	b.n	8004a86 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a5a:	f7fd f849 	bl	8001af0 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d803      	bhi.n	8004a72 <HAL_SPI_Receive+0x166>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a70:	d102      	bne.n	8004a78 <HAL_SPI_Receive+0x16c>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d106      	bne.n	8004a86 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004a84:	e051      	b.n	8004b2a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1c7      	bne.n	8004a20 <HAL_SPI_Receive+0x114>
 8004a90:	e035      	b.n	8004afe <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d113      	bne.n	8004ac8 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	b292      	uxth	r2, r2
 8004aac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab2:	1c9a      	adds	r2, r3, #2
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ac6:	e015      	b.n	8004af4 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ac8:	f7fd f812 	bl	8001af0 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d803      	bhi.n	8004ae0 <HAL_SPI_Receive+0x1d4>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ade:	d102      	bne.n	8004ae6 <HAL_SPI_Receive+0x1da>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004af2:	e01a      	b.n	8004b2a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1c9      	bne.n	8004a92 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	6839      	ldr	r1, [r7, #0]
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 fa52 	bl	8004fac <SPI_EndRxTransaction>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2220      	movs	r2, #32
 8004b12:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	75fb      	strb	r3, [r7, #23]
 8004b20:	e003      	b.n	8004b2a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08c      	sub	sp, #48	; 0x30
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
 8004b48:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_SPI_TransmitReceive+0x26>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e198      	b.n	8004e94 <HAL_SPI_TransmitReceive+0x358>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b6a:	f7fc ffc1 	bl	8001af0 <HAL_GetTick>
 8004b6e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004b80:	887b      	ldrh	r3, [r7, #2]
 8004b82:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d00f      	beq.n	8004bac <HAL_SPI_TransmitReceive+0x70>
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b92:	d107      	bne.n	8004ba4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d103      	bne.n	8004ba4 <HAL_SPI_TransmitReceive+0x68>
 8004b9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d003      	beq.n	8004bac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004baa:	e16d      	b.n	8004e88 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d005      	beq.n	8004bbe <HAL_SPI_TransmitReceive+0x82>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <HAL_SPI_TransmitReceive+0x82>
 8004bb8:	887b      	ldrh	r3, [r7, #2]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d103      	bne.n	8004bc6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004bc4:	e160      	b.n	8004e88 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d003      	beq.n	8004bda <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2205      	movs	r2, #5
 8004bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	887a      	ldrh	r2, [r7, #2]
 8004bea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	887a      	ldrh	r2, [r7, #2]
 8004bf0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	887a      	ldrh	r2, [r7, #2]
 8004bfc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	887a      	ldrh	r2, [r7, #2]
 8004c02:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1a:	2b40      	cmp	r3, #64	; 0x40
 8004c1c:	d007      	beq.n	8004c2e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c36:	d17c      	bne.n	8004d32 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <HAL_SPI_TransmitReceive+0x10a>
 8004c40:	8b7b      	ldrh	r3, [r7, #26]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d16a      	bne.n	8004d1c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4a:	881a      	ldrh	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c56:	1c9a      	adds	r2, r3, #2
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c6a:	e057      	b.n	8004d1c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d11b      	bne.n	8004cb2 <HAL_SPI_TransmitReceive+0x176>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d016      	beq.n	8004cb2 <HAL_SPI_TransmitReceive+0x176>
 8004c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d113      	bne.n	8004cb2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	881a      	ldrh	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9a:	1c9a      	adds	r2, r3, #2
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d119      	bne.n	8004cf4 <HAL_SPI_TransmitReceive+0x1b8>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d014      	beq.n	8004cf4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	b292      	uxth	r2, r2
 8004cd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cdc:	1c9a      	adds	r2, r3, #2
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004cf4:	f7fc fefc 	bl	8001af0 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d80b      	bhi.n	8004d1c <HAL_SPI_TransmitReceive+0x1e0>
 8004d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d0a:	d007      	beq.n	8004d1c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004d1a:	e0b5      	b.n	8004e88 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1a2      	bne.n	8004c6c <HAL_SPI_TransmitReceive+0x130>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d19d      	bne.n	8004c6c <HAL_SPI_TransmitReceive+0x130>
 8004d30:	e080      	b.n	8004e34 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <HAL_SPI_TransmitReceive+0x204>
 8004d3a:	8b7b      	ldrh	r3, [r7, #26]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d16f      	bne.n	8004e20 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	330c      	adds	r3, #12
 8004d4a:	7812      	ldrb	r2, [r2, #0]
 8004d4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d66:	e05b      	b.n	8004e20 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d11c      	bne.n	8004db0 <HAL_SPI_TransmitReceive+0x274>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d017      	beq.n	8004db0 <HAL_SPI_TransmitReceive+0x274>
 8004d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d114      	bne.n	8004db0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	330c      	adds	r3, #12
 8004d90:	7812      	ldrb	r2, [r2, #0]
 8004d92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d119      	bne.n	8004df2 <HAL_SPI_TransmitReceive+0x2b6>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d014      	beq.n	8004df2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dee:	2301      	movs	r3, #1
 8004df0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004df2:	f7fc fe7d 	bl	8001af0 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d803      	bhi.n	8004e0a <HAL_SPI_TransmitReceive+0x2ce>
 8004e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e08:	d102      	bne.n	8004e10 <HAL_SPI_TransmitReceive+0x2d4>
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d107      	bne.n	8004e20 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004e1e:	e033      	b.n	8004e88 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d19e      	bne.n	8004d68 <HAL_SPI_TransmitReceive+0x22c>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d199      	bne.n	8004d68 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 f91d 	bl	8005078 <SPI_EndRxTxTransaction>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d006      	beq.n	8004e52 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004e50:	e01a      	b.n	8004e88 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10a      	bne.n	8004e70 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	617b      	str	r3, [r7, #20]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e7e:	e003      	b.n	8004e88 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3730      	adds	r7, #48	; 0x30
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b088      	sub	sp, #32
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004eac:	f7fc fe20 	bl	8001af0 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	1a9b      	subs	r3, r3, r2
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	4413      	add	r3, r2
 8004eba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ebc:	f7fc fe18 	bl	8001af0 <HAL_GetTick>
 8004ec0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ec2:	4b39      	ldr	r3, [pc, #228]	; (8004fa8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	015b      	lsls	r3, r3, #5
 8004ec8:	0d1b      	lsrs	r3, r3, #20
 8004eca:	69fa      	ldr	r2, [r7, #28]
 8004ecc:	fb02 f303 	mul.w	r3, r2, r3
 8004ed0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ed2:	e054      	b.n	8004f7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eda:	d050      	beq.n	8004f7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004edc:	f7fc fe08 	bl	8001af0 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	69fa      	ldr	r2, [r7, #28]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d902      	bls.n	8004ef2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d13d      	bne.n	8004f6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f0a:	d111      	bne.n	8004f30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f14:	d004      	beq.n	8004f20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f1e:	d107      	bne.n	8004f30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f38:	d10f      	bne.n	8004f5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e017      	b.n	8004f9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4013      	ands	r3, r2
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	bf0c      	ite	eq
 8004f8e:	2301      	moveq	r3, #1
 8004f90:	2300      	movne	r3, #0
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	461a      	mov	r2, r3
 8004f96:	79fb      	ldrb	r3, [r7, #7]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d19b      	bne.n	8004ed4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3720      	adds	r7, #32
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20000018 	.word	0x20000018

08004fac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af02      	add	r7, sp, #8
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fc0:	d111      	bne.n	8004fe6 <SPI_EndRxTransaction+0x3a>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fca:	d004      	beq.n	8004fd6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd4:	d107      	bne.n	8004fe6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fe4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fee:	d12a      	bne.n	8005046 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff8:	d012      	beq.n	8005020 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2200      	movs	r2, #0
 8005002:	2180      	movs	r1, #128	; 0x80
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f7ff ff49 	bl	8004e9c <SPI_WaitFlagStateUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d02d      	beq.n	800506c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005014:	f043 0220 	orr.w	r2, r3, #32
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e026      	b.n	800506e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2200      	movs	r2, #0
 8005028:	2101      	movs	r1, #1
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f7ff ff36 	bl	8004e9c <SPI_WaitFlagStateUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d01a      	beq.n	800506c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503a:	f043 0220 	orr.w	r2, r3, #32
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e013      	b.n	800506e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2200      	movs	r2, #0
 800504e:	2101      	movs	r1, #1
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f7ff ff23 	bl	8004e9c <SPI_WaitFlagStateUntilTimeout>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d007      	beq.n	800506c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005060:	f043 0220 	orr.w	r2, r3, #32
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e000      	b.n	800506e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b088      	sub	sp, #32
 800507c:	af02      	add	r7, sp, #8
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2201      	movs	r2, #1
 800508c:	2102      	movs	r1, #2
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f7ff ff04 	bl	8004e9c <SPI_WaitFlagStateUntilTimeout>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d007      	beq.n	80050aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509e:	f043 0220 	orr.w	r2, r3, #32
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e032      	b.n	8005110 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80050aa:	4b1b      	ldr	r3, [pc, #108]	; (8005118 <SPI_EndRxTxTransaction+0xa0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a1b      	ldr	r2, [pc, #108]	; (800511c <SPI_EndRxTxTransaction+0xa4>)
 80050b0:	fba2 2303 	umull	r2, r3, r2, r3
 80050b4:	0d5b      	lsrs	r3, r3, #21
 80050b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050ba:	fb02 f303 	mul.w	r3, r2, r3
 80050be:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050c8:	d112      	bne.n	80050f0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2200      	movs	r2, #0
 80050d2:	2180      	movs	r1, #128	; 0x80
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f7ff fee1 	bl	8004e9c <SPI_WaitFlagStateUntilTimeout>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d016      	beq.n	800510e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e4:	f043 0220 	orr.w	r2, r3, #32
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e00f      	b.n	8005110 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	3b01      	subs	r3, #1
 80050fa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005106:	2b80      	cmp	r3, #128	; 0x80
 8005108:	d0f2      	beq.n	80050f0 <SPI_EndRxTxTransaction+0x78>
 800510a:	e000      	b.n	800510e <SPI_EndRxTxTransaction+0x96>
        break;
 800510c:	bf00      	nop
  }

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	20000018 	.word	0x20000018
 800511c:	165e9f81 	.word	0x165e9f81

08005120 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e041      	b.n	80051b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d106      	bne.n	800514c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7fc f9de 	bl	8001508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3304      	adds	r3, #4
 800515c:	4619      	mov	r1, r3
 800515e:	4610      	mov	r0, r2
 8005160:	f000 f9f0 	bl	8005544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d001      	beq.n	80051d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e04e      	b.n	8005276 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0201 	orr.w	r2, r2, #1
 80051ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a23      	ldr	r2, [pc, #140]	; (8005284 <HAL_TIM_Base_Start_IT+0xc4>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d022      	beq.n	8005240 <HAL_TIM_Base_Start_IT+0x80>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005202:	d01d      	beq.n	8005240 <HAL_TIM_Base_Start_IT+0x80>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a1f      	ldr	r2, [pc, #124]	; (8005288 <HAL_TIM_Base_Start_IT+0xc8>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d018      	beq.n	8005240 <HAL_TIM_Base_Start_IT+0x80>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a1e      	ldr	r2, [pc, #120]	; (800528c <HAL_TIM_Base_Start_IT+0xcc>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d013      	beq.n	8005240 <HAL_TIM_Base_Start_IT+0x80>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a1c      	ldr	r2, [pc, #112]	; (8005290 <HAL_TIM_Base_Start_IT+0xd0>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00e      	beq.n	8005240 <HAL_TIM_Base_Start_IT+0x80>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a1b      	ldr	r2, [pc, #108]	; (8005294 <HAL_TIM_Base_Start_IT+0xd4>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d009      	beq.n	8005240 <HAL_TIM_Base_Start_IT+0x80>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a19      	ldr	r2, [pc, #100]	; (8005298 <HAL_TIM_Base_Start_IT+0xd8>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d004      	beq.n	8005240 <HAL_TIM_Base_Start_IT+0x80>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a18      	ldr	r2, [pc, #96]	; (800529c <HAL_TIM_Base_Start_IT+0xdc>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d111      	bne.n	8005264 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f003 0307 	and.w	r3, r3, #7
 800524a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2b06      	cmp	r3, #6
 8005250:	d010      	beq.n	8005274 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f042 0201 	orr.w	r2, r2, #1
 8005260:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005262:	e007      	b.n	8005274 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0201 	orr.w	r2, r2, #1
 8005272:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	40010000 	.word	0x40010000
 8005288:	40000400 	.word	0x40000400
 800528c:	40000800 	.word	0x40000800
 8005290:	40000c00 	.word	0x40000c00
 8005294:	40010400 	.word	0x40010400
 8005298:	40014000 	.word	0x40014000
 800529c:	40001800 	.word	0x40001800

080052a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0201 	bic.w	r2, r2, #1
 80052b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6a1a      	ldr	r2, [r3, #32]
 80052be:	f241 1311 	movw	r3, #4369	; 0x1111
 80052c2:	4013      	ands	r3, r2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10f      	bne.n	80052e8 <HAL_TIM_Base_Stop_IT+0x48>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6a1a      	ldr	r2, [r3, #32]
 80052ce:	f240 4344 	movw	r3, #1092	; 0x444
 80052d2:	4013      	ands	r3, r2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d107      	bne.n	80052e8 <HAL_TIM_Base_Stop_IT+0x48>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0201 	bic.w	r2, r2, #1
 80052e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b084      	sub	sp, #16
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d020      	beq.n	8005362 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b00      	cmp	r3, #0
 8005328:	d01b      	beq.n	8005362 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f06f 0202 	mvn.w	r2, #2
 8005332:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	f003 0303 	and.w	r3, r3, #3
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f8dc 	bl	8005506 <HAL_TIM_IC_CaptureCallback>
 800534e:	e005      	b.n	800535c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f8ce 	bl	80054f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f8df 	bl	800551a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d020      	beq.n	80053ae <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	2b00      	cmp	r3, #0
 8005374:	d01b      	beq.n	80053ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f06f 0204 	mvn.w	r2, #4
 800537e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f8b6 	bl	8005506 <HAL_TIM_IC_CaptureCallback>
 800539a:	e005      	b.n	80053a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f8a8 	bl	80054f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f8b9 	bl	800551a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d020      	beq.n	80053fa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d01b      	beq.n	80053fa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f06f 0208 	mvn.w	r2, #8
 80053ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2204      	movs	r2, #4
 80053d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	f003 0303 	and.w	r3, r3, #3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f890 	bl	8005506 <HAL_TIM_IC_CaptureCallback>
 80053e6:	e005      	b.n	80053f4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f882 	bl	80054f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f893 	bl	800551a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f003 0310 	and.w	r3, r3, #16
 8005400:	2b00      	cmp	r3, #0
 8005402:	d020      	beq.n	8005446 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f003 0310 	and.w	r3, r3, #16
 800540a:	2b00      	cmp	r3, #0
 800540c:	d01b      	beq.n	8005446 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f06f 0210 	mvn.w	r2, #16
 8005416:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2208      	movs	r2, #8
 800541c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f86a 	bl	8005506 <HAL_TIM_IC_CaptureCallback>
 8005432:	e005      	b.n	8005440 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f85c 	bl	80054f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f86d 	bl	800551a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00c      	beq.n	800546a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d007      	beq.n	800546a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f06f 0201 	mvn.w	r2, #1
 8005462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f83a 	bl	80054de <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00c      	beq.n	800548e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547a:	2b00      	cmp	r3, #0
 800547c:	d007      	beq.n	800548e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f98d 	bl	80057a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00c      	beq.n	80054b2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d007      	beq.n	80054b2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f83e 	bl	800552e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f003 0320 	and.w	r3, r3, #32
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00c      	beq.n	80054d6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f003 0320 	and.w	r3, r3, #32
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d007      	beq.n	80054d6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f06f 0220 	mvn.w	r2, #32
 80054ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f95f 	bl	8005794 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054d6:	bf00      	nop
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
	...

08005544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a46      	ldr	r2, [pc, #280]	; (8005670 <TIM_Base_SetConfig+0x12c>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d013      	beq.n	8005584 <TIM_Base_SetConfig+0x40>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005562:	d00f      	beq.n	8005584 <TIM_Base_SetConfig+0x40>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a43      	ldr	r2, [pc, #268]	; (8005674 <TIM_Base_SetConfig+0x130>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d00b      	beq.n	8005584 <TIM_Base_SetConfig+0x40>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a42      	ldr	r2, [pc, #264]	; (8005678 <TIM_Base_SetConfig+0x134>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d007      	beq.n	8005584 <TIM_Base_SetConfig+0x40>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a41      	ldr	r2, [pc, #260]	; (800567c <TIM_Base_SetConfig+0x138>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d003      	beq.n	8005584 <TIM_Base_SetConfig+0x40>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a40      	ldr	r2, [pc, #256]	; (8005680 <TIM_Base_SetConfig+0x13c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d108      	bne.n	8005596 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a35      	ldr	r2, [pc, #212]	; (8005670 <TIM_Base_SetConfig+0x12c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d02b      	beq.n	80055f6 <TIM_Base_SetConfig+0xb2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a4:	d027      	beq.n	80055f6 <TIM_Base_SetConfig+0xb2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a32      	ldr	r2, [pc, #200]	; (8005674 <TIM_Base_SetConfig+0x130>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d023      	beq.n	80055f6 <TIM_Base_SetConfig+0xb2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a31      	ldr	r2, [pc, #196]	; (8005678 <TIM_Base_SetConfig+0x134>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d01f      	beq.n	80055f6 <TIM_Base_SetConfig+0xb2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a30      	ldr	r2, [pc, #192]	; (800567c <TIM_Base_SetConfig+0x138>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d01b      	beq.n	80055f6 <TIM_Base_SetConfig+0xb2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a2f      	ldr	r2, [pc, #188]	; (8005680 <TIM_Base_SetConfig+0x13c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d017      	beq.n	80055f6 <TIM_Base_SetConfig+0xb2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a2e      	ldr	r2, [pc, #184]	; (8005684 <TIM_Base_SetConfig+0x140>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d013      	beq.n	80055f6 <TIM_Base_SetConfig+0xb2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a2d      	ldr	r2, [pc, #180]	; (8005688 <TIM_Base_SetConfig+0x144>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d00f      	beq.n	80055f6 <TIM_Base_SetConfig+0xb2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a2c      	ldr	r2, [pc, #176]	; (800568c <TIM_Base_SetConfig+0x148>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d00b      	beq.n	80055f6 <TIM_Base_SetConfig+0xb2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a2b      	ldr	r2, [pc, #172]	; (8005690 <TIM_Base_SetConfig+0x14c>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d007      	beq.n	80055f6 <TIM_Base_SetConfig+0xb2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a2a      	ldr	r2, [pc, #168]	; (8005694 <TIM_Base_SetConfig+0x150>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d003      	beq.n	80055f6 <TIM_Base_SetConfig+0xb2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a29      	ldr	r2, [pc, #164]	; (8005698 <TIM_Base_SetConfig+0x154>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d108      	bne.n	8005608 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a10      	ldr	r2, [pc, #64]	; (8005670 <TIM_Base_SetConfig+0x12c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d003      	beq.n	800563c <TIM_Base_SetConfig+0xf8>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a12      	ldr	r2, [pc, #72]	; (8005680 <TIM_Base_SetConfig+0x13c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d103      	bne.n	8005644 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	691a      	ldr	r2, [r3, #16]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b01      	cmp	r3, #1
 8005654:	d105      	bne.n	8005662 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f023 0201 	bic.w	r2, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	611a      	str	r2, [r3, #16]
  }
}
 8005662:	bf00      	nop
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	40010000 	.word	0x40010000
 8005674:	40000400 	.word	0x40000400
 8005678:	40000800 	.word	0x40000800
 800567c:	40000c00 	.word	0x40000c00
 8005680:	40010400 	.word	0x40010400
 8005684:	40014000 	.word	0x40014000
 8005688:	40014400 	.word	0x40014400
 800568c:	40014800 	.word	0x40014800
 8005690:	40001800 	.word	0x40001800
 8005694:	40001c00 	.word	0x40001c00
 8005698:	40002000 	.word	0x40002000

0800569c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e05a      	b.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a21      	ldr	r2, [pc, #132]	; (8005778 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d022      	beq.n	800573e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005700:	d01d      	beq.n	800573e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a1d      	ldr	r2, [pc, #116]	; (800577c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d018      	beq.n	800573e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a1b      	ldr	r2, [pc, #108]	; (8005780 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d013      	beq.n	800573e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a1a      	ldr	r2, [pc, #104]	; (8005784 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00e      	beq.n	800573e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a18      	ldr	r2, [pc, #96]	; (8005788 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d009      	beq.n	800573e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a17      	ldr	r2, [pc, #92]	; (800578c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d004      	beq.n	800573e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a15      	ldr	r2, [pc, #84]	; (8005790 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d10c      	bne.n	8005758 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005744:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	4313      	orrs	r3, r2
 800574e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	40010000 	.word	0x40010000
 800577c:	40000400 	.word	0x40000400
 8005780:	40000800 	.word	0x40000800
 8005784:	40000c00 	.word	0x40000c00
 8005788:	40010400 	.word	0x40010400
 800578c:	40014000 	.word	0x40014000
 8005790:	40001800 	.word	0x40001800

08005794 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e042      	b.n	8005854 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7fb feb8 	bl	8001558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2224      	movs	r2, #36	; 0x24
 80057ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fe91 	bl	8006528 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005814:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695a      	ldr	r2, [r3, #20]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005824:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005834:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2220      	movs	r2, #32
 8005840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b08a      	sub	sp, #40	; 0x28
 8005860:	af02      	add	r7, sp, #8
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	603b      	str	r3, [r7, #0]
 8005868:	4613      	mov	r3, r2
 800586a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b20      	cmp	r3, #32
 800587a:	d175      	bne.n	8005968 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d002      	beq.n	8005888 <HAL_UART_Transmit+0x2c>
 8005882:	88fb      	ldrh	r3, [r7, #6]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e06e      	b.n	800596a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2221      	movs	r2, #33	; 0x21
 8005896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800589a:	f7fc f929 	bl	8001af0 <HAL_GetTick>
 800589e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	88fa      	ldrh	r2, [r7, #6]
 80058a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	88fa      	ldrh	r2, [r7, #6]
 80058aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b4:	d108      	bne.n	80058c8 <HAL_UART_Transmit+0x6c>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d104      	bne.n	80058c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80058be:	2300      	movs	r3, #0
 80058c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	e003      	b.n	80058d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058cc:	2300      	movs	r3, #0
 80058ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058d0:	e02e      	b.n	8005930 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2200      	movs	r2, #0
 80058da:	2180      	movs	r1, #128	; 0x80
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 fbdb 	bl	8006098 <UART_WaitOnFlagUntilTimeout>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e03a      	b.n	800596a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10b      	bne.n	8005912 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005908:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	3302      	adds	r3, #2
 800590e:	61bb      	str	r3, [r7, #24]
 8005910:	e007      	b.n	8005922 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	781a      	ldrb	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	3301      	adds	r3, #1
 8005920:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	b29a      	uxth	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1cb      	bne.n	80058d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2200      	movs	r2, #0
 8005942:	2140      	movs	r1, #64	; 0x40
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 fba7 	bl	8006098 <UART_WaitOnFlagUntilTimeout>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d005      	beq.n	800595c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e006      	b.n	800596a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2220      	movs	r2, #32
 8005960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005964:	2300      	movs	r3, #0
 8005966:	e000      	b.n	800596a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005968:	2302      	movs	r3, #2
  }
}
 800596a:	4618      	mov	r0, r3
 800596c:	3720      	adds	r7, #32
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b084      	sub	sp, #16
 8005976:	af00      	add	r7, sp, #0
 8005978:	60f8      	str	r0, [r7, #12]
 800597a:	60b9      	str	r1, [r7, #8]
 800597c:	4613      	mov	r3, r2
 800597e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b20      	cmp	r3, #32
 800598a:	d112      	bne.n	80059b2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <HAL_UART_Receive_IT+0x26>
 8005992:	88fb      	ldrh	r3, [r7, #6]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e00b      	b.n	80059b4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80059a2:	88fb      	ldrh	r3, [r7, #6]
 80059a4:	461a      	mov	r2, r3
 80059a6:	68b9      	ldr	r1, [r7, #8]
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 fbce 	bl	800614a <UART_Start_Receive_IT>
 80059ae:	4603      	mov	r3, r0
 80059b0:	e000      	b.n	80059b4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80059b2:	2302      	movs	r3, #2
  }
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b09a      	sub	sp, #104	; 0x68
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	330c      	adds	r3, #12
 80059ca:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ce:	e853 3f00 	ldrex	r3, [r3]
 80059d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80059d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059da:	667b      	str	r3, [r7, #100]	; 0x64
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	330c      	adds	r3, #12
 80059e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80059e4:	657a      	str	r2, [r7, #84]	; 0x54
 80059e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80059ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80059ec:	e841 2300 	strex	r3, r2, [r1]
 80059f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1e5      	bne.n	80059c4 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3314      	adds	r3, #20
 80059fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a02:	e853 3f00 	ldrex	r3, [r3]
 8005a06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0a:	f023 0301 	bic.w	r3, r3, #1
 8005a0e:	663b      	str	r3, [r7, #96]	; 0x60
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3314      	adds	r3, #20
 8005a16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a18:	643a      	str	r2, [r7, #64]	; 0x40
 8005a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a20:	e841 2300 	strex	r3, r2, [r1]
 8005a24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1e5      	bne.n	80059f8 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d119      	bne.n	8005a68 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	330c      	adds	r3, #12
 8005a3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	e853 3f00 	ldrex	r3, [r3]
 8005a42:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	f023 0310 	bic.w	r3, r3, #16
 8005a4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	330c      	adds	r3, #12
 8005a52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a5c:	e841 2300 	strex	r3, r2, [r1]
 8005a60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e5      	bne.n	8005a34 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a72:	2b40      	cmp	r3, #64	; 0x40
 8005a74:	d13f      	bne.n	8005af6 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3314      	adds	r3, #20
 8005a7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	e853 3f00 	ldrex	r3, [r3]
 8005a84:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3314      	adds	r3, #20
 8005a94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a96:	61ba      	str	r2, [r7, #24]
 8005a98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9a:	6979      	ldr	r1, [r7, #20]
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	e841 2300 	strex	r3, r2, [r1]
 8005aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1e5      	bne.n	8005a76 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d013      	beq.n	8005ada <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab6:	4a19      	ldr	r2, [pc, #100]	; (8005b1c <HAL_UART_AbortReceive_IT+0x160>)
 8005ab8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fc f9a3 	bl	8001e0a <HAL_DMA_Abort_IT>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d022      	beq.n	8005b10 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	4798      	blx	r3
 8005ad8:	e01a      	b.n	8005b10 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fabc 	bl	800606c <HAL_UART_AbortReceiveCpltCallback>
 8005af4:	e00c      	b.n	8005b10 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 faae 	bl	800606c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3768      	adds	r7, #104	; 0x68
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	080062ad 	.word	0x080062ad

08005b20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b0ba      	sub	sp, #232	; 0xe8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b56:	f003 030f 	and.w	r3, r3, #15
 8005b5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005b5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10f      	bne.n	8005b86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d009      	beq.n	8005b86 <HAL_UART_IRQHandler+0x66>
 8005b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b76:	f003 0320 	and.w	r3, r3, #32
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fc14 	bl	80063ac <UART_Receive_IT>
      return;
 8005b84:	e25b      	b.n	800603e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 80de 	beq.w	8005d4c <HAL_UART_IRQHandler+0x22c>
 8005b90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d106      	bne.n	8005baa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ba0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 80d1 	beq.w	8005d4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00b      	beq.n	8005bce <HAL_UART_IRQHandler+0xae>
 8005bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d005      	beq.n	8005bce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc6:	f043 0201 	orr.w	r2, r3, #1
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bd2:	f003 0304 	and.w	r3, r3, #4
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00b      	beq.n	8005bf2 <HAL_UART_IRQHandler+0xd2>
 8005bda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d005      	beq.n	8005bf2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bea:	f043 0202 	orr.w	r2, r3, #2
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00b      	beq.n	8005c16 <HAL_UART_IRQHandler+0xf6>
 8005bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d005      	beq.n	8005c16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c0e:	f043 0204 	orr.w	r2, r3, #4
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1a:	f003 0308 	and.w	r3, r3, #8
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d011      	beq.n	8005c46 <HAL_UART_IRQHandler+0x126>
 8005c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c26:	f003 0320 	and.w	r3, r3, #32
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d105      	bne.n	8005c3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d005      	beq.n	8005c46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3e:	f043 0208 	orr.w	r2, r3, #8
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 81f2 	beq.w	8006034 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c54:	f003 0320 	and.w	r3, r3, #32
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d008      	beq.n	8005c6e <HAL_UART_IRQHandler+0x14e>
 8005c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 fb9f 	bl	80063ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c78:	2b40      	cmp	r3, #64	; 0x40
 8005c7a:	bf0c      	ite	eq
 8005c7c:	2301      	moveq	r3, #1
 8005c7e:	2300      	movne	r3, #0
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8a:	f003 0308 	and.w	r3, r3, #8
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d103      	bne.n	8005c9a <HAL_UART_IRQHandler+0x17a>
 8005c92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d04f      	beq.n	8005d3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fa8f 	bl	80061be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005caa:	2b40      	cmp	r3, #64	; 0x40
 8005cac:	d141      	bne.n	8005d32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3314      	adds	r3, #20
 8005cb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cbc:	e853 3f00 	ldrex	r3, [r3]
 8005cc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005cc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3314      	adds	r3, #20
 8005cd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005cda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ce6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005cf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1d9      	bne.n	8005cae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d013      	beq.n	8005d2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d06:	4a7e      	ldr	r2, [pc, #504]	; (8005f00 <HAL_UART_IRQHandler+0x3e0>)
 8005d08:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fc f87b 	bl	8001e0a <HAL_DMA_Abort_IT>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d016      	beq.n	8005d48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d24:	4610      	mov	r0, r2
 8005d26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d28:	e00e      	b.n	8005d48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f994 	bl	8006058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d30:	e00a      	b.n	8005d48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f990 	bl	8006058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d38:	e006      	b.n	8005d48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f98c 	bl	8006058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005d46:	e175      	b.n	8006034 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d48:	bf00      	nop
    return;
 8005d4a:	e173      	b.n	8006034 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	f040 814f 	bne.w	8005ff4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d5a:	f003 0310 	and.w	r3, r3, #16
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 8148 	beq.w	8005ff4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d68:	f003 0310 	and.w	r3, r3, #16
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 8141 	beq.w	8005ff4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d72:	2300      	movs	r3, #0
 8005d74:	60bb      	str	r3, [r7, #8]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	60bb      	str	r3, [r7, #8]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	60bb      	str	r3, [r7, #8]
 8005d86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d92:	2b40      	cmp	r3, #64	; 0x40
 8005d94:	f040 80b6 	bne.w	8005f04 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005da4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 8145 	beq.w	8006038 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005db2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005db6:	429a      	cmp	r2, r3
 8005db8:	f080 813e 	bcs.w	8006038 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dc2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dce:	f000 8088 	beq.w	8005ee2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	330c      	adds	r3, #12
 8005dd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ddc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005de0:	e853 3f00 	ldrex	r3, [r3]
 8005de4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005de8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005df0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	330c      	adds	r3, #12
 8005dfa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005dfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e0e:	e841 2300 	strex	r3, r2, [r1]
 8005e12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1d9      	bne.n	8005dd2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	3314      	adds	r3, #20
 8005e24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e30:	f023 0301 	bic.w	r3, r3, #1
 8005e34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3314      	adds	r3, #20
 8005e3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e4e:	e841 2300 	strex	r3, r2, [r1]
 8005e52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1e1      	bne.n	8005e1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3314      	adds	r3, #20
 8005e60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e64:	e853 3f00 	ldrex	r3, [r3]
 8005e68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	3314      	adds	r3, #20
 8005e7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e86:	e841 2300 	strex	r3, r2, [r1]
 8005e8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1e3      	bne.n	8005e5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	330c      	adds	r3, #12
 8005ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eaa:	e853 3f00 	ldrex	r3, [r3]
 8005eae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eb2:	f023 0310 	bic.w	r3, r3, #16
 8005eb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	330c      	adds	r3, #12
 8005ec0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ec4:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ec6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005eca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ecc:	e841 2300 	strex	r3, r2, [r1]
 8005ed0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1e3      	bne.n	8005ea0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fb ff24 	bl	8001d2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f8c1 	bl	8006080 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005efe:	e09b      	b.n	8006038 <HAL_UART_IRQHandler+0x518>
 8005f00:	08006285 	.word	0x08006285
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 808e 	beq.w	800603c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005f20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 8089 	beq.w	800603c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	330c      	adds	r3, #12
 8005f30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	330c      	adds	r3, #12
 8005f4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005f4e:	647a      	str	r2, [r7, #68]	; 0x44
 8005f50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f56:	e841 2300 	strex	r3, r2, [r1]
 8005f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1e3      	bne.n	8005f2a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3314      	adds	r3, #20
 8005f68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	e853 3f00 	ldrex	r3, [r3]
 8005f70:	623b      	str	r3, [r7, #32]
   return(result);
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	f023 0301 	bic.w	r3, r3, #1
 8005f78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3314      	adds	r3, #20
 8005f82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f86:	633a      	str	r2, [r7, #48]	; 0x30
 8005f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f8e:	e841 2300 	strex	r3, r2, [r1]
 8005f92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1e3      	bne.n	8005f62 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	330c      	adds	r3, #12
 8005fae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	e853 3f00 	ldrex	r3, [r3]
 8005fb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f023 0310 	bic.w	r3, r3, #16
 8005fbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	330c      	adds	r3, #12
 8005fc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005fcc:	61fa      	str	r2, [r7, #28]
 8005fce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd0:	69b9      	ldr	r1, [r7, #24]
 8005fd2:	69fa      	ldr	r2, [r7, #28]
 8005fd4:	e841 2300 	strex	r3, r2, [r1]
 8005fd8:	617b      	str	r3, [r7, #20]
   return(result);
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e3      	bne.n	8005fa8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fe6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fea:	4619      	mov	r1, r3
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f847 	bl	8006080 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ff2:	e023      	b.n	800603c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d009      	beq.n	8006014 <HAL_UART_IRQHandler+0x4f4>
 8006000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006008:	2b00      	cmp	r3, #0
 800600a:	d003      	beq.n	8006014 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f965 	bl	80062dc <UART_Transmit_IT>
    return;
 8006012:	e014      	b.n	800603e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00e      	beq.n	800603e <HAL_UART_IRQHandler+0x51e>
 8006020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006028:	2b00      	cmp	r3, #0
 800602a:	d008      	beq.n	800603e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f9a5 	bl	800637c <UART_EndTransmit_IT>
    return;
 8006032:	e004      	b.n	800603e <HAL_UART_IRQHandler+0x51e>
    return;
 8006034:	bf00      	nop
 8006036:	e002      	b.n	800603e <HAL_UART_IRQHandler+0x51e>
      return;
 8006038:	bf00      	nop
 800603a:	e000      	b.n	800603e <HAL_UART_IRQHandler+0x51e>
      return;
 800603c:	bf00      	nop
  }
}
 800603e:	37e8      	adds	r7, #232	; 0xe8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	460b      	mov	r3, r1
 800608a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	603b      	str	r3, [r7, #0]
 80060a4:	4613      	mov	r3, r2
 80060a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060a8:	e03b      	b.n	8006122 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060b0:	d037      	beq.n	8006122 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060b2:	f7fb fd1d 	bl	8001af0 <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	6a3a      	ldr	r2, [r7, #32]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d302      	bcc.n	80060c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e03a      	b.n	8006142 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	f003 0304 	and.w	r3, r3, #4
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d023      	beq.n	8006122 <UART_WaitOnFlagUntilTimeout+0x8a>
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2b80      	cmp	r3, #128	; 0x80
 80060de:	d020      	beq.n	8006122 <UART_WaitOnFlagUntilTimeout+0x8a>
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2b40      	cmp	r3, #64	; 0x40
 80060e4:	d01d      	beq.n	8006122 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0308 	and.w	r3, r3, #8
 80060f0:	2b08      	cmp	r3, #8
 80060f2:	d116      	bne.n	8006122 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80060f4:	2300      	movs	r3, #0
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	617b      	str	r3, [r7, #20]
 8006108:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 f857 	bl	80061be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2208      	movs	r2, #8
 8006114:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e00f      	b.n	8006142 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	4013      	ands	r3, r2
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	429a      	cmp	r2, r3
 8006130:	bf0c      	ite	eq
 8006132:	2301      	moveq	r3, #1
 8006134:	2300      	movne	r3, #0
 8006136:	b2db      	uxtb	r3, r3
 8006138:	461a      	mov	r2, r3
 800613a:	79fb      	ldrb	r3, [r7, #7]
 800613c:	429a      	cmp	r2, r3
 800613e:	d0b4      	beq.n	80060aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3718      	adds	r7, #24
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800614a:	b480      	push	{r7}
 800614c:	b085      	sub	sp, #20
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	4613      	mov	r3, r2
 8006156:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	88fa      	ldrh	r2, [r7, #6]
 8006162:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	88fa      	ldrh	r2, [r7, #6]
 8006168:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2222      	movs	r2, #34	; 0x22
 8006174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d007      	beq.n	8006190 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800618e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	695a      	ldr	r2, [r3, #20]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0201 	orr.w	r2, r2, #1
 800619e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0220 	orr.w	r2, r2, #32
 80061ae:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061be:	b480      	push	{r7}
 80061c0:	b095      	sub	sp, #84	; 0x54
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	330c      	adds	r3, #12
 80061cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d0:	e853 3f00 	ldrex	r3, [r3]
 80061d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	330c      	adds	r3, #12
 80061e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061e6:	643a      	str	r2, [r7, #64]	; 0x40
 80061e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061ee:	e841 2300 	strex	r3, r2, [r1]
 80061f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1e5      	bne.n	80061c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	3314      	adds	r3, #20
 8006200:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	e853 3f00 	ldrex	r3, [r3]
 8006208:	61fb      	str	r3, [r7, #28]
   return(result);
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	f023 0301 	bic.w	r3, r3, #1
 8006210:	64bb      	str	r3, [r7, #72]	; 0x48
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	3314      	adds	r3, #20
 8006218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800621a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800621c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006222:	e841 2300 	strex	r3, r2, [r1]
 8006226:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1e5      	bne.n	80061fa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006232:	2b01      	cmp	r3, #1
 8006234:	d119      	bne.n	800626a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	330c      	adds	r3, #12
 800623c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	e853 3f00 	ldrex	r3, [r3]
 8006244:	60bb      	str	r3, [r7, #8]
   return(result);
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	f023 0310 	bic.w	r3, r3, #16
 800624c:	647b      	str	r3, [r7, #68]	; 0x44
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	330c      	adds	r3, #12
 8006254:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006256:	61ba      	str	r2, [r7, #24]
 8006258:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625a:	6979      	ldr	r1, [r7, #20]
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	e841 2300 	strex	r3, r2, [r1]
 8006262:	613b      	str	r3, [r7, #16]
   return(result);
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1e5      	bne.n	8006236 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2220      	movs	r2, #32
 800626e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006278:	bf00      	nop
 800627a:	3754      	adds	r7, #84	; 0x54
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006290:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f7ff feda 	bl	8006058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062a4:	bf00      	nop
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b8:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f7ff fecc 	bl	800606c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062d4:	bf00      	nop
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b21      	cmp	r3, #33	; 0x21
 80062ee:	d13e      	bne.n	800636e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f8:	d114      	bne.n	8006324 <UART_Transmit_IT+0x48>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d110      	bne.n	8006324 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	461a      	mov	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006316:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	1c9a      	adds	r2, r3, #2
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	621a      	str	r2, [r3, #32]
 8006322:	e008      	b.n	8006336 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	1c59      	adds	r1, r3, #1
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6211      	str	r1, [r2, #32]
 800632e:	781a      	ldrb	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800633a:	b29b      	uxth	r3, r3
 800633c:	3b01      	subs	r3, #1
 800633e:	b29b      	uxth	r3, r3
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	4619      	mov	r1, r3
 8006344:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10f      	bne.n	800636a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68da      	ldr	r2, [r3, #12]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006358:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68da      	ldr	r2, [r3, #12]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006368:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	e000      	b.n	8006370 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800636e:	2302      	movs	r3, #2
  }
}
 8006370:	4618      	mov	r0, r3
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006392:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2220      	movs	r2, #32
 8006398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7ff fe51 	bl	8006044 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08c      	sub	sp, #48	; 0x30
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b22      	cmp	r3, #34	; 0x22
 80063be:	f040 80ae 	bne.w	800651e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ca:	d117      	bne.n	80063fc <UART_Receive_IT+0x50>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d113      	bne.n	80063fc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80063d4:	2300      	movs	r3, #0
 80063d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063dc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f4:	1c9a      	adds	r2, r3, #2
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	629a      	str	r2, [r3, #40]	; 0x28
 80063fa:	e026      	b.n	800644a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006400:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006402:	2300      	movs	r3, #0
 8006404:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640e:	d007      	beq.n	8006420 <UART_Receive_IT+0x74>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10a      	bne.n	800642e <UART_Receive_IT+0x82>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d106      	bne.n	800642e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	b2da      	uxtb	r2, r3
 8006428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642a:	701a      	strb	r2, [r3, #0]
 800642c:	e008      	b.n	8006440 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	b2db      	uxtb	r3, r3
 8006436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800643a:	b2da      	uxtb	r2, r3
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800644e:	b29b      	uxth	r3, r3
 8006450:	3b01      	subs	r3, #1
 8006452:	b29b      	uxth	r3, r3
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	4619      	mov	r1, r3
 8006458:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800645a:	2b00      	cmp	r3, #0
 800645c:	d15d      	bne.n	800651a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0220 	bic.w	r2, r2, #32
 800646c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800647c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	695a      	ldr	r2, [r3, #20]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0201 	bic.w	r2, r2, #1
 800648c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2220      	movs	r2, #32
 8006492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d135      	bne.n	8006510 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	330c      	adds	r3, #12
 80064b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	e853 3f00 	ldrex	r3, [r3]
 80064b8:	613b      	str	r3, [r7, #16]
   return(result);
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f023 0310 	bic.w	r3, r3, #16
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	330c      	adds	r3, #12
 80064c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ca:	623a      	str	r2, [r7, #32]
 80064cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ce:	69f9      	ldr	r1, [r7, #28]
 80064d0:	6a3a      	ldr	r2, [r7, #32]
 80064d2:	e841 2300 	strex	r3, r2, [r1]
 80064d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1e5      	bne.n	80064aa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0310 	and.w	r3, r3, #16
 80064e8:	2b10      	cmp	r3, #16
 80064ea:	d10a      	bne.n	8006502 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064ec:	2300      	movs	r3, #0
 80064ee:	60fb      	str	r3, [r7, #12]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	60fb      	str	r3, [r7, #12]
 8006500:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006506:	4619      	mov	r1, r3
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f7ff fdb9 	bl	8006080 <HAL_UARTEx_RxEventCallback>
 800650e:	e002      	b.n	8006516 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7fb f90b 	bl	800172c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	e002      	b.n	8006520 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800651a:	2300      	movs	r3, #0
 800651c:	e000      	b.n	8006520 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800651e:	2302      	movs	r3, #2
  }
}
 8006520:	4618      	mov	r0, r3
 8006522:	3730      	adds	r7, #48	; 0x30
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800652c:	b0c0      	sub	sp, #256	; 0x100
 800652e:	af00      	add	r7, sp, #0
 8006530:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006544:	68d9      	ldr	r1, [r3, #12]
 8006546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	ea40 0301 	orr.w	r3, r0, r1
 8006550:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	431a      	orrs	r2, r3
 8006560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	431a      	orrs	r2, r3
 8006568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	4313      	orrs	r3, r2
 8006570:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006580:	f021 010c 	bic.w	r1, r1, #12
 8006584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800658e:	430b      	orrs	r3, r1
 8006590:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800659e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a2:	6999      	ldr	r1, [r3, #24]
 80065a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	ea40 0301 	orr.w	r3, r0, r1
 80065ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	4b8f      	ldr	r3, [pc, #572]	; (80067f4 <UART_SetConfig+0x2cc>)
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d005      	beq.n	80065c8 <UART_SetConfig+0xa0>
 80065bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	4b8d      	ldr	r3, [pc, #564]	; (80067f8 <UART_SetConfig+0x2d0>)
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d104      	bne.n	80065d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065c8:	f7fd faf4 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 80065cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80065d0:	e003      	b.n	80065da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065d2:	f7fd fadb 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 80065d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065e4:	f040 810c 	bne.w	8006800 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065ec:	2200      	movs	r2, #0
 80065ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80065f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80065fa:	4622      	mov	r2, r4
 80065fc:	462b      	mov	r3, r5
 80065fe:	1891      	adds	r1, r2, r2
 8006600:	65b9      	str	r1, [r7, #88]	; 0x58
 8006602:	415b      	adcs	r3, r3
 8006604:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006606:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800660a:	4621      	mov	r1, r4
 800660c:	eb12 0801 	adds.w	r8, r2, r1
 8006610:	4629      	mov	r1, r5
 8006612:	eb43 0901 	adc.w	r9, r3, r1
 8006616:	f04f 0200 	mov.w	r2, #0
 800661a:	f04f 0300 	mov.w	r3, #0
 800661e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800662a:	4690      	mov	r8, r2
 800662c:	4699      	mov	r9, r3
 800662e:	4623      	mov	r3, r4
 8006630:	eb18 0303 	adds.w	r3, r8, r3
 8006634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006638:	462b      	mov	r3, r5
 800663a:	eb49 0303 	adc.w	r3, r9, r3
 800663e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800664e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006652:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006656:	460b      	mov	r3, r1
 8006658:	18db      	adds	r3, r3, r3
 800665a:	653b      	str	r3, [r7, #80]	; 0x50
 800665c:	4613      	mov	r3, r2
 800665e:	eb42 0303 	adc.w	r3, r2, r3
 8006662:	657b      	str	r3, [r7, #84]	; 0x54
 8006664:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006668:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800666c:	f7f9 fdc6 	bl	80001fc <__aeabi_uldivmod>
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	4b61      	ldr	r3, [pc, #388]	; (80067fc <UART_SetConfig+0x2d4>)
 8006676:	fba3 2302 	umull	r2, r3, r3, r2
 800667a:	095b      	lsrs	r3, r3, #5
 800667c:	011c      	lsls	r4, r3, #4
 800667e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006682:	2200      	movs	r2, #0
 8006684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006688:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800668c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006690:	4642      	mov	r2, r8
 8006692:	464b      	mov	r3, r9
 8006694:	1891      	adds	r1, r2, r2
 8006696:	64b9      	str	r1, [r7, #72]	; 0x48
 8006698:	415b      	adcs	r3, r3
 800669a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800669c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066a0:	4641      	mov	r1, r8
 80066a2:	eb12 0a01 	adds.w	sl, r2, r1
 80066a6:	4649      	mov	r1, r9
 80066a8:	eb43 0b01 	adc.w	fp, r3, r1
 80066ac:	f04f 0200 	mov.w	r2, #0
 80066b0:	f04f 0300 	mov.w	r3, #0
 80066b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066c0:	4692      	mov	sl, r2
 80066c2:	469b      	mov	fp, r3
 80066c4:	4643      	mov	r3, r8
 80066c6:	eb1a 0303 	adds.w	r3, sl, r3
 80066ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066ce:	464b      	mov	r3, r9
 80066d0:	eb4b 0303 	adc.w	r3, fp, r3
 80066d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80066d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80066e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80066ec:	460b      	mov	r3, r1
 80066ee:	18db      	adds	r3, r3, r3
 80066f0:	643b      	str	r3, [r7, #64]	; 0x40
 80066f2:	4613      	mov	r3, r2
 80066f4:	eb42 0303 	adc.w	r3, r2, r3
 80066f8:	647b      	str	r3, [r7, #68]	; 0x44
 80066fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006702:	f7f9 fd7b 	bl	80001fc <__aeabi_uldivmod>
 8006706:	4602      	mov	r2, r0
 8006708:	460b      	mov	r3, r1
 800670a:	4611      	mov	r1, r2
 800670c:	4b3b      	ldr	r3, [pc, #236]	; (80067fc <UART_SetConfig+0x2d4>)
 800670e:	fba3 2301 	umull	r2, r3, r3, r1
 8006712:	095b      	lsrs	r3, r3, #5
 8006714:	2264      	movs	r2, #100	; 0x64
 8006716:	fb02 f303 	mul.w	r3, r2, r3
 800671a:	1acb      	subs	r3, r1, r3
 800671c:	00db      	lsls	r3, r3, #3
 800671e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006722:	4b36      	ldr	r3, [pc, #216]	; (80067fc <UART_SetConfig+0x2d4>)
 8006724:	fba3 2302 	umull	r2, r3, r3, r2
 8006728:	095b      	lsrs	r3, r3, #5
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006730:	441c      	add	r4, r3
 8006732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006736:	2200      	movs	r2, #0
 8006738:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800673c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006740:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006744:	4642      	mov	r2, r8
 8006746:	464b      	mov	r3, r9
 8006748:	1891      	adds	r1, r2, r2
 800674a:	63b9      	str	r1, [r7, #56]	; 0x38
 800674c:	415b      	adcs	r3, r3
 800674e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006750:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006754:	4641      	mov	r1, r8
 8006756:	1851      	adds	r1, r2, r1
 8006758:	6339      	str	r1, [r7, #48]	; 0x30
 800675a:	4649      	mov	r1, r9
 800675c:	414b      	adcs	r3, r1
 800675e:	637b      	str	r3, [r7, #52]	; 0x34
 8006760:	f04f 0200 	mov.w	r2, #0
 8006764:	f04f 0300 	mov.w	r3, #0
 8006768:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800676c:	4659      	mov	r1, fp
 800676e:	00cb      	lsls	r3, r1, #3
 8006770:	4651      	mov	r1, sl
 8006772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006776:	4651      	mov	r1, sl
 8006778:	00ca      	lsls	r2, r1, #3
 800677a:	4610      	mov	r0, r2
 800677c:	4619      	mov	r1, r3
 800677e:	4603      	mov	r3, r0
 8006780:	4642      	mov	r2, r8
 8006782:	189b      	adds	r3, r3, r2
 8006784:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006788:	464b      	mov	r3, r9
 800678a:	460a      	mov	r2, r1
 800678c:	eb42 0303 	adc.w	r3, r2, r3
 8006790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80067a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80067a8:	460b      	mov	r3, r1
 80067aa:	18db      	adds	r3, r3, r3
 80067ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ae:	4613      	mov	r3, r2
 80067b0:	eb42 0303 	adc.w	r3, r2, r3
 80067b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80067be:	f7f9 fd1d 	bl	80001fc <__aeabi_uldivmod>
 80067c2:	4602      	mov	r2, r0
 80067c4:	460b      	mov	r3, r1
 80067c6:	4b0d      	ldr	r3, [pc, #52]	; (80067fc <UART_SetConfig+0x2d4>)
 80067c8:	fba3 1302 	umull	r1, r3, r3, r2
 80067cc:	095b      	lsrs	r3, r3, #5
 80067ce:	2164      	movs	r1, #100	; 0x64
 80067d0:	fb01 f303 	mul.w	r3, r1, r3
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	3332      	adds	r3, #50	; 0x32
 80067da:	4a08      	ldr	r2, [pc, #32]	; (80067fc <UART_SetConfig+0x2d4>)
 80067dc:	fba2 2303 	umull	r2, r3, r2, r3
 80067e0:	095b      	lsrs	r3, r3, #5
 80067e2:	f003 0207 	and.w	r2, r3, #7
 80067e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4422      	add	r2, r4
 80067ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067f0:	e106      	b.n	8006a00 <UART_SetConfig+0x4d8>
 80067f2:	bf00      	nop
 80067f4:	40011000 	.word	0x40011000
 80067f8:	40011400 	.word	0x40011400
 80067fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006800:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006804:	2200      	movs	r2, #0
 8006806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800680a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800680e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006812:	4642      	mov	r2, r8
 8006814:	464b      	mov	r3, r9
 8006816:	1891      	adds	r1, r2, r2
 8006818:	6239      	str	r1, [r7, #32]
 800681a:	415b      	adcs	r3, r3
 800681c:	627b      	str	r3, [r7, #36]	; 0x24
 800681e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006822:	4641      	mov	r1, r8
 8006824:	1854      	adds	r4, r2, r1
 8006826:	4649      	mov	r1, r9
 8006828:	eb43 0501 	adc.w	r5, r3, r1
 800682c:	f04f 0200 	mov.w	r2, #0
 8006830:	f04f 0300 	mov.w	r3, #0
 8006834:	00eb      	lsls	r3, r5, #3
 8006836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800683a:	00e2      	lsls	r2, r4, #3
 800683c:	4614      	mov	r4, r2
 800683e:	461d      	mov	r5, r3
 8006840:	4643      	mov	r3, r8
 8006842:	18e3      	adds	r3, r4, r3
 8006844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006848:	464b      	mov	r3, r9
 800684a:	eb45 0303 	adc.w	r3, r5, r3
 800684e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800685e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006862:	f04f 0200 	mov.w	r2, #0
 8006866:	f04f 0300 	mov.w	r3, #0
 800686a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800686e:	4629      	mov	r1, r5
 8006870:	008b      	lsls	r3, r1, #2
 8006872:	4621      	mov	r1, r4
 8006874:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006878:	4621      	mov	r1, r4
 800687a:	008a      	lsls	r2, r1, #2
 800687c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006880:	f7f9 fcbc 	bl	80001fc <__aeabi_uldivmod>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	4b60      	ldr	r3, [pc, #384]	; (8006a0c <UART_SetConfig+0x4e4>)
 800688a:	fba3 2302 	umull	r2, r3, r3, r2
 800688e:	095b      	lsrs	r3, r3, #5
 8006890:	011c      	lsls	r4, r3, #4
 8006892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006896:	2200      	movs	r2, #0
 8006898:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800689c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80068a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80068a4:	4642      	mov	r2, r8
 80068a6:	464b      	mov	r3, r9
 80068a8:	1891      	adds	r1, r2, r2
 80068aa:	61b9      	str	r1, [r7, #24]
 80068ac:	415b      	adcs	r3, r3
 80068ae:	61fb      	str	r3, [r7, #28]
 80068b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068b4:	4641      	mov	r1, r8
 80068b6:	1851      	adds	r1, r2, r1
 80068b8:	6139      	str	r1, [r7, #16]
 80068ba:	4649      	mov	r1, r9
 80068bc:	414b      	adcs	r3, r1
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	f04f 0200 	mov.w	r2, #0
 80068c4:	f04f 0300 	mov.w	r3, #0
 80068c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068cc:	4659      	mov	r1, fp
 80068ce:	00cb      	lsls	r3, r1, #3
 80068d0:	4651      	mov	r1, sl
 80068d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068d6:	4651      	mov	r1, sl
 80068d8:	00ca      	lsls	r2, r1, #3
 80068da:	4610      	mov	r0, r2
 80068dc:	4619      	mov	r1, r3
 80068de:	4603      	mov	r3, r0
 80068e0:	4642      	mov	r2, r8
 80068e2:	189b      	adds	r3, r3, r2
 80068e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068e8:	464b      	mov	r3, r9
 80068ea:	460a      	mov	r2, r1
 80068ec:	eb42 0303 	adc.w	r3, r2, r3
 80068f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80068fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006900:	f04f 0200 	mov.w	r2, #0
 8006904:	f04f 0300 	mov.w	r3, #0
 8006908:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800690c:	4649      	mov	r1, r9
 800690e:	008b      	lsls	r3, r1, #2
 8006910:	4641      	mov	r1, r8
 8006912:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006916:	4641      	mov	r1, r8
 8006918:	008a      	lsls	r2, r1, #2
 800691a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800691e:	f7f9 fc6d 	bl	80001fc <__aeabi_uldivmod>
 8006922:	4602      	mov	r2, r0
 8006924:	460b      	mov	r3, r1
 8006926:	4611      	mov	r1, r2
 8006928:	4b38      	ldr	r3, [pc, #224]	; (8006a0c <UART_SetConfig+0x4e4>)
 800692a:	fba3 2301 	umull	r2, r3, r3, r1
 800692e:	095b      	lsrs	r3, r3, #5
 8006930:	2264      	movs	r2, #100	; 0x64
 8006932:	fb02 f303 	mul.w	r3, r2, r3
 8006936:	1acb      	subs	r3, r1, r3
 8006938:	011b      	lsls	r3, r3, #4
 800693a:	3332      	adds	r3, #50	; 0x32
 800693c:	4a33      	ldr	r2, [pc, #204]	; (8006a0c <UART_SetConfig+0x4e4>)
 800693e:	fba2 2303 	umull	r2, r3, r2, r3
 8006942:	095b      	lsrs	r3, r3, #5
 8006944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006948:	441c      	add	r4, r3
 800694a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800694e:	2200      	movs	r2, #0
 8006950:	673b      	str	r3, [r7, #112]	; 0x70
 8006952:	677a      	str	r2, [r7, #116]	; 0x74
 8006954:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006958:	4642      	mov	r2, r8
 800695a:	464b      	mov	r3, r9
 800695c:	1891      	adds	r1, r2, r2
 800695e:	60b9      	str	r1, [r7, #8]
 8006960:	415b      	adcs	r3, r3
 8006962:	60fb      	str	r3, [r7, #12]
 8006964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006968:	4641      	mov	r1, r8
 800696a:	1851      	adds	r1, r2, r1
 800696c:	6039      	str	r1, [r7, #0]
 800696e:	4649      	mov	r1, r9
 8006970:	414b      	adcs	r3, r1
 8006972:	607b      	str	r3, [r7, #4]
 8006974:	f04f 0200 	mov.w	r2, #0
 8006978:	f04f 0300 	mov.w	r3, #0
 800697c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006980:	4659      	mov	r1, fp
 8006982:	00cb      	lsls	r3, r1, #3
 8006984:	4651      	mov	r1, sl
 8006986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800698a:	4651      	mov	r1, sl
 800698c:	00ca      	lsls	r2, r1, #3
 800698e:	4610      	mov	r0, r2
 8006990:	4619      	mov	r1, r3
 8006992:	4603      	mov	r3, r0
 8006994:	4642      	mov	r2, r8
 8006996:	189b      	adds	r3, r3, r2
 8006998:	66bb      	str	r3, [r7, #104]	; 0x68
 800699a:	464b      	mov	r3, r9
 800699c:	460a      	mov	r2, r1
 800699e:	eb42 0303 	adc.w	r3, r2, r3
 80069a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	663b      	str	r3, [r7, #96]	; 0x60
 80069ae:	667a      	str	r2, [r7, #100]	; 0x64
 80069b0:	f04f 0200 	mov.w	r2, #0
 80069b4:	f04f 0300 	mov.w	r3, #0
 80069b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80069bc:	4649      	mov	r1, r9
 80069be:	008b      	lsls	r3, r1, #2
 80069c0:	4641      	mov	r1, r8
 80069c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069c6:	4641      	mov	r1, r8
 80069c8:	008a      	lsls	r2, r1, #2
 80069ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80069ce:	f7f9 fc15 	bl	80001fc <__aeabi_uldivmod>
 80069d2:	4602      	mov	r2, r0
 80069d4:	460b      	mov	r3, r1
 80069d6:	4b0d      	ldr	r3, [pc, #52]	; (8006a0c <UART_SetConfig+0x4e4>)
 80069d8:	fba3 1302 	umull	r1, r3, r3, r2
 80069dc:	095b      	lsrs	r3, r3, #5
 80069de:	2164      	movs	r1, #100	; 0x64
 80069e0:	fb01 f303 	mul.w	r3, r1, r3
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	3332      	adds	r3, #50	; 0x32
 80069ea:	4a08      	ldr	r2, [pc, #32]	; (8006a0c <UART_SetConfig+0x4e4>)
 80069ec:	fba2 2303 	umull	r2, r3, r2, r3
 80069f0:	095b      	lsrs	r3, r3, #5
 80069f2:	f003 020f 	and.w	r2, r3, #15
 80069f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4422      	add	r2, r4
 80069fe:	609a      	str	r2, [r3, #8]
}
 8006a00:	bf00      	nop
 8006a02:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a06:	46bd      	mov	sp, r7
 8006a08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a0c:	51eb851f 	.word	0x51eb851f

08006a10 <memset>:
 8006a10:	4402      	add	r2, r0
 8006a12:	4603      	mov	r3, r0
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d100      	bne.n	8006a1a <memset+0xa>
 8006a18:	4770      	bx	lr
 8006a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a1e:	e7f9      	b.n	8006a14 <memset+0x4>

08006a20 <__libc_init_array>:
 8006a20:	b570      	push	{r4, r5, r6, lr}
 8006a22:	4d0d      	ldr	r5, [pc, #52]	; (8006a58 <__libc_init_array+0x38>)
 8006a24:	4c0d      	ldr	r4, [pc, #52]	; (8006a5c <__libc_init_array+0x3c>)
 8006a26:	1b64      	subs	r4, r4, r5
 8006a28:	10a4      	asrs	r4, r4, #2
 8006a2a:	2600      	movs	r6, #0
 8006a2c:	42a6      	cmp	r6, r4
 8006a2e:	d109      	bne.n	8006a44 <__libc_init_array+0x24>
 8006a30:	4d0b      	ldr	r5, [pc, #44]	; (8006a60 <__libc_init_array+0x40>)
 8006a32:	4c0c      	ldr	r4, [pc, #48]	; (8006a64 <__libc_init_array+0x44>)
 8006a34:	f000 f818 	bl	8006a68 <_init>
 8006a38:	1b64      	subs	r4, r4, r5
 8006a3a:	10a4      	asrs	r4, r4, #2
 8006a3c:	2600      	movs	r6, #0
 8006a3e:	42a6      	cmp	r6, r4
 8006a40:	d105      	bne.n	8006a4e <__libc_init_array+0x2e>
 8006a42:	bd70      	pop	{r4, r5, r6, pc}
 8006a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a48:	4798      	blx	r3
 8006a4a:	3601      	adds	r6, #1
 8006a4c:	e7ee      	b.n	8006a2c <__libc_init_array+0xc>
 8006a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a52:	4798      	blx	r3
 8006a54:	3601      	adds	r6, #1
 8006a56:	e7f2      	b.n	8006a3e <__libc_init_array+0x1e>
 8006a58:	08006b10 	.word	0x08006b10
 8006a5c:	08006b10 	.word	0x08006b10
 8006a60:	08006b10 	.word	0x08006b10
 8006a64:	08006b14 	.word	0x08006b14

08006a68 <_init>:
 8006a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a6a:	bf00      	nop
 8006a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a6e:	bc08      	pop	{r3}
 8006a70:	469e      	mov	lr, r3
 8006a72:	4770      	bx	lr

08006a74 <_fini>:
 8006a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a76:	bf00      	nop
 8006a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a7a:	bc08      	pop	{r3}
 8006a7c:	469e      	mov	lr, r3
 8006a7e:	4770      	bx	lr
