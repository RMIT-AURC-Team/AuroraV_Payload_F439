
AuroraV_Payload_F439.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008414  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080085c0  080085c0  000185c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008678  08008678  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08008678  08008678  00018678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008680  08008680  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008680  08008680  00018680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008684  08008684  00018684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08008688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          000005e0  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000608  20000608  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001bf15  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d1d  00000000  00000000  0003bfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016a8  00000000  00000000  0003fcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011a4  00000000  00000000  00041378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027b28  00000000  00000000  0004251c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d11e  00000000  00000000  0006a044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e9d27  00000000  00000000  00087162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005ec8  00000000  00000000  00170e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00176d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000028 	.word	0x20000028
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080085a8 	.word	0x080085a8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	080085a8 	.word	0x080085a8

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <init_accel>:
uint8_t OUT_Y_L 				= 0x34;
uint8_t OUT_Y_H 				= 0x35;
uint8_t OUT_Z_L 				= 0x36;
uint8_t OUT_Z_H 				= 0x37;

HAL_StatusTypeDef init_accel(I2C_HandleTypeDef* hi2c) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;

	// Set standby mode
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &POWER_CTL_REG, 0x00);
 8000500:	4b14      	ldr	r3, [pc, #80]	; (8000554 <init_accel+0x5c>)
 8000502:	7819      	ldrb	r1, [r3, #0]
 8000504:	2300      	movs	r3, #0
 8000506:	4a14      	ldr	r2, [pc, #80]	; (8000558 <init_accel+0x60>)
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f000 fbac 	bl	8000c66 <i2c_write_reg>
 800050e:	4603      	mov	r3, r0
 8000510:	73fb      	strb	r3, [r7, #15]

	// Set to 200G right justified
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &DATA_FORMAT_REG, RIGHT_JUST);
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <init_accel+0x5c>)
 8000514:	7819      	ldrb	r1, [r3, #0]
 8000516:	230b      	movs	r3, #11
 8000518:	4a10      	ldr	r2, [pc, #64]	; (800055c <init_accel+0x64>)
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f000 fba3 	bl	8000c66 <i2c_write_reg>
 8000520:	4603      	mov	r3, r0
 8000522:	73fb      	strb	r3, [r7, #15]

	// Set to 1kHz ODR
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &BW_RATE_REG, MASK_1kHz);
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <init_accel+0x5c>)
 8000526:	7819      	ldrb	r1, [r3, #0]
 8000528:	230a      	movs	r3, #10
 800052a:	4a0d      	ldr	r2, [pc, #52]	; (8000560 <init_accel+0x68>)
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f000 fb9a 	bl	8000c66 <i2c_write_reg>
 8000532:	4603      	mov	r3, r0
 8000534:	73fb      	strb	r3, [r7, #15]

	// Write the offset registers
//	ret = writeOffset(hi2c);

	// Start measuring
	ret = i2c_write_reg(hi2c, ADXL314_ADDR, &POWER_CTL_REG, START_MEAS);
 8000536:	4b07      	ldr	r3, [pc, #28]	; (8000554 <init_accel+0x5c>)
 8000538:	7819      	ldrb	r1, [r3, #0]
 800053a:	2308      	movs	r3, #8
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <init_accel+0x60>)
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f000 fb91 	bl	8000c66 <i2c_write_reg>
 8000544:	4603      	mov	r3, r0
 8000546:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000548:	7bfb      	ldrb	r3, [r7, #15]
}
 800054a:	4618      	mov	r0, r3
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000000 	.word	0x20000000
 8000558:	20000002 	.word	0x20000002
 800055c:	20000003 	.word	0x20000003
 8000560:	20000001 	.word	0x20000001

08000564 <readAccelerometer>:
void readAccelerometer(uint8_t values[6], I2C_HandleTypeDef* hi2c) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af02      	add	r7, sp, #8
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < 6; i++) {
 800056e:	2300      	movs	r3, #0
 8000570:	73fb      	strb	r3, [r7, #15]
 8000572:	e007      	b.n	8000584 <readAccelerometer+0x20>
		values[i] = 0x00;
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	4413      	add	r3, r2
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 6; i++) {
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	3301      	adds	r3, #1
 8000582:	73fb      	strb	r3, [r7, #15]
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	2b05      	cmp	r3, #5
 8000588:	d9f4      	bls.n	8000574 <readAccelerometer+0x10>
	}

	i2c_burst_read(hi2c, ADXL314_ADDR, OUT_X_L, 6, values);
 800058a:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <readAccelerometer+0x44>)
 800058c:	7819      	ldrb	r1, [r3, #0]
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <readAccelerometer+0x48>)
 8000590:	781a      	ldrb	r2, [r3, #0]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2306      	movs	r3, #6
 8000598:	6838      	ldr	r0, [r7, #0]
 800059a:	f000 fb2f 	bl	8000bfc <i2c_burst_read>
}
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000000 	.word	0x20000000
 80005ac:	20000004 	.word	0x20000004

080005b0 <readAccel_whoami>:

uint8_t readAccel_whoami(I2C_HandleTypeDef* hi2c) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	uint8_t data = 0x00;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]
	i2c_read_reg(hi2c, &data, ADXL314_ADDR, &WHOAMI);
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <readAccel_whoami+0x28>)
 80005be:	781a      	ldrb	r2, [r3, #0]
 80005c0:	f107 010f 	add.w	r1, r7, #15
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <readAccel_whoami+0x2c>)
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f000 faef 	bl	8000baa <i2c_read_reg>

	return data;
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000
 80005dc:	20000044 	.word	0x20000044

080005e0 <init_bme280>:
uint8_t OUT_HUM_H 			= 0xFD;
uint8_t CALIB_ST_1			= 0x88;
uint8_t CALIB_ST_2			= 0xE1;


HAL_StatusTypeDef init_bme280(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 80005ec:	78fb      	ldrb	r3, [r7, #3]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 f8e0 	bl	80007b4 <getBME280Config>
 80005f4:	4603      	mov	r3, r0
 80005f6:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef ret;
	uint8_t control_reg = 0x00;
 80005f8:	2300      	movs	r3, #0
 80005fa:	737b      	strb	r3, [r7, #13]

	// Reset the sensor
	ret =  i2c_write_reg(hi2c, bme_addr, &RST_REG, RST);
 80005fc:	7bf9      	ldrb	r1, [r7, #15]
 80005fe:	23b6      	movs	r3, #182	; 0xb6
 8000600:	4a19      	ldr	r2, [pc, #100]	; (8000668 <init_bme280+0x88>)
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f000 fb2f 	bl	8000c66 <i2c_write_reg>
 8000608:	4603      	mov	r3, r0
 800060a:	73bb      	strb	r3, [r7, #14]

	// Set humidity control register
	i2c_read_reg(hi2c, &control_reg, bme_addr, &CTRL_HUM_REG);
 800060c:	7bfa      	ldrb	r2, [r7, #15]
 800060e:	f107 010d 	add.w	r1, r7, #13
 8000612:	4b16      	ldr	r3, [pc, #88]	; (800066c <init_bme280+0x8c>)
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 fac8 	bl	8000baa <i2c_read_reg>
	control_reg = control_reg & 0xF8;
 800061a:	7b7b      	ldrb	r3, [r7, #13]
 800061c:	f023 0307 	bic.w	r3, r3, #7
 8000620:	b2db      	uxtb	r3, r3
 8000622:	737b      	strb	r3, [r7, #13]
	control_reg = control_reg | CTRL_HUM_MSK;
 8000624:	7b7b      	ldrb	r3, [r7, #13]
 8000626:	f043 0301 	orr.w	r3, r3, #1
 800062a:	b2db      	uxtb	r3, r3
 800062c:	737b      	strb	r3, [r7, #13]
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_HUM_REG, control_reg);
 800062e:	7b7b      	ldrb	r3, [r7, #13]
 8000630:	7bf9      	ldrb	r1, [r7, #15]
 8000632:	4a0e      	ldr	r2, [pc, #56]	; (800066c <init_bme280+0x8c>)
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f000 fb16 	bl	8000c66 <i2c_write_reg>
 800063a:	4603      	mov	r3, r0
 800063c:	73bb      	strb	r3, [r7, #14]

	// Set measure control register
	ret = i2c_write_reg(hi2c, bme_addr, &CTRL_MEAS_REG, CTRL_MEAS_MSK);
 800063e:	7bf9      	ldrb	r1, [r7, #15]
 8000640:	2327      	movs	r3, #39	; 0x27
 8000642:	4a0b      	ldr	r2, [pc, #44]	; (8000670 <init_bme280+0x90>)
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f000 fb0e 	bl	8000c66 <i2c_write_reg>
 800064a:	4603      	mov	r3, r0
 800064c:	73bb      	strb	r3, [r7, #14]

	// Set the config register
	ret = i2c_write_reg(hi2c, bme_addr, &CONF_REG, CONF_MSK);
 800064e:	7bf9      	ldrb	r1, [r7, #15]
 8000650:	2300      	movs	r3, #0
 8000652:	4a08      	ldr	r2, [pc, #32]	; (8000674 <init_bme280+0x94>)
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f000 fb06 	bl	8000c66 <i2c_write_reg>
 800065a:	4603      	mov	r3, r0
 800065c:	73bb      	strb	r3, [r7, #14]

	return ret;
 800065e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000006 	.word	0x20000006
 800066c:	20000007 	.word	0x20000007
 8000670:	20000008 	.word	0x20000008
 8000674:	20000009 	.word	0x20000009

08000678 <readTempHumPres>:

void readTempHumPres(uint8_t values[6], I2C_HandleTypeDef* hi2c, uint8_t bme) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af02      	add	r7, sp, #8
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	4613      	mov	r3, r2
 8000684:	71fb      	strb	r3, [r7, #7]
	uint8_t readings[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8000686:	4a27      	ldr	r2, [pc, #156]	; (8000724 <readTempHumPres+0xac>)
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000690:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	4618      	mov	r0, r3
 8000698:	f000 f88c 	bl	80007b4 <getBME280Config>
 800069c:	4603      	mov	r3, r0
 800069e:	777b      	strb	r3, [r7, #29]
	i2c_burst_read(hi2c, bme_addr, OUT_PRESS_H, 8, readings);
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <readTempHumPres+0xb0>)
 80006a2:	781a      	ldrb	r2, [r3, #0]
 80006a4:	7f79      	ldrb	r1, [r7, #29]
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2308      	movs	r3, #8
 80006ae:	68b8      	ldr	r0, [r7, #8]
 80006b0:	f000 faa4 	bl	8000bfc <i2c_burst_read>

	// Clear the 0 values on the xlsb registers
	uint8_t j = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 8; i++) {
 80006b8:	2300      	movs	r3, #0
 80006ba:	77bb      	strb	r3, [r7, #30]
 80006bc:	e014      	b.n	80006e8 <readTempHumPres+0x70>
        if(i != 2 && i != 5) {  // if the index is not 2 or 5
 80006be:	7fbb      	ldrb	r3, [r7, #30]
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	d00e      	beq.n	80006e2 <readTempHumPres+0x6a>
 80006c4:	7fbb      	ldrb	r3, [r7, #30]
 80006c6:	2b05      	cmp	r3, #5
 80006c8:	d00b      	beq.n	80006e2 <readTempHumPres+0x6a>
        	values[j] = readings[i];
 80006ca:	7fba      	ldrb	r2, [r7, #30]
 80006cc:	7ffb      	ldrb	r3, [r7, #31]
 80006ce:	68f9      	ldr	r1, [r7, #12]
 80006d0:	440b      	add	r3, r1
 80006d2:	3220      	adds	r2, #32
 80006d4:	443a      	add	r2, r7
 80006d6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80006da:	701a      	strb	r2, [r3, #0]
            j++;
 80006dc:	7ffb      	ldrb	r3, [r7, #31]
 80006de:	3301      	adds	r3, #1
 80006e0:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 8; i++) {
 80006e2:	7fbb      	ldrb	r3, [r7, #30]
 80006e4:	3301      	adds	r3, #1
 80006e6:	77bb      	strb	r3, [r7, #30]
 80006e8:	7fbb      	ldrb	r3, [r7, #30]
 80006ea:	2b07      	cmp	r3, #7
 80006ec:	d9e7      	bls.n	80006be <readTempHumPres+0x46>
        }
    }

    // Swap elements to make the array little endian
    swap(&values[0], &values[1]);
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	3301      	adds	r3, #1
 80006f2:	4619      	mov	r1, r3
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	f000 f874 	bl	80007e2 <swap>
    swap(&values[2], &values[3]);
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	1c9a      	adds	r2, r3, #2
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	3303      	adds	r3, #3
 8000702:	4619      	mov	r1, r3
 8000704:	4610      	mov	r0, r2
 8000706:	f000 f86c 	bl	80007e2 <swap>
    swap(&values[4], &values[5]);
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	1d1a      	adds	r2, r3, #4
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	3305      	adds	r3, #5
 8000712:	4619      	mov	r1, r3
 8000714:	4610      	mov	r0, r2
 8000716:	f000 f864 	bl	80007e2 <swap>
}
 800071a:	bf00      	nop
 800071c:	3720      	adds	r7, #32
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	080085c0 	.word	0x080085c0
 8000728:	2000000a 	.word	0x2000000a

0800072c <readBME280_id_reg>:

uint8_t readBME280_id_reg(I2C_HandleTypeDef* hi2c, uint8_t bme) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 8000738:	78fb      	ldrb	r3, [r7, #3]
 800073a:	4618      	mov	r0, r3
 800073c:	f000 f83a 	bl	80007b4 <getBME280Config>
 8000740:	4603      	mov	r3, r0
 8000742:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0x00;
 8000744:	2300      	movs	r3, #0
 8000746:	73bb      	strb	r3, [r7, #14]
	i2c_read_reg(hi2c, &data, bme_addr, &ID_REG);
 8000748:	7bfa      	ldrb	r2, [r7, #15]
 800074a:	f107 010e 	add.w	r1, r7, #14
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <readBME280_id_reg+0x34>)
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f000 fa2a 	bl	8000baa <i2c_read_reg>

	return data;
 8000756:	7bbb      	ldrb	r3, [r7, #14]
}
 8000758:	4618      	mov	r0, r3
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000005 	.word	0x20000005

08000764 <readBME280_calib>:

void readBME280_calib(I2C_HandleTypeDef* hi2c, uint8_t bme, uint8_t calibration1[CALIB_CNT_1], uint8_t calibration2[CALIB_CNT_2]) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af02      	add	r7, sp, #8
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	460b      	mov	r3, r1
 8000772:	72fb      	strb	r3, [r7, #11]
	uint8_t bme_addr = getBME280Config(bme).bme_addr;
 8000774:	7afb      	ldrb	r3, [r7, #11]
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f81c 	bl	80007b4 <getBME280Config>
 800077c:	4603      	mov	r3, r0
 800077e:	75fb      	strb	r3, [r7, #23]
	i2c_burst_read(hi2c, bme_addr, CALIB_ST_1, CALIB_CNT_1, calibration1);
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <readBME280_calib+0x48>)
 8000782:	781a      	ldrb	r2, [r3, #0]
 8000784:	7df9      	ldrb	r1, [r7, #23]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2319      	movs	r3, #25
 800078c:	68f8      	ldr	r0, [r7, #12]
 800078e:	f000 fa35 	bl	8000bfc <i2c_burst_read>
	i2c_burst_read(hi2c, bme_addr, CALIB_ST_2, CALIB_CNT_2, calibration2);
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <readBME280_calib+0x4c>)
 8000794:	781a      	ldrb	r2, [r3, #0]
 8000796:	7df9      	ldrb	r1, [r7, #23]
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2307      	movs	r3, #7
 800079e:	68f8      	ldr	r0, [r7, #12]
 80007a0:	f000 fa2c 	bl	8000bfc <i2c_burst_read>
}
 80007a4:	bf00      	nop
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	2000000b 	.word	0x2000000b
 80007b0:	2000000c 	.word	0x2000000c

080007b4 <getBME280Config>:

BME280_Config getBME280Config(uint8_t bme) {
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
	BME280_Config config;
	if (bme == 0) {
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d102      	bne.n	80007ca <getBME280Config+0x16>
		config.bme_addr = BME280_ADDR_0;
 80007c4:	2376      	movs	r3, #118	; 0x76
 80007c6:	733b      	strb	r3, [r7, #12]
 80007c8:	e004      	b.n	80007d4 <getBME280Config+0x20>
	} else if (bme == 1) {
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d101      	bne.n	80007d4 <getBME280Config+0x20>
		config.bme_addr = BME280_ADDR_1;
 80007d0:	2377      	movs	r3, #119	; 0x77
 80007d2:	733b      	strb	r3, [r7, #12]
	}
    return config;
 80007d4:	7b3b      	ldrb	r3, [r7, #12]
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <swap>:

void swap(uint8_t* a, uint8_t* b) {
 80007e2:	b480      	push	{r7}
 80007e4:	b085      	sub	sp, #20
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
 80007ea:	6039      	str	r1, [r7, #0]
    uint8_t temp = *a;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	73fb      	strb	r3, [r7, #15]
    *a = *b;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	781a      	ldrb	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	701a      	strb	r2, [r3, #0]
    *b = temp;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	7bfa      	ldrb	r2, [r7, #15]
 80007fe:	701a      	strb	r2, [r3, #0]
}
 8000800:	bf00      	nop
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <check_busy>:
uint8_t FLASH_32K_ERS	= 0x52;			// Erase all memory within a 32K-byte block
uint8_t FLASH_ERASE		= 0xC7;			// Erase the entire chip
uint8_t RST_EN			= 0x66;			// Reset enable
uint8_t DEV_RST			= 0x99;			// Reset device

uint8_t check_busy(SPI_HandleTypeDef *hspi, GPIO_Config config, int timeout) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	1d38      	adds	r0, r7, #4
 8000816:	e880 0006 	stmia.w	r0, {r1, r2}
 800081a:	603b      	str	r3, [r7, #0]
	uint8_t ret_val = 0x00;
 800081c:	2300      	movs	r3, #0
 800081e:	77fb      	strb	r3, [r7, #31]

    // Get the current time
	uint32_t startTick = HAL_GetTick();
 8000820:	f002 fa32 	bl	8002c88 <HAL_GetTick>
 8000824:	61b8      	str	r0, [r7, #24]

	// Read the status register to ensure no write is currently in progress
	uint8_t busy = 0x01;
 8000826:	2301      	movs	r3, #1
 8000828:	77bb      	strb	r3, [r7, #30]
	while(busy) {
 800082a:	e015      	b.n	8000858 <check_busy+0x4c>
		// Check if there is a write in progress
		busy = (check_status_register(hspi, config) & 0x01);
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000832:	68f8      	ldr	r0, [r7, #12]
 8000834:	f000 f818 	bl	8000868 <check_status_register>
 8000838:	4603      	mov	r3, r0
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	77bb      	strb	r3, [r7, #30]

		uint32_t currTick = HAL_GetTick();
 8000840:	f002 fa22 	bl	8002c88 <HAL_GetTick>
 8000844:	6178      	str	r0, [r7, #20]

        // Check if the timeout has been reached
		if ((currTick - startTick) >= timeout) {
 8000846:	697a      	ldr	r2, [r7, #20]
 8000848:	69bb      	ldr	r3, [r7, #24]
 800084a:	1ad2      	subs	r2, r2, r3
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	429a      	cmp	r2, r3
 8000850:	d302      	bcc.n	8000858 <check_busy+0x4c>
        	ret_val = 0x01;
 8000852:	2301      	movs	r3, #1
 8000854:	77fb      	strb	r3, [r7, #31]
            break;
 8000856:	e002      	b.n	800085e <check_busy+0x52>
	while(busy) {
 8000858:	7fbb      	ldrb	r3, [r7, #30]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d1e6      	bne.n	800082c <check_busy+0x20>
        }
	}

	return ret_val;
 800085e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000860:	4618      	mov	r0, r3
 8000862:	3720      	adds	r7, #32
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <check_status_register>:

uint8_t check_status_register(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af02      	add	r7, sp, #8
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t status_reg = 0x00;
 8000876:	2300      	movs	r3, #0
 8000878:	75fb      	strb	r3, [r7, #23]
	spi_sendOp_readByte(&FLASH_READSR1, hspi, &status_reg, config.GPIOx, config.GPIO_Pin);
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	893b      	ldrh	r3, [r7, #8]
 800087e:	f107 0217 	add.w	r2, r7, #23
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	460b      	mov	r3, r1
 8000886:	68f9      	ldr	r1, [r7, #12]
 8000888:	4803      	ldr	r0, [pc, #12]	; (8000898 <check_status_register+0x30>)
 800088a:	f001 fcd7 	bl	800223c <spi_sendOp_readByte>
	return status_reg;
 800088e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	2000000f 	.word	0x2000000f

0800089c <erase_chip_spi>:
 *      Author: aidencontini
 */

#include "data_output_spi.h"

HAL_StatusTypeDef erase_chip_spi(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	e883 0006 	stmia.w	r3, {r1, r2}
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 80008aa:	2305      	movs	r3, #5
 80008ac:	1d3a      	adds	r2, r7, #4
 80008ae:	ca06      	ldmia	r2, {r1, r2}
 80008b0:	68f8      	ldr	r0, [r7, #12]
 80008b2:	f7ff ffab 	bl	800080c <check_busy>

	write_enable_spi(hspi, config);
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80008bc:	68f8      	ldr	r0, [r7, #12]
 80008be:	f000 f815 	bl	80008ec <write_enable_spi>
	perform_operation(&FLASH_ERASE, hspi, config.GPIOx, config.GPIO_Pin);
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	893b      	ldrh	r3, [r7, #8]
 80008c6:	68f9      	ldr	r1, [r7, #12]
 80008c8:	4806      	ldr	r0, [pc, #24]	; (80008e4 <erase_chip_spi+0x48>)
 80008ca:	f001 fcdd 	bl	8002288 <perform_operation>

	check_busy(hspi, config, CHIP_ERASE_TO);
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <erase_chip_spi+0x4c>)
 80008d0:	1d3a      	adds	r2, r7, #4
 80008d2:	ca06      	ldmia	r2, {r1, r2}
 80008d4:	68f8      	ldr	r0, [r7, #12]
 80008d6:	f7ff ff99 	bl	800080c <check_busy>

	return HAL_OK;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000012 	.word	0x20000012
 80008e8:	00030d40 	.word	0x00030d40

080008ec <write_enable_spi>:
	check_busy(hspi, config, BLK_ERS_32K_TO);

	return HAL_OK;
}

void write_enable_spi(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	e883 0006 	stmia.w	r3, {r1, r2}
	perform_operation(&FLASH_WREN, hspi, config.GPIOx, config.GPIO_Pin);
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	893b      	ldrh	r3, [r7, #8]
 80008fe:	68f9      	ldr	r1, [r7, #12]
 8000900:	4803      	ldr	r0, [pc, #12]	; (8000910 <write_enable_spi+0x24>)
 8000902:	f001 fcc1 	bl	8002288 <perform_operation>
}
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000000d 	.word	0x2000000d

08000914 <software_reset>:

void write_disable_spi(SPI_HandleTypeDef *hspi, GPIO_Config config) {
	perform_operation(&FLASH_WRDIS, hspi, config.GPIOx, config.GPIO_Pin);
}

void software_reset(SPI_HandleTypeDef *hspi, GPIO_Config config) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	e883 0006 	stmia.w	r3, {r1, r2}

	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000922:	2305      	movs	r3, #5
 8000924:	1d3a      	adds	r2, r7, #4
 8000926:	ca06      	ldmia	r2, {r1, r2}
 8000928:	68f8      	ldr	r0, [r7, #12]
 800092a:	f7ff ff6f 	bl	800080c <check_busy>

	perform_operation(&RST_EN, hspi, config.GPIOx, config.GPIO_Pin);
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	893b      	ldrh	r3, [r7, #8]
 8000932:	68f9      	ldr	r1, [r7, #12]
 8000934:	4807      	ldr	r0, [pc, #28]	; (8000954 <software_reset+0x40>)
 8000936:	f001 fca7 	bl	8002288 <perform_operation>
	perform_operation(&DEV_RST, hspi, config.GPIOx, config.GPIO_Pin);
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	893b      	ldrh	r3, [r7, #8]
 800093e:	68f9      	ldr	r1, [r7, #12]
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <software_reset+0x44>)
 8000942:	f001 fca1 	bl	8002288 <perform_operation>

	HAL_Delay(5);
 8000946:	2005      	movs	r0, #5
 8000948:	f002 f9aa 	bl	8002ca0 <HAL_Delay>
}
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000013 	.word	0x20000013
 8000958:	20000014 	.word	0x20000014

0800095c <write_data_spi_dma>:
	spi_write_data(&FLASH_PGWR, PAGE_SIZE, page, hspi, addr, config.GPIOx, config.GPIO_Pin);

	return 0;
}

uint8_t write_data_spi_dma(uint8_t page[PAGE_SIZE], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_Config config) {
 800095c:	b082      	sub	sp, #8
 800095e:	b580      	push	{r7, lr}
 8000960:	b088      	sub	sp, #32
 8000962:	af04      	add	r7, sp, #16
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	61fb      	str	r3, [r7, #28]
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 800096c:	2305      	movs	r3, #5
 800096e:	f107 021c 	add.w	r2, r7, #28
 8000972:	ca06      	ldmia	r2, {r1, r2}
 8000974:	68b8      	ldr	r0, [r7, #8]
 8000976:	f7ff ff49 	bl	800080c <check_busy>

	// Send the write enable signal
	write_enable_spi(hspi, config);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000982:	68b8      	ldr	r0, [r7, #8]
 8000984:	f7ff ffb2 	bl	80008ec <write_enable_spi>
	spi_write_data_dma(&FLASH_PGWR, PAGE_SIZE, page, hspi, addr, config.GPIOx, config.GPIO_Pin);
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	8c3a      	ldrh	r2, [r7, #32]
 800098c:	9202      	str	r2, [sp, #8]
 800098e:	9301      	str	r3, [sp, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	f44f 7180 	mov.w	r1, #256	; 0x100
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <write_data_spi_dma+0x58>)
 800099e:	f001 fcda 	bl	8002356 <spi_write_data_dma>

	return 0;
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009ae:	b002      	add	sp, #8
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	2000000e 	.word	0x2000000e

080009b8 <find_next_blank_page>:
 *      Author: aidencontini
 */

#include "data_read_spi.h"

uint32_t find_next_blank_page(SPI_HandleTypeDef *hspi, GPIO_PinState *end_of_flash_ptr, GPIO_Config config) {
 80009b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009bc:	b091      	sub	sp, #68	; 0x44
 80009be:	af04      	add	r7, sp, #16
 80009c0:	60f8      	str	r0, [r7, #12]
 80009c2:	60b9      	str	r1, [r7, #8]
 80009c4:	4639      	mov	r1, r7
 80009c6:	e881 000c 	stmia.w	r1, {r2, r3}
 80009ca:	466b      	mov	r3, sp
 80009cc:	461e      	mov	r6, r3
	uint8_t firstBytes = 4;
 80009ce:	2304      	movs	r3, #4
 80009d0:	77fb      	strb	r3, [r7, #31]

	uint8_t page_start[firstBytes];
 80009d2:	7ff9      	ldrb	r1, [r7, #31]
 80009d4:	460b      	mov	r3, r1
 80009d6:	3b01      	subs	r3, #1
 80009d8:	61bb      	str	r3, [r7, #24]
 80009da:	b2cb      	uxtb	r3, r1
 80009dc:	2200      	movs	r2, #0
 80009de:	4698      	mov	r8, r3
 80009e0:	4691      	mov	r9, r2
 80009e2:	f04f 0200 	mov.w	r2, #0
 80009e6:	f04f 0300 	mov.w	r3, #0
 80009ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80009ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80009f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80009f6:	b2cb      	uxtb	r3, r1
 80009f8:	2200      	movs	r2, #0
 80009fa:	461c      	mov	r4, r3
 80009fc:	4615      	mov	r5, r2
 80009fe:	f04f 0200 	mov.w	r2, #0
 8000a02:	f04f 0300 	mov.w	r3, #0
 8000a06:	00eb      	lsls	r3, r5, #3
 8000a08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a0c:	00e2      	lsls	r2, r4, #3
 8000a0e:	460b      	mov	r3, r1
 8000a10:	3307      	adds	r3, #7
 8000a12:	08db      	lsrs	r3, r3, #3
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	ebad 0d03 	sub.w	sp, sp, r3
 8000a1a:	ab04      	add	r3, sp, #16
 8000a1c:	3300      	adds	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < firstBytes; i++) {
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a24:	e007      	b.n	8000a36 <find_next_blank_page+0x7e>
		page_start[i] = 0;
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a2a:	4413      	add	r3, r2
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < firstBytes; i++) {
 8000a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a32:	3301      	adds	r3, #1
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a36:	7ffb      	ldrb	r3, [r7, #31]
 8000a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	dbf3      	blt.n	8000a26 <find_next_blank_page+0x6e>
	}

	uint32_t page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	061a      	lsls	r2, r3, #24
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	785b      	ldrb	r3, [r3, #1]
 8000a48:	041b      	lsls	r3, r3, #16
 8000a4a:	431a      	orrs	r2, r3
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	789b      	ldrb	r3, [r3, #2]
 8000a50:	021b      	lsls	r3, r3, #8
 8000a52:	4313      	orrs	r3, r2
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	78d2      	ldrb	r2, [r2, #3]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t temp = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t page_address = temp;
 8000a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a62:	623b      	str	r3, [r7, #32]

	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000a64:	e027      	b.n	8000ab6 <find_next_blank_page+0xfe>
		page_address = temp;
 8000a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a68:	623b      	str	r3, [r7, #32]

		check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000a6a:	2305      	movs	r3, #5
 8000a6c:	463a      	mov	r2, r7
 8000a6e:	ca06      	ldmia	r2, {r1, r2}
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f7ff fecb 	bl	800080c <check_busy>

		spi_read_data(&FLASH_READEN, firstBytes, page_start, hspi, page_address, config.GPIOx, config.GPIO_Pin);
 8000a76:	7ffb      	ldrb	r3, [r7, #31]
 8000a78:	b299      	uxth	r1, r3
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	88ba      	ldrh	r2, [r7, #4]
 8000a7e:	9202      	str	r2, [sp, #8]
 8000a80:	9301      	str	r3, [sp, #4]
 8000a82:	6a3b      	ldr	r3, [r7, #32]
 8000a84:	9300      	str	r3, [sp, #0]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	4816      	ldr	r0, [pc, #88]	; (8000ae4 <find_next_blank_page+0x12c>)
 8000a8c:	f001 fc1c 	bl	80022c8 <spi_read_data>

		page_start_concat = (page_start[0] << 24) | (page_start[1] << 16) | (page_start[2] << 8) | page_start[3];
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	061a      	lsls	r2, r3, #24
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	785b      	ldrb	r3, [r3, #1]
 8000a9a:	041b      	lsls	r3, r3, #16
 8000a9c:	431a      	orrs	r2, r3
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	789b      	ldrb	r3, [r3, #2]
 8000aa2:	021b      	lsls	r3, r3, #8
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	78d2      	ldrb	r2, [r2, #3]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
		temp += PAGE_SIZE;
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
	while ((page_start_concat != 0xFFFFFFFF) || (temp == NUM_OF_PAGES)) {
 8000ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000abc:	d1d3      	bne.n	8000a66 <find_next_blank_page+0xae>
 8000abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ac4:	d0cf      	beq.n	8000a66 <find_next_blank_page+0xae>
	}

	if (page_address == (NUM_OF_PAGES * PAGE_SIZE)) {
 8000ac6:	6a3b      	ldr	r3, [r7, #32]
 8000ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000acc:	d102      	bne.n	8000ad4 <find_next_blank_page+0x11c>
		*end_of_flash_ptr = GPIO_PIN_RESET;
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
	}
	return page_address;
 8000ad4:	6a3b      	ldr	r3, [r7, #32]
 8000ad6:	46b5      	mov	sp, r6
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3734      	adds	r7, #52	; 0x34
 8000adc:	46bd      	mov	sp, r7
 8000ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000010 	.word	0x20000010

08000ae8 <read_page_spi>:

void read_page_spi(uint8_t data_read[PAGE_SIZE], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_Config config) {
 8000ae8:	b082      	sub	sp, #8
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b088      	sub	sp, #32
 8000aee:	af04      	add	r7, sp, #16
 8000af0:	60f8      	str	r0, [r7, #12]
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
 8000af6:	61fb      	str	r3, [r7, #28]

	// Read the status register to ensure no write is currently in progress
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000af8:	2305      	movs	r3, #5
 8000afa:	f107 021c 	add.w	r2, r7, #28
 8000afe:	ca06      	ldmia	r2, {r1, r2}
 8000b00:	68b8      	ldr	r0, [r7, #8]
 8000b02:	f7ff fe83 	bl	800080c <check_busy>
	spi_read_data(&FLASH_READEN, PAGE_SIZE, data_read, hspi, addr, config.GPIOx, config.GPIO_Pin);
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	8c3a      	ldrh	r2, [r7, #32]
 8000b0a:	9202      	str	r2, [sp, #8]
 8000b0c:	9301      	str	r3, [sp, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	68fa      	ldr	r2, [r7, #12]
 8000b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <read_page_spi+0x48>)
 8000b1c:	f001 fbd4 	bl	80022c8 <spi_read_data>
}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b2a:	b002      	add	sp, #8
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000010 	.word	0x20000010

08000b34 <read_manufacturer_id>:

void read_manufacturer_id(uint8_t manu[2], SPI_HandleTypeDef *hspi, GPIO_Config config) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af04      	add	r7, sp, #16
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	4639      	mov	r1, r7
 8000b40:	e881 000c 	stmia.w	r1, {r2, r3}

	// Read the status register to ensure no write is currently in progress
	check_busy(hspi, config, BSY_TIMEOUT_MS);
 8000b44:	2305      	movs	r3, #5
 8000b46:	463a      	mov	r2, r7
 8000b48:	ca06      	ldmia	r2, {r1, r2}
 8000b4a:	68b8      	ldr	r0, [r7, #8]
 8000b4c:	f7ff fe5e 	bl	800080c <check_busy>

	// Read the entire contents of a page starting from the given address
	uint8_t addr = 0x00;
 8000b50:	2300      	movs	r3, #0
 8000b52:	75fb      	strb	r3, [r7, #23]
	spi_read_data(&FLASH_READ_MANU, 2, manu, hspi, addr, config.GPIOx, config.GPIO_Pin);
 8000b54:	7dfb      	ldrb	r3, [r7, #23]
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	88b9      	ldrh	r1, [r7, #4]
 8000b5a:	9102      	str	r1, [sp, #8]
 8000b5c:	9201      	str	r2, [sp, #4]
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	2102      	movs	r1, #2
 8000b66:	4803      	ldr	r0, [pc, #12]	; (8000b74 <read_manufacturer_id+0x40>)
 8000b68:	f001 fbae 	bl	80022c8 <spi_read_data>
}
 8000b6c:	bf00      	nop
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000011 	.word	0x20000011

08000b78 <create_GPIO_Config>:
 */

#include "gpio_struct.h"

// Function to initialize the GPIO_Config struct
GPIO_Config create_GPIO_Config(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000b78:	b480      	push	{r7}
 8000b7a:	b087      	sub	sp, #28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	4613      	mov	r3, r2
 8000b84:	80fb      	strh	r3, [r7, #6]
    GPIO_Config new_config;
    new_config.GPIOx = GPIOx;
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	613b      	str	r3, [r7, #16]
    new_config.GPIO_Pin = GPIO_Pin;
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	82bb      	strh	r3, [r7, #20]
    return new_config;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	461a      	mov	r2, r3
 8000b92:	f107 0310 	add.w	r3, r7, #16
 8000b96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b9a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	371c      	adds	r7, #28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <i2c_read_reg>:
 *      Author: aidencontini
 */

#include "i2c_driver.h"

HAL_StatusTypeDef i2c_read_reg(I2C_HandleTypeDef* hi2c, uint8_t* data_ptr, uint8_t dev_addr, uint8_t* register_addr) {
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b088      	sub	sp, #32
 8000bae:	af02      	add	r7, sp, #8
 8000bb0:	60f8      	str	r0, [r7, #12]
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, register_addr, 1, I2C_TIMEOUT_SML);
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	b299      	uxth	r1, r3
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2301      	movs	r3, #1
 8000bca:	683a      	ldr	r2, [r7, #0]
 8000bcc:	68f8      	ldr	r0, [r7, #12]
 8000bce:	f003 f9d7 	bl	8003f80 <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_ptr, 1, I2C_TIMEOUT_SML);
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	b21b      	sxth	r3, r3
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	b21b      	sxth	r3, r3
 8000bde:	b299      	uxth	r1, r3
 8000be0:	2301      	movs	r3, #1
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	2301      	movs	r3, #1
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	68f8      	ldr	r0, [r7, #12]
 8000bea:	f003 fac7 	bl	800417c <HAL_I2C_Master_Receive>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	75fb      	strb	r3, [r7, #23]
	return hal_status;
 8000bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <i2c_burst_read>:

HAL_StatusTypeDef i2c_burst_read(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t register_addr, uint8_t size, uint8_t data_buffer[size]) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af02      	add	r7, sp, #8
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	4608      	mov	r0, r1
 8000c06:	4611      	mov	r1, r2
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	70fb      	strb	r3, [r7, #3]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	70bb      	strb	r3, [r7, #2]
 8000c12:	4613      	mov	r3, r2
 8000c14:	707b      	strb	r3, [r7, #1]
	// In order to read multiple bytes, it is necessary to assert the most significant bit of the sub-address field.
	uint8_t addr = register_addr | 0x80;
 8000c16:	78bb      	ldrb	r3, [r7, #2]
 8000c18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, &addr, 1, I2C_TIMEOUT_SML);
 8000c20:	78fb      	ldrb	r3, [r7, #3]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	b299      	uxth	r1, r3
 8000c2a:	f107 020e 	add.w	r2, r7, #14
 8000c2e:	2301      	movs	r3, #1
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2301      	movs	r3, #1
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f003 f9a3 	bl	8003f80 <HAL_I2C_Master_Transmit>
	HAL_StatusTypeDef hal_status =  HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_buffer, size, I2C_TIMEOUT_LRG);
 8000c3a:	78fb      	ldrb	r3, [r7, #3]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	b21b      	sxth	r3, r3
 8000c46:	b299      	uxth	r1, r3
 8000c48:	787b      	ldrb	r3, [r7, #1]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	220a      	movs	r2, #10
 8000c4e:	9200      	str	r2, [sp, #0]
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f003 fa92 	bl	800417c <HAL_I2C_Master_Receive>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	73fb      	strb	r3, [r7, #15]
	return hal_status;
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <i2c_write_reg>:
	HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, &addr, 1, I2C_TIMEOUT_SML);
	HAL_StatusTypeDef hal_status =  HAL_I2C_Master_Receive(hi2c, (dev_addr << 1) | 0x01, data_buffer, size, I2C_TIMEOUT_LRG);
	return hal_status;
}

HAL_StatusTypeDef i2c_write_reg(I2C_HandleTypeDef* hi2c, uint8_t dev_addr, uint8_t* register_addr, uint8_t data) {
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b088      	sub	sp, #32
 8000c6a:	af02      	add	r7, sp, #8
 8000c6c:	60f8      	str	r0, [r7, #12]
 8000c6e:	607a      	str	r2, [r7, #4]
 8000c70:	461a      	mov	r2, r3
 8000c72:	460b      	mov	r3, r1
 8000c74:	72fb      	strb	r3, [r7, #11]
 8000c76:	4613      	mov	r3, r2
 8000c78:	72bb      	strb	r3, [r7, #10]
	uint8_t data_tx[2] = {*register_addr, data};
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	753b      	strb	r3, [r7, #20]
 8000c80:	7abb      	ldrb	r3, [r7, #10]
 8000c82:	757b      	strb	r3, [r7, #21]
	HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(hi2c, (dev_addr << 1) & 0xFE, data_tx, 2, I2C_TIMEOUT_SML);
 8000c84:	7afb      	ldrb	r3, [r7, #11]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	b299      	uxth	r1, r3
 8000c8e:	f107 0214 	add.w	r2, r7, #20
 8000c92:	2301      	movs	r3, #1
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	2302      	movs	r3, #2
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f003 f971 	bl	8003f80 <HAL_I2C_Master_Transmit>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	75fb      	strb	r3, [r7, #23]
	return hal_status;
 8000ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb2:	f001 ff83 	bl	8002bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb6:	f000 f8d5 	bl	8000e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cba:	f000 fb55 	bl	8001368 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cbe:	f000 fb1d 	bl	80012fc <MX_DMA_Init>
  MX_I2C1_Init();
 8000cc2:	f000 f973 	bl	8000fac <MX_I2C1_Init>
  MX_RTC_Init();
 8000cc6:	f000 f9f1 	bl	80010ac <MX_RTC_Init>
  MX_SPI1_Init();
 8000cca:	f000 fa15 	bl	80010f8 <MX_SPI1_Init>
  MX_TIM6_Init();
 8000cce:	f000 fa7f 	bl	80011d0 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000cd2:	f000 fae9 	bl	80012a8 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000cd6:	f000 f9a9 	bl	800102c <MX_I2C2_Init>
  MX_SPI2_Init();
 8000cda:	f000 fa43 	bl	8001164 <MX_SPI2_Init>
  MX_CAN2_Init();
 8000cde:	f000 f92d 	bl	8000f3c <MX_CAN2_Init>
  MX_TIM7_Init();
 8000ce2:	f000 faab 	bl	800123c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000ce6:	f000 fc1f 	bl	8001528 <systemInit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Handle UART receive flag
	  if(uart2_rec_flag == 0x01) {
 8000cea:	4b4b      	ldr	r3, [pc, #300]	; (8000e18 <main+0x16c>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d101      	bne.n	8000cf6 <main+0x4a>
		  handleUART();
 8000cf2:	f000 fd79 	bl	80017e8 <handleUART>
	  }

	  if (tim7_overflow_flag == 0x01) {
 8000cf6:	4b49      	ldr	r3, [pc, #292]	; (8000e1c <main+0x170>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d116      	bne.n	8000d2c <main+0x80>
		  HAL_GPIO_TogglePin(led_orange.GPIOx, led_orange.GPIO_Pin);		// Toggle LED
 8000cfe:	4b48      	ldr	r3, [pc, #288]	; (8000e20 <main+0x174>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a47      	ldr	r2, [pc, #284]	; (8000e20 <main+0x174>)
 8000d04:	8892      	ldrh	r2, [r2, #4]
 8000d06:	4611      	mov	r1, r2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f002 ffda 	bl	8003cc2 <HAL_GPIO_TogglePin>
		  sysStatus = systemStatus(&hspi1, &hspi2, i2c_bme280, i2c_accel);
 8000d0e:	4b45      	ldr	r3, [pc, #276]	; (8000e24 <main+0x178>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	4b45      	ldr	r3, [pc, #276]	; (8000e28 <main+0x17c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4945      	ldr	r1, [pc, #276]	; (8000e2c <main+0x180>)
 8000d18:	4845      	ldr	r0, [pc, #276]	; (8000e30 <main+0x184>)
 8000d1a:	f000 fed5 	bl	8001ac8 <systemStatus>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b44      	ldr	r3, [pc, #272]	; (8000e34 <main+0x188>)
 8000d24:	701a      	strb	r2, [r3, #0]
		  tim7_overflow_flag = 0x00;
 8000d26:	4b3d      	ldr	r3, [pc, #244]	; (8000e1c <main+0x170>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
	  }

	  // Handle Timer 6 overflow flag
	  if(tim6_overflow_flag == 0x01) {
 8000d2c:	4b42      	ldr	r3, [pc, #264]	; (8000e38 <main+0x18c>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d10a      	bne.n	8000d4a <main+0x9e>
		  readAllSensors(i2c_accel, i2c_bme280, &hrtc);
 8000d34:	4b3c      	ldr	r3, [pc, #240]	; (8000e28 <main+0x17c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a3a      	ldr	r2, [pc, #232]	; (8000e24 <main+0x178>)
 8000d3a:	6811      	ldr	r1, [r2, #0]
 8000d3c:	4a3f      	ldr	r2, [pc, #252]	; (8000e3c <main+0x190>)
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 f928 	bl	8001f94 <readAllSensors>
		  tim6_overflow_flag = 0x00;
 8000d44:	4b3c      	ldr	r3, [pc, #240]	; (8000e38 <main+0x18c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
	  }

	  // Write data to flash when buffer is full
	  if(byte_tracker > (PAGE_SIZE - READ_SIZE)) {
 8000d4a:	4b3d      	ldr	r3, [pc, #244]	; (8000e40 <main+0x194>)
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	2beb      	cmp	r3, #235	; 0xeb
 8000d50:	d952      	bls.n	8000df8 <main+0x14c>
		  GPIO_PinState flight_mode = HAL_GPIO_ReadPin(jmp_flight.GPIOx, jmp_flight.GPIO_Pin);
 8000d52:	4b3c      	ldr	r3, [pc, #240]	; (8000e44 <main+0x198>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a3b      	ldr	r2, [pc, #236]	; (8000e44 <main+0x198>)
 8000d58:	8892      	ldrh	r2, [r2, #4]
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f002 ff7f 	bl	8003c60 <HAL_GPIO_ReadPin>
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
		  if((flight_mode & !(end_of_flash)) == GPIO_PIN_SET) {
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	4a37      	ldr	r2, [pc, #220]	; (8000e48 <main+0x19c>)
 8000d6a:	7812      	ldrb	r2, [r2, #0]
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	bf0c      	ite	eq
 8000d70:	2201      	moveq	r2, #1
 8000d72:	2200      	movne	r2, #0
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	4013      	ands	r3, r2
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d133      	bne.n	8000de4 <main+0x138>
			  HAL_GPIO_WritePin(led_green.GPIOx, led_green.GPIO_Pin, GPIO_PIN_SET);		// Toggle LED when writing data
 8000d7c:	4b33      	ldr	r3, [pc, #204]	; (8000e4c <main+0x1a0>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a32      	ldr	r2, [pc, #200]	; (8000e4c <main+0x1a0>)
 8000d82:	8891      	ldrh	r1, [r2, #4]
 8000d84:	2201      	movs	r2, #1
 8000d86:	4618      	mov	r0, r3
 8000d88:	f002 ff82 	bl	8003c90 <HAL_GPIO_WritePin>

			  write_data_spi_dma(data_buffer_tx[buffer_tracker], &hspi1, next_blank_page, cs_spi1);
 8000d8c:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <main+0x1a4>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	021b      	lsls	r3, r3, #8
 8000d92:	4a30      	ldr	r2, [pc, #192]	; (8000e54 <main+0x1a8>)
 8000d94:	1898      	adds	r0, r3, r2
 8000d96:	4b30      	ldr	r3, [pc, #192]	; (8000e58 <main+0x1ac>)
 8000d98:	6819      	ldr	r1, [r3, #0]
 8000d9a:	4b30      	ldr	r3, [pc, #192]	; (8000e5c <main+0x1b0>)
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	9200      	str	r2, [sp, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	460a      	mov	r2, r1
 8000da4:	4922      	ldr	r1, [pc, #136]	; (8000e30 <main+0x184>)
 8000da6:	f7ff fdd9 	bl	800095c <write_data_spi_dma>
			  write_data_spi_dma(data_buffer_tx[buffer_tracker], &hspi2, next_blank_page, cs_spi2);
 8000daa:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <main+0x1a4>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	021b      	lsls	r3, r3, #8
 8000db0:	4a28      	ldr	r2, [pc, #160]	; (8000e54 <main+0x1a8>)
 8000db2:	1898      	adds	r0, r3, r2
 8000db4:	4b28      	ldr	r3, [pc, #160]	; (8000e58 <main+0x1ac>)
 8000db6:	6819      	ldr	r1, [r3, #0]
 8000db8:	4b29      	ldr	r3, [pc, #164]	; (8000e60 <main+0x1b4>)
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	9200      	str	r2, [sp, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	460a      	mov	r2, r1
 8000dc2:	491a      	ldr	r1, [pc, #104]	; (8000e2c <main+0x180>)
 8000dc4:	f7ff fdca 	bl	800095c <write_data_spi_dma>
			  next_blank_page += PAGE_SIZE;
 8000dc8:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <main+0x1ac>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000dd0:	4a21      	ldr	r2, [pc, #132]	; (8000e58 <main+0x1ac>)
 8000dd2:	6013      	str	r3, [r2, #0]

			  HAL_GPIO_WritePin(led_green.GPIOx, led_green.GPIO_Pin, GPIO_PIN_RESET);		// Toggle LED when writing data
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <main+0x1a0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a1c      	ldr	r2, [pc, #112]	; (8000e4c <main+0x1a0>)
 8000dda:	8891      	ldrh	r1, [r2, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f002 ff56 	bl	8003c90 <HAL_GPIO_WritePin>
		  }

		// Reset the buffer trackers
		buffer_tracker = buffer_tracker ^ 0x01;
 8000de4:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <main+0x1a4>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	f083 0301 	eor.w	r3, r3, #1
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <main+0x1a4>)
 8000df0:	701a      	strb	r2, [r3, #0]
		byte_tracker = 0;
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <main+0x194>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	801a      	strh	r2, [r3, #0]
	  }

	  if(next_blank_page == (NUM_OF_PAGES*PAGE_SIZE)) {
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <main+0x1ac>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e00:	f47f af73 	bne.w	8000cea <main+0x3e>
		  next_blank_page = find_next_blank_page(&hspi1, &end_of_flash, cs_spi1);
 8000e04:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <main+0x1b0>)
 8000e06:	cb0c      	ldmia	r3, {r2, r3}
 8000e08:	490f      	ldr	r1, [pc, #60]	; (8000e48 <main+0x19c>)
 8000e0a:	4809      	ldr	r0, [pc, #36]	; (8000e30 <main+0x184>)
 8000e0c:	f7ff fdd4 	bl	80009b8 <find_next_blank_page>
 8000e10:	4603      	mov	r3, r0
 8000e12:	4a11      	ldr	r2, [pc, #68]	; (8000e58 <main+0x1ac>)
 8000e14:	6013      	str	r3, [r2, #0]
	  if(uart2_rec_flag == 0x01) {
 8000e16:	e768      	b.n	8000cea <main+0x3e>
 8000e18:	2000038a 	.word	0x2000038a
 8000e1c:	2000038c 	.word	0x2000038c
 8000e20:	200005b4 	.word	0x200005b4
 8000e24:	20000384 	.word	0x20000384
 8000e28:	20000380 	.word	0x20000380
 8000e2c:	20000190 	.word	0x20000190
 8000e30:	20000138 	.word	0x20000138
 8000e34:	200005ec 	.word	0x200005ec
 8000e38:	2000038b 	.word	0x2000038b
 8000e3c:	20000118 	.word	0x20000118
 8000e40:	200005b0 	.word	0x200005b0
 8000e44:	200005e4 	.word	0x200005e4
 8000e48:	200005b2 	.word	0x200005b2
 8000e4c:	200005bc 	.word	0x200005bc
 8000e50:	20000590 	.word	0x20000590
 8000e54:	20000390 	.word	0x20000390
 8000e58:	200005ac 	.word	0x200005ac
 8000e5c:	200005c4 	.word	0x200005c4
 8000e60:	200005d4 	.word	0x200005d4

08000e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b094      	sub	sp, #80	; 0x50
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	f107 0320 	add.w	r3, r7, #32
 8000e6e:	2230      	movs	r2, #48	; 0x30
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f007 fb6c 	bl	8008550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	4b29      	ldr	r3, [pc, #164]	; (8000f34 <SystemClock_Config+0xd0>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	4a28      	ldr	r2, [pc, #160]	; (8000f34 <SystemClock_Config+0xd0>)
 8000e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e96:	6413      	str	r3, [r2, #64]	; 0x40
 8000e98:	4b26      	ldr	r3, [pc, #152]	; (8000f34 <SystemClock_Config+0xd0>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <SystemClock_Config+0xd4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000eb0:	4a21      	ldr	r2, [pc, #132]	; (8000f38 <SystemClock_Config+0xd4>)
 8000eb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <SystemClock_Config+0xd4>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000ec4:	2305      	movs	r3, #5
 8000ec6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ed6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000edc:	2319      	movs	r3, #25
 8000ede:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ee0:	23a8      	movs	r3, #168	; 0xa8
 8000ee2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eec:	f107 0320 	add.w	r3, r7, #32
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f003 ff77 	bl	8004de4 <HAL_RCC_OscConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000efc:	f000 fdde 	bl	8001abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f00:	230f      	movs	r3, #15
 8000f02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f04:	2302      	movs	r3, #2
 8000f06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f16:	f107 030c 	add.w	r3, r7, #12
 8000f1a:	2102      	movs	r1, #2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f004 f9d9 	bl	80052d4 <HAL_RCC_ClockConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000f28:	f000 fdc8 	bl	8001abc <Error_Handler>
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3750      	adds	r7, #80	; 0x50
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40007000 	.word	0x40007000

08000f3c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000f40:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <MX_CAN2_Init+0x68>)
 8000f42:	4a19      	ldr	r2, [pc, #100]	; (8000fa8 <MX_CAN2_Init+0x6c>)
 8000f44:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 8;
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <MX_CAN2_Init+0x68>)
 8000f48:	2208      	movs	r2, #8
 8000f4a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <MX_CAN2_Init+0x68>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_CAN2_Init+0x68>)
 8000f54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f58:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000f5a:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <MX_CAN2_Init+0x68>)
 8000f5c:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000f60:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <MX_CAN2_Init+0x68>)
 8000f64:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f68:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_CAN2_Init+0x68>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_CAN2_Init+0x68>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <MX_CAN2_Init+0x68>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_CAN2_Init+0x68>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000f82:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <MX_CAN2_Init+0x68>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_CAN2_Init+0x68>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_CAN2_Init+0x68>)
 8000f90:	f001 feaa 	bl	8002ce8 <HAL_CAN_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8000f9a:	f000 fd8f 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000048 	.word	0x20000048
 8000fa8:	40006800 	.word	0x40006800

08000fac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fb2:	4a1c      	ldr	r2, [pc, #112]	; (8001024 <MX_I2C1_Init+0x78>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fb8:	4a1b      	ldr	r2, [pc, #108]	; (8001028 <MX_I2C1_Init+0x7c>)
 8000fba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fbc:	4b18      	ldr	r3, [pc, #96]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fc2:	4b17      	ldr	r3, [pc, #92]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fdc:	4b10      	ldr	r3, [pc, #64]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fea:	f002 fe85 	bl	8003cf8 <HAL_I2C_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ff4:	f000 fd62 	bl	8001abc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4809      	ldr	r0, [pc, #36]	; (8001020 <MX_I2C1_Init+0x74>)
 8000ffc:	f003 fe76 	bl	8004cec <HAL_I2CEx_ConfigAnalogFilter>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001006:	f000 fd59 	bl	8001abc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800100a:	2100      	movs	r1, #0
 800100c:	4804      	ldr	r0, [pc, #16]	; (8001020 <MX_I2C1_Init+0x74>)
 800100e:	f003 fea9 	bl	8004d64 <HAL_I2CEx_ConfigDigitalFilter>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001018:	f000 fd50 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000070 	.word	0x20000070
 8001024:	40005400 	.word	0x40005400
 8001028:	000186a0 	.word	0x000186a0

0800102c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <MX_I2C2_Init+0x74>)
 8001032:	4a1c      	ldr	r2, [pc, #112]	; (80010a4 <MX_I2C2_Init+0x78>)
 8001034:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <MX_I2C2_Init+0x74>)
 8001038:	4a1b      	ldr	r2, [pc, #108]	; (80010a8 <MX_I2C2_Init+0x7c>)
 800103a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800103c:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MX_I2C2_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001042:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <MX_I2C2_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001048:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <MX_I2C2_Init+0x74>)
 800104a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800104e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <MX_I2C2_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <MX_I2C2_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <MX_I2C2_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_I2C2_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001068:	480d      	ldr	r0, [pc, #52]	; (80010a0 <MX_I2C2_Init+0x74>)
 800106a:	f002 fe45 	bl	8003cf8 <HAL_I2C_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001074:	f000 fd22 	bl	8001abc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001078:	2100      	movs	r1, #0
 800107a:	4809      	ldr	r0, [pc, #36]	; (80010a0 <MX_I2C2_Init+0x74>)
 800107c:	f003 fe36 	bl	8004cec <HAL_I2CEx_ConfigAnalogFilter>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001086:	f000 fd19 	bl	8001abc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800108a:	2100      	movs	r1, #0
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <MX_I2C2_Init+0x74>)
 800108e:	f003 fe69 	bl	8004d64 <HAL_I2CEx_ConfigDigitalFilter>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001098:	f000 fd10 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200000c4 	.word	0x200000c4
 80010a4:	40005800 	.word	0x40005800
 80010a8:	000186a0 	.word	0x000186a0

080010ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_RTC_Init+0x44>)
 80010b2:	4a10      	ldr	r2, [pc, #64]	; (80010f4 <MX_RTC_Init+0x48>)
 80010b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MX_RTC_Init+0x44>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_RTC_Init+0x44>)
 80010be:	227f      	movs	r2, #127	; 0x7f
 80010c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <MX_RTC_Init+0x44>)
 80010c4:	22ff      	movs	r2, #255	; 0xff
 80010c6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_RTC_Init+0x44>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <MX_RTC_Init+0x44>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_RTC_Init+0x44>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_RTC_Init+0x44>)
 80010dc:	f004 fc9a 	bl	8005a14 <HAL_RTC_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80010e6:	f000 fce9 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000118 	.word	0x20000118
 80010f4:	40002800 	.word	0x40002800

080010f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010fc:	4b17      	ldr	r3, [pc, #92]	; (800115c <MX_SPI1_Init+0x64>)
 80010fe:	4a18      	ldr	r2, [pc, #96]	; (8001160 <MX_SPI1_Init+0x68>)
 8001100:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001102:	4b16      	ldr	r3, [pc, #88]	; (800115c <MX_SPI1_Init+0x64>)
 8001104:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001108:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <MX_SPI1_Init+0x64>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <MX_SPI1_Init+0x64>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_SPI1_Init+0x64>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <MX_SPI1_Init+0x64>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_SPI1_Init+0x64>)
 8001124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001128:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <MX_SPI1_Init+0x64>)
 800112c:	2200      	movs	r2, #0
 800112e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <MX_SPI1_Init+0x64>)
 8001132:	2200      	movs	r2, #0
 8001134:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_SPI1_Init+0x64>)
 8001138:	2200      	movs	r2, #0
 800113a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <MX_SPI1_Init+0x64>)
 800113e:	2200      	movs	r2, #0
 8001140:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <MX_SPI1_Init+0x64>)
 8001144:	220a      	movs	r2, #10
 8001146:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <MX_SPI1_Init+0x64>)
 800114a:	f004 ff6f 	bl	800602c <HAL_SPI_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001154:	f000 fcb2 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000138 	.word	0x20000138
 8001160:	40013000 	.word	0x40013000

08001164 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <MX_SPI2_Init+0x64>)
 800116a:	4a18      	ldr	r2, [pc, #96]	; (80011cc <MX_SPI2_Init+0x68>)
 800116c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <MX_SPI2_Init+0x64>)
 8001170:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001174:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <MX_SPI2_Init+0x64>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <MX_SPI2_Init+0x64>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_SPI2_Init+0x64>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_SPI2_Init+0x64>)
 800118a:	2200      	movs	r2, #0
 800118c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_SPI2_Init+0x64>)
 8001190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001194:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_SPI2_Init+0x64>)
 8001198:	2200      	movs	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <MX_SPI2_Init+0x64>)
 800119e:	2200      	movs	r2, #0
 80011a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_SPI2_Init+0x64>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <MX_SPI2_Init+0x64>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_SPI2_Init+0x64>)
 80011b0:	220a      	movs	r2, #10
 80011b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <MX_SPI2_Init+0x64>)
 80011b6:	f004 ff39 	bl	800602c <HAL_SPI_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80011c0:	f000 fc7c 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000190 	.word	0x20000190
 80011cc:	40003800 	.word	0x40003800

080011d0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d6:	463b      	mov	r3, r7
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <MX_TIM6_Init+0x64>)
 80011e0:	4a15      	ldr	r2, [pc, #84]	; (8001238 <MX_TIM6_Init+0x68>)
 80011e2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 41999;
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <MX_TIM6_Init+0x64>)
 80011e6:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80011ea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_TIM6_Init+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 40;
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <MX_TIM6_Init+0x64>)
 80011f4:	2228      	movs	r2, #40	; 0x28
 80011f6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_TIM6_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011fe:	480d      	ldr	r0, [pc, #52]	; (8001234 <MX_TIM6_Init+0x64>)
 8001200:	f005 fe32 	bl	8006e68 <HAL_TIM_Base_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800120a:	f000 fc57 	bl	8001abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120e:	2300      	movs	r3, #0
 8001210:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001216:	463b      	mov	r3, r7
 8001218:	4619      	mov	r1, r3
 800121a:	4806      	ldr	r0, [pc, #24]	; (8001234 <MX_TIM6_Init+0x64>)
 800121c:	f006 f8b2 	bl	8007384 <HAL_TIMEx_MasterConfigSynchronization>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001226:	f000 fc49 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200002a8 	.word	0x200002a8
 8001238:	40001000 	.word	0x40001000

0800123c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001242:	463b      	mov	r3, r7
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <MX_TIM7_Init+0x64>)
 800124c:	4a15      	ldr	r2, [pc, #84]	; (80012a4 <MX_TIM7_Init+0x68>)
 800124e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 41999;
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <MX_TIM7_Init+0x64>)
 8001252:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001256:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_TIM7_Init+0x64>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2000;
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <MX_TIM7_Init+0x64>)
 8001260:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001264:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_TIM7_Init+0x64>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800126c:	480c      	ldr	r0, [pc, #48]	; (80012a0 <MX_TIM7_Init+0x64>)
 800126e:	f005 fdfb 	bl	8006e68 <HAL_TIM_Base_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001278:	f000 fc20 	bl	8001abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127c:	2300      	movs	r3, #0
 800127e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	4619      	mov	r1, r3
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_TIM7_Init+0x64>)
 800128a:	f006 f87b 	bl	8007384 <HAL_TIMEx_MasterConfigSynchronization>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001294:	f000 fc12 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200002f0 	.word	0x200002f0
 80012a4:	40001400 	.word	0x40001400

080012a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <MX_USART2_UART_Init+0x50>)
 80012b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012ce:	220c      	movs	r2, #12
 80012d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012e0:	f006 f8e0 	bl	80074a4 <HAL_UART_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012ea:	f000 fbe7 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000338 	.word	0x20000338
 80012f8:	40004400 	.word	0x40004400

080012fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_DMA_Init+0x68>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a16      	ldr	r2, [pc, #88]	; (8001364 <MX_DMA_Init+0x68>)
 800130c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_DMA_Init+0x68>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	603b      	str	r3, [r7, #0]
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <MX_DMA_Init+0x68>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a0f      	ldr	r2, [pc, #60]	; (8001364 <MX_DMA_Init+0x68>)
 8001328:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <MX_DMA_Init+0x68>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	200f      	movs	r0, #15
 8001340:	f001 fea9 	bl	8003096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001344:	200f      	movs	r0, #15
 8001346:	f001 fec2 	bl	80030ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2100      	movs	r1, #0
 800134e:	203b      	movs	r0, #59	; 0x3b
 8001350:	f001 fea1 	bl	8003096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001354:	203b      	movs	r0, #59	; 0x3b
 8001356:	f001 feba 	bl	80030ce <HAL_NVIC_EnableIRQ>

}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800

08001368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	4b57      	ldr	r3, [pc, #348]	; (80014e0 <MX_GPIO_Init+0x178>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a56      	ldr	r2, [pc, #344]	; (80014e0 <MX_GPIO_Init+0x178>)
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b54      	ldr	r3, [pc, #336]	; (80014e0 <MX_GPIO_Init+0x178>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	4b50      	ldr	r3, [pc, #320]	; (80014e0 <MX_GPIO_Init+0x178>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a4f      	ldr	r2, [pc, #316]	; (80014e0 <MX_GPIO_Init+0x178>)
 80013a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b4d      	ldr	r3, [pc, #308]	; (80014e0 <MX_GPIO_Init+0x178>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	4b49      	ldr	r3, [pc, #292]	; (80014e0 <MX_GPIO_Init+0x178>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a48      	ldr	r2, [pc, #288]	; (80014e0 <MX_GPIO_Init+0x178>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b46      	ldr	r3, [pc, #280]	; (80014e0 <MX_GPIO_Init+0x178>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4b42      	ldr	r3, [pc, #264]	; (80014e0 <MX_GPIO_Init+0x178>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a41      	ldr	r2, [pc, #260]	; (80014e0 <MX_GPIO_Init+0x178>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b3f      	ldr	r3, [pc, #252]	; (80014e0 <MX_GPIO_Init+0x178>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	4b3b      	ldr	r3, [pc, #236]	; (80014e0 <MX_GPIO_Init+0x178>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a3a      	ldr	r2, [pc, #232]	; (80014e0 <MX_GPIO_Init+0x178>)
 80013f8:	f043 0308 	orr.w	r3, r3, #8
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <MX_GPIO_Init+0x178>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_WP_Pin|SPI2_CS_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	2113      	movs	r1, #19
 800140e:	4835      	ldr	r0, [pc, #212]	; (80014e4 <MX_GPIO_Init+0x17c>)
 8001410:	f002 fc3e 	bl	8003c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_WP_GPIO_Port, SPI1_WP_Pin, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	2110      	movs	r1, #16
 8001418:	4833      	ldr	r0, [pc, #204]	; (80014e8 <MX_GPIO_Init+0x180>)
 800141a:	f002 fc39 	bl	8003c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001424:	4831      	ldr	r0, [pc, #196]	; (80014ec <MX_GPIO_Init+0x184>)
 8001426:	f002 fc33 	bl	8003c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_WP_Pin */
  GPIO_InitStruct.Pin = SPI2_WP_Pin;
 800142a:	2301      	movs	r3, #1
 800142c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001432:	2301      	movs	r3, #1
 8001434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_WP_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	4828      	ldr	r0, [pc, #160]	; (80014e4 <MX_GPIO_Init+0x17c>)
 8001442:	f002 fa61 	bl	8003908 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|SPI1_CS_Pin;
 8001446:	2312      	movs	r3, #18
 8001448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144a:	2301      	movs	r3, #1
 800144c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	4821      	ldr	r0, [pc, #132]	; (80014e4 <MX_GPIO_Init+0x17c>)
 800145e:	f002 fa53 	bl	8003908 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_WP_Pin */
  GPIO_InitStruct.Pin = SPI1_WP_Pin;
 8001462:	2310      	movs	r3, #16
 8001464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001466:	2301      	movs	r3, #1
 8001468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800146a:	2301      	movs	r3, #1
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_WP_GPIO_Port, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	481b      	ldr	r0, [pc, #108]	; (80014e8 <MX_GPIO_Init+0x180>)
 800147a:	f002 fa45 	bl	8003908 <HAL_GPIO_Init>

  /*Configure GPIO pin : JMP_Flight_Pin */
  GPIO_InitStruct.Pin = JMP_Flight_Pin;
 800147e:	2302      	movs	r3, #2
 8001480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(JMP_Flight_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	4816      	ldr	r0, [pc, #88]	; (80014ec <MX_GPIO_Init+0x184>)
 8001492:	f002 fa39 	bl	8003908 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8001496:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800149a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014a0:	2302      	movs	r3, #2
 80014a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4619      	mov	r1, r3
 80014ae:	480f      	ldr	r0, [pc, #60]	; (80014ec <MX_GPIO_Init+0x184>)
 80014b0:	f002 fa2a 	bl	8003908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80014b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80014c6:	2309      	movs	r3, #9
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_GPIO_Init+0x180>)
 80014d2:	f002 fa19 	bl	8003908 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d6:	bf00      	nop
 80014d8:	3728      	adds	r7, #40	; 0x28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020400 	.word	0x40020400

080014f0 <clean_data_buffer>:

/* USER CODE BEGIN 4 */
void clean_data_buffer(uint16_t array_size, uint8_t data_array[array_size]) {
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	6039      	str	r1, [r7, #0]
 80014fa:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < array_size; ++i) {
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	e007      	b.n	8001512 <clean_data_buffer+0x22>
    	data_array[i] = 0xFF;  // Initialize each element to 0xFF
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	4413      	add	r3, r2
 8001508:	22ff      	movs	r2, #255	; 0xff
 800150a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < array_size; ++i) {
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	3301      	adds	r3, #1
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	429a      	cmp	r2, r3
 8001518:	dbf3      	blt.n	8001502 <clean_data_buffer+0x12>
    }
}
 800151a:	bf00      	nop
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <systemInit>:

void systemInit() {
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
	i2c_accel = &hi2c2;
 800152e:	4b56      	ldr	r3, [pc, #344]	; (8001688 <systemInit+0x160>)
 8001530:	4a56      	ldr	r2, [pc, #344]	; (800168c <systemInit+0x164>)
 8001532:	601a      	str	r2, [r3, #0]
	i2c_bme280 = &hi2c1;
 8001534:	4b56      	ldr	r3, [pc, #344]	; (8001690 <systemInit+0x168>)
 8001536:	4a57      	ldr	r2, [pc, #348]	; (8001694 <systemInit+0x16c>)
 8001538:	601a      	str	r2, [r3, #0]

	gpio_set_config();
 800153a:	f000 f8dd 	bl	80016f8 <gpio_set_config>

	HAL_GPIO_WritePin(led_orange.GPIOx, led_orange.GPIO_Pin, GPIO_PIN_RESET);	// Turn LED off
 800153e:	4b56      	ldr	r3, [pc, #344]	; (8001698 <systemInit+0x170>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a55      	ldr	r2, [pc, #340]	; (8001698 <systemInit+0x170>)
 8001544:	8891      	ldrh	r1, [r2, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f002 fba1 	bl	8003c90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cs_spi1.GPIOx, cs_spi1.GPIO_Pin, GPIO_PIN_SET);		// SET SPI CS High to disable bus 1
 800154e:	4b53      	ldr	r3, [pc, #332]	; (800169c <systemInit+0x174>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a52      	ldr	r2, [pc, #328]	; (800169c <systemInit+0x174>)
 8001554:	8891      	ldrh	r1, [r2, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	4618      	mov	r0, r3
 800155a:	f002 fb99 	bl	8003c90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(cs_spi2.GPIOx, cs_spi2.GPIO_Pin, GPIO_PIN_SET);		// SET SPI CS High to disable bus 2
 800155e:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <systemInit+0x178>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a4f      	ldr	r2, [pc, #316]	; (80016a0 <systemInit+0x178>)
 8001564:	8891      	ldrh	r1, [r2, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	4618      	mov	r0, r3
 800156a:	f002 fb91 	bl	8003c90 <HAL_GPIO_WritePin>

	// Clean the data buffer and set all values to 0xFF
	clean_data_buffer(PAGE_SIZE, data_buffer_tx[0]);
 800156e:	494d      	ldr	r1, [pc, #308]	; (80016a4 <systemInit+0x17c>)
 8001570:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001574:	f7ff ffbc 	bl	80014f0 <clean_data_buffer>
	clean_data_buffer(PAGE_SIZE, data_buffer_tx[1]);
 8001578:	494b      	ldr	r1, [pc, #300]	; (80016a8 <systemInit+0x180>)
 800157a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800157e:	f7ff ffb7 	bl	80014f0 <clean_data_buffer>

	for (uint8_t i = 0; i < 6; i++) {
 8001582:	2300      	movs	r3, #0
 8001584:	73fb      	strb	r3, [r7, #15]
 8001586:	e00e      	b.n	80015a6 <systemInit+0x7e>
		accel_data[i] = 0x00;
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	4a48      	ldr	r2, [pc, #288]	; (80016ac <systemInit+0x184>)
 800158c:	2100      	movs	r1, #0
 800158e:	54d1      	strb	r1, [r2, r3]
		bme280_data_0[i] = 0x00;
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	4a47      	ldr	r2, [pc, #284]	; (80016b0 <systemInit+0x188>)
 8001594:	2100      	movs	r1, #0
 8001596:	54d1      	strb	r1, [r2, r3]
		bme280_data_1[i] = 0x00;
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	4a46      	ldr	r2, [pc, #280]	; (80016b4 <systemInit+0x18c>)
 800159c:	2100      	movs	r1, #0
 800159e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 6; i++) {
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	3301      	adds	r3, #1
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	2b05      	cmp	r3, #5
 80015aa:	d9ed      	bls.n	8001588 <systemInit+0x60>
	}

	// Initialise the peripherals
	init_accel(i2c_accel);
 80015ac:	4b36      	ldr	r3, [pc, #216]	; (8001688 <systemInit+0x160>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ffa1 	bl	80004f8 <init_accel>
	init_bme280(i2c_bme280, 0);
 80015b6:	4b36      	ldr	r3, [pc, #216]	; (8001690 <systemInit+0x168>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff f80f 	bl	80005e0 <init_bme280>
	init_bme280(i2c_bme280, 1);
 80015c2:	4b33      	ldr	r3, [pc, #204]	; (8001690 <systemInit+0x168>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2101      	movs	r1, #1
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff f809 	bl	80005e0 <init_bme280>
	software_reset(&hspi1, cs_spi1);
 80015ce:	4b33      	ldr	r3, [pc, #204]	; (800169c <systemInit+0x174>)
 80015d0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80015d4:	4838      	ldr	r0, [pc, #224]	; (80016b8 <systemInit+0x190>)
 80015d6:	f7ff f99d 	bl	8000914 <software_reset>
	software_reset(&hspi2, cs_spi2);
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <systemInit+0x178>)
 80015dc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80015e0:	4836      	ldr	r0, [pc, #216]	; (80016bc <systemInit+0x194>)
 80015e2:	f7ff f997 	bl	8000914 <software_reset>

	int next_blank_page0 = find_next_blank_page(&hspi1, &end_of_flash, cs_spi1);
 80015e6:	4b2d      	ldr	r3, [pc, #180]	; (800169c <systemInit+0x174>)
 80015e8:	cb0c      	ldmia	r3, {r2, r3}
 80015ea:	4935      	ldr	r1, [pc, #212]	; (80016c0 <systemInit+0x198>)
 80015ec:	4832      	ldr	r0, [pc, #200]	; (80016b8 <systemInit+0x190>)
 80015ee:	f7ff f9e3 	bl	80009b8 <find_next_blank_page>
 80015f2:	4603      	mov	r3, r0
 80015f4:	60bb      	str	r3, [r7, #8]
	int next_blank_page1 = find_next_blank_page(&hspi2, &end_of_flash, cs_spi2);
 80015f6:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <systemInit+0x178>)
 80015f8:	cb0c      	ldmia	r3, {r2, r3}
 80015fa:	4931      	ldr	r1, [pc, #196]	; (80016c0 <systemInit+0x198>)
 80015fc:	482f      	ldr	r0, [pc, #188]	; (80016bc <systemInit+0x194>)
 80015fe:	f7ff f9db 	bl	80009b8 <find_next_blank_page>
 8001602:	4603      	mov	r3, r0
 8001604:	607b      	str	r3, [r7, #4]

	// Assign the value of next_blank_page to the larger of next_blank_page0 and next_blank_page1
	next_blank_page = (next_blank_page0 > next_blank_page1) ? next_blank_page0 : next_blank_page1;
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	4293      	cmp	r3, r2
 800160c:	bfb8      	it	lt
 800160e:	4613      	movlt	r3, r2
 8001610:	461a      	mov	r2, r3
 8001612:	4b2c      	ldr	r3, [pc, #176]	; (80016c4 <systemInit+0x19c>)
 8001614:	601a      	str	r2, [r3, #0]

	buffer_ref = 0;
 8001616:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <systemInit+0x1a0>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
	byte_tracker = 0;
 800161c:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <systemInit+0x1a4>)
 800161e:	2200      	movs	r2, #0
 8001620:	801a      	strh	r2, [r3, #0]
	end_of_flash = GPIO_PIN_RESET;
 8001622:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <systemInit+0x198>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
	uart2_rec_flag = 0;
 8001628:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <systemInit+0x1a8>)
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]
	tim6_overflow_flag = 0;
 800162e:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <systemInit+0x1ac>)
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
	tim7_overflow_flag = 0;
 8001634:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <systemInit+0x1b0>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
	flight_state = 0x00;
 800163a:	4b28      	ldr	r3, [pc, #160]	; (80016dc <systemInit+0x1b4>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]

	sysStatus = systemStatus(&hspi1, &hspi2, i2c_bme280, i2c_accel);
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <systemInit+0x168>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b10      	ldr	r3, [pc, #64]	; (8001688 <systemInit+0x160>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	491c      	ldr	r1, [pc, #112]	; (80016bc <systemInit+0x194>)
 800164a:	481b      	ldr	r0, [pc, #108]	; (80016b8 <systemInit+0x190>)
 800164c:	f000 fa3c 	bl	8001ac8 <systemStatus>
 8001650:	4603      	mov	r3, r0
 8001652:	461a      	mov	r2, r3
 8001654:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <systemInit+0x1b8>)
 8001656:	701a      	strb	r2, [r3, #0]

	send_uart_hex(&huart2, sysStatus);
 8001658:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <systemInit+0x1b8>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4619      	mov	r1, r3
 800165e:	4821      	ldr	r0, [pc, #132]	; (80016e4 <systemInit+0x1bc>)
 8001660:	f001 fa6d 	bl	8002b3e <send_uart_hex>

	// Initiate clocks, interrupts and DMA
	HAL_UART_Receive_IT(&huart2, UARTRxData, 2);
 8001664:	2202      	movs	r2, #2
 8001666:	4920      	ldr	r1, [pc, #128]	; (80016e8 <systemInit+0x1c0>)
 8001668:	481e      	ldr	r0, [pc, #120]	; (80016e4 <systemInit+0x1bc>)
 800166a:	f005 fff6 	bl	800765a <HAL_UART_Receive_IT>
	initialise_rtc_default(&hrtc);
 800166e:	481f      	ldr	r0, [pc, #124]	; (80016ec <systemInit+0x1c4>)
 8001670:	f000 fd76 	bl	8002160 <initialise_rtc_default>
	HAL_TIM_Base_Start_IT(&htim6);
 8001674:	481e      	ldr	r0, [pc, #120]	; (80016f0 <systemInit+0x1c8>)
 8001676:	f005 fc47 	bl	8006f08 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 800167a:	481e      	ldr	r0, [pc, #120]	; (80016f4 <systemInit+0x1cc>)
 800167c:	f005 fc44 	bl	8006f08 <HAL_TIM_Base_Start_IT>
}
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000380 	.word	0x20000380
 800168c:	200000c4 	.word	0x200000c4
 8001690:	20000384 	.word	0x20000384
 8001694:	20000070 	.word	0x20000070
 8001698:	200005b4 	.word	0x200005b4
 800169c:	200005c4 	.word	0x200005c4
 80016a0:	200005d4 	.word	0x200005d4
 80016a4:	20000390 	.word	0x20000390
 80016a8:	20000490 	.word	0x20000490
 80016ac:	20000594 	.word	0x20000594
 80016b0:	2000059c 	.word	0x2000059c
 80016b4:	200005a4 	.word	0x200005a4
 80016b8:	20000138 	.word	0x20000138
 80016bc:	20000190 	.word	0x20000190
 80016c0:	200005b2 	.word	0x200005b2
 80016c4:	200005ac 	.word	0x200005ac
 80016c8:	200005aa 	.word	0x200005aa
 80016cc:	200005b0 	.word	0x200005b0
 80016d0:	2000038a 	.word	0x2000038a
 80016d4:	2000038b 	.word	0x2000038b
 80016d8:	2000038c 	.word	0x2000038c
 80016dc:	200005ed 	.word	0x200005ed
 80016e0:	200005ec 	.word	0x200005ec
 80016e4:	20000338 	.word	0x20000338
 80016e8:	20000388 	.word	0x20000388
 80016ec:	20000118 	.word	0x20000118
 80016f0:	200002a8 	.word	0x200002a8
 80016f4:	200002f0 	.word	0x200002f0

080016f8 <gpio_set_config>:

void gpio_set_config() {
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
	// Set LED gpio
	led_orange = create_GPIO_Config(GPIOB, GPIO_PIN_14);	// Orange LED (Heartbeat LED)
 80016fe:	4c30      	ldr	r4, [pc, #192]	; (80017c0 <gpio_set_config+0xc8>)
 8001700:	463b      	mov	r3, r7
 8001702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001706:	492f      	ldr	r1, [pc, #188]	; (80017c4 <gpio_set_config+0xcc>)
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fa35 	bl	8000b78 <create_GPIO_Config>
 800170e:	4622      	mov	r2, r4
 8001710:	463b      	mov	r3, r7
 8001712:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001716:	e882 0003 	stmia.w	r2, {r0, r1}
	led_green = create_GPIO_Config(GPIOB, GPIO_PIN_7);		// Green LED (Hard Drive LED)
 800171a:	4c2b      	ldr	r4, [pc, #172]	; (80017c8 <gpio_set_config+0xd0>)
 800171c:	463b      	mov	r3, r7
 800171e:	2280      	movs	r2, #128	; 0x80
 8001720:	4928      	ldr	r1, [pc, #160]	; (80017c4 <gpio_set_config+0xcc>)
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fa28 	bl	8000b78 <create_GPIO_Config>
 8001728:	4622      	mov	r2, r4
 800172a:	463b      	mov	r3, r7
 800172c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001730:	e882 0003 	stmia.w	r2, {r0, r1}

	// SPI Flash 0 CS and WP
	cs_spi1 = create_GPIO_Config(GPIOC, GPIO_PIN_4);		// Change for SRAD
 8001734:	4c25      	ldr	r4, [pc, #148]	; (80017cc <gpio_set_config+0xd4>)
 8001736:	463b      	mov	r3, r7
 8001738:	2210      	movs	r2, #16
 800173a:	4925      	ldr	r1, [pc, #148]	; (80017d0 <gpio_set_config+0xd8>)
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fa1b 	bl	8000b78 <create_GPIO_Config>
 8001742:	4622      	mov	r2, r4
 8001744:	463b      	mov	r3, r7
 8001746:	e893 0003 	ldmia.w	r3, {r0, r1}
 800174a:	e882 0003 	stmia.w	r2, {r0, r1}
	wp_spi1 = create_GPIO_Config(GPIOA, GPIO_PIN_4);
 800174e:	4c21      	ldr	r4, [pc, #132]	; (80017d4 <gpio_set_config+0xdc>)
 8001750:	463b      	mov	r3, r7
 8001752:	2210      	movs	r2, #16
 8001754:	4920      	ldr	r1, [pc, #128]	; (80017d8 <gpio_set_config+0xe0>)
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fa0e 	bl	8000b78 <create_GPIO_Config>
 800175c:	4622      	mov	r2, r4
 800175e:	463b      	mov	r3, r7
 8001760:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001764:	e882 0003 	stmia.w	r2, {r0, r1}

	// SPI Flash 1 CS and WP
	cs_spi2 = create_GPIO_Config(GPIOC, GPIO_PIN_1);		// Change for SRAD
 8001768:	4c1c      	ldr	r4, [pc, #112]	; (80017dc <gpio_set_config+0xe4>)
 800176a:	463b      	mov	r3, r7
 800176c:	2202      	movs	r2, #2
 800176e:	4918      	ldr	r1, [pc, #96]	; (80017d0 <gpio_set_config+0xd8>)
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fa01 	bl	8000b78 <create_GPIO_Config>
 8001776:	4622      	mov	r2, r4
 8001778:	463b      	mov	r3, r7
 800177a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800177e:	e882 0003 	stmia.w	r2, {r0, r1}
	wp_spi2 = create_GPIO_Config(GPIOC, GPIO_PIN_0);
 8001782:	4c17      	ldr	r4, [pc, #92]	; (80017e0 <gpio_set_config+0xe8>)
 8001784:	463b      	mov	r3, r7
 8001786:	2201      	movs	r2, #1
 8001788:	4911      	ldr	r1, [pc, #68]	; (80017d0 <gpio_set_config+0xd8>)
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff f9f4 	bl	8000b78 <create_GPIO_Config>
 8001790:	4622      	mov	r2, r4
 8001792:	463b      	mov	r3, r7
 8001794:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001798:	e882 0003 	stmia.w	r2, {r0, r1}

	// Flight Jumper GPIO Input
	jmp_flight = create_GPIO_Config(GPIOB, GPIO_PIN_1);
 800179c:	4c11      	ldr	r4, [pc, #68]	; (80017e4 <gpio_set_config+0xec>)
 800179e:	463b      	mov	r3, r7
 80017a0:	2202      	movs	r2, #2
 80017a2:	4908      	ldr	r1, [pc, #32]	; (80017c4 <gpio_set_config+0xcc>)
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff f9e7 	bl	8000b78 <create_GPIO_Config>
 80017aa:	4622      	mov	r2, r4
 80017ac:	463b      	mov	r3, r7
 80017ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017b2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd90      	pop	{r4, r7, pc}
 80017be:	bf00      	nop
 80017c0:	200005b4 	.word	0x200005b4
 80017c4:	40020400 	.word	0x40020400
 80017c8:	200005bc 	.word	0x200005bc
 80017cc:	200005c4 	.word	0x200005c4
 80017d0:	40020800 	.word	0x40020800
 80017d4:	200005cc 	.word	0x200005cc
 80017d8:	40020000 	.word	0x40020000
 80017dc:	200005d4 	.word	0x200005d4
 80017e0:	200005dc 	.word	0x200005dc
 80017e4:	200005e4 	.word	0x200005e4

080017e8 <handleUART>:

void handleUART() {
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
	UART_HandleTypeDef *huart = &huart2;
 80017ee:	4b87      	ldr	r3, [pc, #540]	; (8001a0c <handleUART+0x224>)
 80017f0:	607b      	str	r3, [r7, #4]

	// Send Heartbeat to UART (data_rx[0] = "h")
	if (UARTRxData[0] == 0x68) {
 80017f2:	4b87      	ldr	r3, [pc, #540]	; (8001a10 <handleUART+0x228>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b68      	cmp	r3, #104	; 0x68
 80017f8:	d109      	bne.n	800180e <handleUART+0x26>
		heartbeatUART(huart);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f9b6 	bl	8001b6c <heartbeatUART>
		send_uart_hex(huart, sysStatus);
 8001800:	4b84      	ldr	r3, [pc, #528]	; (8001a14 <handleUART+0x22c>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	4619      	mov	r1, r3
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f001 f999 	bl	8002b3e <send_uart_hex>
 800180c:	e0f1      	b.n	80019f2 <handleUART+0x20a>
	}

/***************************** SPI Flash ************************************************/
	// Erase specified flash chip (data_rx[0]  = "e")
	else if (UARTRxData[0] == 0x65) {
 800180e:	4b80      	ldr	r3, [pc, #512]	; (8001a10 <handleUART+0x228>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b65      	cmp	r3, #101	; 0x65
 8001814:	d11e      	bne.n	8001854 <handleUART+0x6c>
		if(decodeASCII(UARTRxData[1]) == 0) {
 8001816:	4b7e      	ldr	r3, [pc, #504]	; (8001a10 <handleUART+0x228>)
 8001818:	785b      	ldrb	r3, [r3, #1]
 800181a:	4618      	mov	r0, r3
 800181c:	f000 f90a 	bl	8001a34 <decodeASCII>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d106      	bne.n	8001834 <handleUART+0x4c>
			eraseFlashSPI(&hspi1, huart, cs_spi1);
 8001826:	4b7c      	ldr	r3, [pc, #496]	; (8001a18 <handleUART+0x230>)
 8001828:	cb0c      	ldmia	r3, {r2, r3}
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	487b      	ldr	r0, [pc, #492]	; (8001a1c <handleUART+0x234>)
 800182e:	f000 f9a9 	bl	8001b84 <eraseFlashSPI>
 8001832:	e0de      	b.n	80019f2 <handleUART+0x20a>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 8001834:	4b76      	ldr	r3, [pc, #472]	; (8001a10 <handleUART+0x228>)
 8001836:	785b      	ldrb	r3, [r3, #1]
 8001838:	4618      	mov	r0, r3
 800183a:	f000 f8fb 	bl	8001a34 <decodeASCII>
 800183e:	4603      	mov	r3, r0
 8001840:	2b01      	cmp	r3, #1
 8001842:	f040 80d6 	bne.w	80019f2 <handleUART+0x20a>
			eraseFlashSPI(&hspi2, huart, cs_spi2);
 8001846:	4b76      	ldr	r3, [pc, #472]	; (8001a20 <handleUART+0x238>)
 8001848:	cb0c      	ldmia	r3, {r2, r3}
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4875      	ldr	r0, [pc, #468]	; (8001a24 <handleUART+0x23c>)
 800184e:	f000 f999 	bl	8001b84 <eraseFlashSPI>
 8001852:	e0ce      	b.n	80019f2 <handleUART+0x20a>
		}
	}

	// Read data from specified flash chip (data_rx[0] = "r")
	else if (UARTRxData[0] == 0x72) {
 8001854:	4b6e      	ldr	r3, [pc, #440]	; (8001a10 <handleUART+0x228>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b72      	cmp	r3, #114	; 0x72
 800185a:	d11e      	bne.n	800189a <handleUART+0xb2>
		if(decodeASCII(UARTRxData[1]) == 0) {
 800185c:	4b6c      	ldr	r3, [pc, #432]	; (8001a10 <handleUART+0x228>)
 800185e:	785b      	ldrb	r3, [r3, #1]
 8001860:	4618      	mov	r0, r3
 8001862:	f000 f8e7 	bl	8001a34 <decodeASCII>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d106      	bne.n	800187a <handleUART+0x92>
			readFlashToUART(&hspi1, huart, cs_spi1);
 800186c:	4b6a      	ldr	r3, [pc, #424]	; (8001a18 <handleUART+0x230>)
 800186e:	cb0c      	ldmia	r3, {r2, r3}
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	486a      	ldr	r0, [pc, #424]	; (8001a1c <handleUART+0x234>)
 8001874:	f000 f9c2 	bl	8001bfc <readFlashToUART>
 8001878:	e0bb      	b.n	80019f2 <handleUART+0x20a>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 800187a:	4b65      	ldr	r3, [pc, #404]	; (8001a10 <handleUART+0x228>)
 800187c:	785b      	ldrb	r3, [r3, #1]
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f8d8 	bl	8001a34 <decodeASCII>
 8001884:	4603      	mov	r3, r0
 8001886:	2b01      	cmp	r3, #1
 8001888:	f040 80b3 	bne.w	80019f2 <handleUART+0x20a>
			readFlashToUART(&hspi2, huart, cs_spi2);
 800188c:	4b64      	ldr	r3, [pc, #400]	; (8001a20 <handleUART+0x238>)
 800188e:	cb0c      	ldmia	r3, {r2, r3}
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4864      	ldr	r0, [pc, #400]	; (8001a24 <handleUART+0x23c>)
 8001894:	f000 f9b2 	bl	8001bfc <readFlashToUART>
 8001898:	e0ab      	b.n	80019f2 <handleUART+0x20a>
		}
	}

	// Read Manufacturer over SPI (data_rx[0] = "m")
	else if (UARTRxData[0] == 0x6d) {
 800189a:	4b5d      	ldr	r3, [pc, #372]	; (8001a10 <handleUART+0x228>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b6d      	cmp	r3, #109	; 0x6d
 80018a0:	d11e      	bne.n	80018e0 <handleUART+0xf8>
		if(decodeASCII(UARTRxData[1]) == 0) {
 80018a2:	4b5b      	ldr	r3, [pc, #364]	; (8001a10 <handleUART+0x228>)
 80018a4:	785b      	ldrb	r3, [r3, #1]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f8c4 	bl	8001a34 <decodeASCII>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d106      	bne.n	80018c0 <handleUART+0xd8>
			readFlashManuSPI(&hspi1, huart, cs_spi1);
 80018b2:	4b59      	ldr	r3, [pc, #356]	; (8001a18 <handleUART+0x230>)
 80018b4:	cb0c      	ldmia	r3, {r2, r3}
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4858      	ldr	r0, [pc, #352]	; (8001a1c <handleUART+0x234>)
 80018ba:	f000 fa0b 	bl	8001cd4 <readFlashManuSPI>
 80018be:	e098      	b.n	80019f2 <handleUART+0x20a>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 80018c0:	4b53      	ldr	r3, [pc, #332]	; (8001a10 <handleUART+0x228>)
 80018c2:	785b      	ldrb	r3, [r3, #1]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 f8b5 	bl	8001a34 <decodeASCII>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	f040 8090 	bne.w	80019f2 <handleUART+0x20a>
			readFlashManuSPI(&hspi2, huart, cs_spi2);
 80018d2:	4b53      	ldr	r3, [pc, #332]	; (8001a20 <handleUART+0x238>)
 80018d4:	cb0c      	ldmia	r3, {r2, r3}
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4852      	ldr	r0, [pc, #328]	; (8001a24 <handleUART+0x23c>)
 80018da:	f000 f9fb 	bl	8001cd4 <readFlashManuSPI>
 80018de:	e088      	b.n	80019f2 <handleUART+0x20a>
		}
	}

	// Write a page over SPI (data_rx[0] = "w")
	else if (UARTRxData[0] == 0x77) {
 80018e0:	4b4b      	ldr	r3, [pc, #300]	; (8001a10 <handleUART+0x228>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b77      	cmp	r3, #119	; 0x77
 80018e6:	d11d      	bne.n	8001924 <handleUART+0x13c>
		if(decodeASCII(UARTRxData[1]) == 0) {
 80018e8:	4b49      	ldr	r3, [pc, #292]	; (8001a10 <handleUART+0x228>)
 80018ea:	785b      	ldrb	r3, [r3, #1]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 f8a1 	bl	8001a34 <decodeASCII>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d106      	bne.n	8001906 <handleUART+0x11e>
			writePageSPI_W(&hspi1, huart, cs_spi1);
 80018f8:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <handleUART+0x230>)
 80018fa:	cb0c      	ldmia	r3, {r2, r3}
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4847      	ldr	r0, [pc, #284]	; (8001a1c <handleUART+0x234>)
 8001900:	f000 fa08 	bl	8001d14 <writePageSPI_W>
 8001904:	e075      	b.n	80019f2 <handleUART+0x20a>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 8001906:	4b42      	ldr	r3, [pc, #264]	; (8001a10 <handleUART+0x228>)
 8001908:	785b      	ldrb	r3, [r3, #1]
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f892 	bl	8001a34 <decodeASCII>
 8001910:	4603      	mov	r3, r0
 8001912:	2b01      	cmp	r3, #1
 8001914:	d16d      	bne.n	80019f2 <handleUART+0x20a>
			writePageSPI_W(&hspi2, huart, cs_spi2);
 8001916:	4b42      	ldr	r3, [pc, #264]	; (8001a20 <handleUART+0x238>)
 8001918:	cb0c      	ldmia	r3, {r2, r3}
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4841      	ldr	r0, [pc, #260]	; (8001a24 <handleUART+0x23c>)
 800191e:	f000 f9f9 	bl	8001d14 <writePageSPI_W>
 8001922:	e066      	b.n	80019f2 <handleUART+0x20a>
		}
	}

	// Software reset flash chip over SPI (data_rx[0] = "x")
	else if (UARTRxData[0] == 0x78) {
 8001924:	4b3a      	ldr	r3, [pc, #232]	; (8001a10 <handleUART+0x228>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b78      	cmp	r3, #120	; 0x78
 800192a:	d11d      	bne.n	8001968 <handleUART+0x180>
		if(decodeASCII(UARTRxData[1]) == 0) {
 800192c:	4b38      	ldr	r3, [pc, #224]	; (8001a10 <handleUART+0x228>)
 800192e:	785b      	ldrb	r3, [r3, #1]
 8001930:	4618      	mov	r0, r3
 8001932:	f000 f87f 	bl	8001a34 <decodeASCII>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d106      	bne.n	800194a <handleUART+0x162>
			resetSPIFlash(&hspi1, huart, cs_spi1);
 800193c:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <handleUART+0x230>)
 800193e:	cb0c      	ldmia	r3, {r2, r3}
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	4836      	ldr	r0, [pc, #216]	; (8001a1c <handleUART+0x234>)
 8001944:	f000 fa3a 	bl	8001dbc <resetSPIFlash>
 8001948:	e053      	b.n	80019f2 <handleUART+0x20a>
		} else if (decodeASCII(UARTRxData[1]) == 1) {
 800194a:	4b31      	ldr	r3, [pc, #196]	; (8001a10 <handleUART+0x228>)
 800194c:	785b      	ldrb	r3, [r3, #1]
 800194e:	4618      	mov	r0, r3
 8001950:	f000 f870 	bl	8001a34 <decodeASCII>
 8001954:	4603      	mov	r3, r0
 8001956:	2b01      	cmp	r3, #1
 8001958:	d14b      	bne.n	80019f2 <handleUART+0x20a>
			resetSPIFlash(&hspi2, huart, cs_spi2);
 800195a:	4b31      	ldr	r3, [pc, #196]	; (8001a20 <handleUART+0x238>)
 800195c:	cb0c      	ldmia	r3, {r2, r3}
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4830      	ldr	r0, [pc, #192]	; (8001a24 <handleUART+0x23c>)
 8001962:	f000 fa2b 	bl	8001dbc <resetSPIFlash>
 8001966:	e044      	b.n	80019f2 <handleUART+0x20a>
		}
	}

/*********************************** I2C Accelerometer ***********************************/
	// Read Accelerometer WhoAmI (data_rx[0] = "c")
	else if (UARTRxData[0] == 0x63) {
 8001968:	4b29      	ldr	r3, [pc, #164]	; (8001a10 <handleUART+0x228>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b63      	cmp	r3, #99	; 0x63
 800196e:	d106      	bne.n	800197e <handleUART+0x196>
		checkAccelWhoAmI(i2c_accel, huart);
 8001970:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <handleUART+0x240>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	4618      	mov	r0, r3
 8001978:	f000 fa38 	bl	8001dec <checkAccelWhoAmI>
 800197c:	e039      	b.n	80019f2 <handleUART+0x20a>
	}

	// Read the accelerometer and print to the UART[0] (data_rx [0] = "a")
	else if (UARTRxData[0] == 0x61) {
 800197e:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <handleUART+0x228>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b61      	cmp	r3, #97	; 0x61
 8001984:	d103      	bne.n	800198e <handleUART+0x1a6>
		accelToUART(huart);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 fa44 	bl	8001e14 <accelToUART>
 800198c:	e031      	b.n	80019f2 <handleUART+0x20a>
	}

/********************************** I2C BME280 *******************************************/
	// Read the temp sensor ID and print to the UART[0] (data_rx [0]= "b")
	else if (UARTRxData[0] == 0x62) {
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <handleUART+0x228>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b62      	cmp	r3, #98	; 0x62
 8001994:	d10d      	bne.n	80019b2 <handleUART+0x1ca>
		readTempSensorID(i2c_bme280, huart, decodeASCII(UARTRxData[1]));
 8001996:	4b25      	ldr	r3, [pc, #148]	; (8001a2c <handleUART+0x244>)
 8001998:	681c      	ldr	r4, [r3, #0]
 800199a:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <handleUART+0x228>)
 800199c:	785b      	ldrb	r3, [r3, #1]
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f848 	bl	8001a34 <decodeASCII>
 80019a4:	4603      	mov	r3, r0
 80019a6:	461a      	mov	r2, r3
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	4620      	mov	r0, r4
 80019ac:	f000 fa4e 	bl	8001e4c <readTempSensorID>
 80019b0:	e01f      	b.n	80019f2 <handleUART+0x20a>
	}

	// Read the temp sensor calibration registers and print to the UART (data_rx[0] = "p")
	else if (UARTRxData[0] == 0x70) {
 80019b2:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <handleUART+0x228>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b70      	cmp	r3, #112	; 0x70
 80019b8:	d10d      	bne.n	80019d6 <handleUART+0x1ee>
		readTempCalibration(i2c_bme280, huart, decodeASCII(UARTRxData[1]));
 80019ba:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <handleUART+0x244>)
 80019bc:	681c      	ldr	r4, [r3, #0]
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <handleUART+0x228>)
 80019c0:	785b      	ldrb	r3, [r3, #1]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f836 	bl	8001a34 <decodeASCII>
 80019c8:	4603      	mov	r3, r0
 80019ca:	461a      	mov	r2, r3
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	4620      	mov	r0, r4
 80019d0:	f000 fa51 	bl	8001e76 <readTempCalibration>
 80019d4:	e00d      	b.n	80019f2 <handleUART+0x20a>
	}

	// Read the temp sensor and print to the UART[0] (data_rx [0]= "t")
	else if (UARTRxData[0] == 0x74) {
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <handleUART+0x228>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b74      	cmp	r3, #116	; 0x74
 80019dc:	d109      	bne.n	80019f2 <handleUART+0x20a>
		readTempSensor(huart, decodeASCII(UARTRxData[1]));
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <handleUART+0x228>)
 80019e0:	785b      	ldrb	r3, [r3, #1]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f826 	bl	8001a34 <decodeASCII>
 80019e8:	4603      	mov	r3, r0
 80019ea:	4619      	mov	r1, r3
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 fa99 	bl	8001f24 <readTempSensor>
	}

	uart2_rec_flag = 0x00;
 80019f2:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <handleUART+0x248>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
	UARTRxData[0] = 0x00;
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <handleUART+0x228>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
	UARTRxData[1] = 0x00;
 80019fe:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <handleUART+0x228>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	705a      	strb	r2, [r3, #1]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd90      	pop	{r4, r7, pc}
 8001a0c:	20000338 	.word	0x20000338
 8001a10:	20000388 	.word	0x20000388
 8001a14:	200005ec 	.word	0x200005ec
 8001a18:	200005c4 	.word	0x200005c4
 8001a1c:	20000138 	.word	0x20000138
 8001a20:	200005d4 	.word	0x200005d4
 8001a24:	20000190 	.word	0x20000190
 8001a28:	20000380 	.word	0x20000380
 8001a2c:	20000384 	.word	0x20000384
 8001a30:	2000038a 	.word	0x2000038a

08001a34 <decodeASCII>:

uint8_t decodeASCII(uint8_t asciiVal) {
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
	int returnVal = -1;
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a42:	60fb      	str	r3, [r7, #12]
	if ((asciiVal >= 48) && (asciiVal <= 57)) {
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	2b2f      	cmp	r3, #47	; 0x2f
 8001a48:	d905      	bls.n	8001a56 <decodeASCII+0x22>
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	2b39      	cmp	r3, #57	; 0x39
 8001a4e:	d802      	bhi.n	8001a56 <decodeASCII+0x22>
		returnVal = asciiVal - 48;
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	3b30      	subs	r3, #48	; 0x30
 8001a54:	60fb      	str	r3, [r7, #12]
	}
	return returnVal;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	b2db      	uxtb	r3, r3
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <combine_system_status>:

uint8_t combine_system_status() {
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
    // Mask status to use only bits 4:0
    uint8_t masked_status = sysStatus & 0x1F; // 00011111b
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <combine_system_status+0x48>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	f003 031f 	and.w	r3, r3, #31
 8001a76:	71fb      	strb	r3, [r7, #7]

    // Mask flight_state to use only bits 1:0
    uint8_t masked_flight_state = flight_state & 0x03; // 00000011b
 8001a78:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <combine_system_status+0x4c>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	71bb      	strb	r3, [r7, #6]

    // Shift flight_state to the correct position (bits 6:5)
    uint8_t shifted_flight_state = masked_flight_state << 5;
 8001a82:	79bb      	ldrb	r3, [r7, #6]
 8001a84:	015b      	lsls	r3, r3, #5
 8001a86:	717b      	strb	r3, [r7, #5]

    // Combine the masked_status and shifted_flight_state
    uint8_t combined_value = masked_status | shifted_flight_state;
 8001a88:	79fa      	ldrb	r2, [r7, #7]
 8001a8a:	797b      	ldrb	r3, [r7, #5]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	713b      	strb	r3, [r7, #4]

    // Mask end_of_flash to get the last bit and shift it to bit 7
    uint8_t end_of_flash_bit = (end_of_flash & 0x01) << 7;
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <combine_system_status+0x50>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	01db      	lsls	r3, r3, #7
 8001a96:	70fb      	strb	r3, [r7, #3]

    // Combine with end_of_flash_bit
    combined_value |= end_of_flash_bit;
 8001a98:	793a      	ldrb	r2, [r7, #4]
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	713b      	strb	r3, [r7, #4]

    return combined_value;
 8001aa0:	793b      	ldrb	r3, [r7, #4]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	200005ec 	.word	0x200005ec
 8001ab4:	200005ed 	.word	0x200005ed
 8001ab8:	200005b2 	.word	0x200005b2

08001abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac0:	b672      	cpsid	i
}
 8001ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <Error_Handler+0x8>
	...

08001ac8 <systemStatus>:

#include "peripheral_driver.h"
/***************************************************************************************************************
 * Generic Functions
 */
uint8_t systemStatus(SPI_HandleTypeDef *hspi1, SPI_HandleTypeDef *hspi2, I2C_HandleTypeDef* hi2c1, I2C_HandleTypeDef* hi2c2) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
	uint8_t retVal = 0x00;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	75fb      	strb	r3, [r7, #23]

	// Check BME280_1
	if(readBME280_id_reg(hi2c1, 1) != 0x60) {			// Expected 0x60
 8001ada:	2101      	movs	r1, #1
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7fe fe25 	bl	800072c <readBME280_id_reg>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b60      	cmp	r3, #96	; 0x60
 8001ae6:	d003      	beq.n	8001af0 <systemStatus+0x28>
		retVal  = retVal | 0x10;
 8001ae8:	7dfb      	ldrb	r3, [r7, #23]
 8001aea:	f043 0310 	orr.w	r3, r3, #16
 8001aee:	75fb      	strb	r3, [r7, #23]
	}

	// Check BME280_0
	if(readBME280_id_reg(hi2c1, 0) != 0x60) {			// Expected 0x60
 8001af0:	2100      	movs	r1, #0
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7fe fe1a 	bl	800072c <readBME280_id_reg>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b60      	cmp	r3, #96	; 0x60
 8001afc:	d003      	beq.n	8001b06 <systemStatus+0x3e>
		retVal  = retVal | 0x08;
 8001afe:	7dfb      	ldrb	r3, [r7, #23]
 8001b00:	f043 0308 	orr.w	r3, r3, #8
 8001b04:	75fb      	strb	r3, [r7, #23]
	}

	// Check Accelerometer
	if(readAccel_whoami(hi2c2) != 0xE5) {				// Expected 0xE5
 8001b06:	6838      	ldr	r0, [r7, #0]
 8001b08:	f7fe fd52 	bl	80005b0 <readAccel_whoami>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2be5      	cmp	r3, #229	; 0xe5
 8001b10:	d003      	beq.n	8001b1a <systemStatus+0x52>
		retVal  = retVal | 0x04;
 8001b12:	7dfb      	ldrb	r3, [r7, #23]
 8001b14:	f043 0304 	orr.w	r3, r3, #4
 8001b18:	75fb      	strb	r3, [r7, #23]
	}

	// Check SPIFlash_1
	uint8_t manu[2] = {0, 0};
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	82bb      	strh	r3, [r7, #20]
	read_manufacturer_id(manu, hspi2, cs_spi2);
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <systemStatus+0x9c>)
 8001b20:	f107 0014 	add.w	r0, r7, #20
 8001b24:	cb0c      	ldmia	r3, {r2, r3}
 8001b26:	68b9      	ldr	r1, [r7, #8]
 8001b28:	f7ff f804 	bl	8000b34 <read_manufacturer_id>
	if(manu[0] != 0xEF) {								// Expected 0xEF
 8001b2c:	7d3b      	ldrb	r3, [r7, #20]
 8001b2e:	2bef      	cmp	r3, #239	; 0xef
 8001b30:	d003      	beq.n	8001b3a <systemStatus+0x72>
		retVal  = retVal | 0x02;
 8001b32:	7dfb      	ldrb	r3, [r7, #23]
 8001b34:	f043 0302 	orr.w	r3, r3, #2
 8001b38:	75fb      	strb	r3, [r7, #23]
	}

	// Check SPIFlash_0
	uint8_t manu0[2] = {0, 0};
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	823b      	strh	r3, [r7, #16]
	read_manufacturer_id(manu0, hspi1, cs_spi1);
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <systemStatus+0xa0>)
 8001b40:	f107 0010 	add.w	r0, r7, #16
 8001b44:	cb0c      	ldmia	r3, {r2, r3}
 8001b46:	68f9      	ldr	r1, [r7, #12]
 8001b48:	f7fe fff4 	bl	8000b34 <read_manufacturer_id>
	if(manu0[0] != 0xEF) {								// Expected 0xEF
 8001b4c:	7c3b      	ldrb	r3, [r7, #16]
 8001b4e:	2bef      	cmp	r3, #239	; 0xef
 8001b50:	d003      	beq.n	8001b5a <systemStatus+0x92>
		retVal  = retVal | 0x01;
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	75fb      	strb	r3, [r7, #23]
	}
	return retVal;
 8001b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200005d4 	.word	0x200005d4
 8001b68:	200005c4 	.word	0x200005c4

08001b6c <heartbeatUART>:

void heartbeatUART(UART_HandleTypeDef *huart) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	send_uart_hex(huart, 0x51);			// Transmit the heartbeat as device ID (0x51 = Q)
 8001b74:	2151      	movs	r1, #81	; 0x51
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 ffe1 	bl	8002b3e <send_uart_hex>
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <eraseFlashSPI>:

/***************************************************************************************************************
 * SPI Flash Functions
 */
void eraseFlashSPI(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	4639      	mov	r1, r7
 8001b90:	e881 000c 	stmia.w	r1, {r2, r3}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);		// Activate the "write out" LED
 8001b94:	2201      	movs	r2, #1
 8001b96:	2180      	movs	r1, #128	; 0x80
 8001b98:	4813      	ldr	r0, [pc, #76]	; (8001be8 <eraseFlashSPI+0x64>)
 8001b9a:	f002 f879 	bl	8003c90 <HAL_GPIO_WritePin>
	if (erase_chip_spi(hspi, config) == HAL_OK) {
 8001b9e:	463b      	mov	r3, r7
 8001ba0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f7fe fe79 	bl	800089c <erase_chip_spi>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10d      	bne.n	8001bcc <eraseFlashSPI+0x48>
		send_uart_string(huart, "Successful Chip Erase\r\n");
 8001bb0:	490e      	ldr	r1, [pc, #56]	; (8001bec <eraseFlashSPI+0x68>)
 8001bb2:	68b8      	ldr	r0, [r7, #8]
 8001bb4:	f000 ffaf 	bl	8002b16 <send_uart_string>
		next_blank_page = find_next_blank_page(hspi, &end_of_flash, config);
 8001bb8:	463b      	mov	r3, r7
 8001bba:	cb0c      	ldmia	r3, {r2, r3}
 8001bbc:	490c      	ldr	r1, [pc, #48]	; (8001bf0 <eraseFlashSPI+0x6c>)
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f7fe fefa 	bl	80009b8 <find_next_blank_page>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <eraseFlashSPI+0x70>)
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e003      	b.n	8001bd4 <eraseFlashSPI+0x50>
	} else {
		send_uart_string(huart, "Error during chip erase. Please check the connection and try again.\r\n");
 8001bcc:	490a      	ldr	r1, [pc, #40]	; (8001bf8 <eraseFlashSPI+0x74>)
 8001bce:	68b8      	ldr	r0, [r7, #8]
 8001bd0:	f000 ffa1 	bl	8002b16 <send_uart_string>
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2180      	movs	r1, #128	; 0x80
 8001bd8:	4803      	ldr	r0, [pc, #12]	; (8001be8 <eraseFlashSPI+0x64>)
 8001bda:	f002 f859 	bl	8003c90 <HAL_GPIO_WritePin>
}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40020400 	.word	0x40020400
 8001bec:	080085c8 	.word	0x080085c8
 8001bf0:	200005b2 	.word	0x200005b2
 8001bf4:	200005ac 	.word	0x200005ac
 8001bf8:	080085e0 	.word	0x080085e0

08001bfc <readFlashToUART>:

void readFlashToUART(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b0cb      	sub	sp, #300	; 0x12c
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8001c06:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8001c0a:	6020      	str	r0, [r4, #0]
 8001c0c:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8001c10:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8001c14:	6001      	str	r1, [r0, #0]
 8001c16:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8001c1a:	f5a1 7190 	sub.w	r1, r1, #288	; 0x120
 8001c1e:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t num_of_pages = next_blank_page;
 8001c22:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <readFlashToUART+0xd0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	if(num_of_pages == 0) {
 8001c2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d103      	bne.n	8001c3a <readFlashToUART+0x3e>
		num_of_pages = PAGE_SIZE;
 8001c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c36:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	}
	num_of_pages = num_of_pages/PAGE_SIZE;
 8001c3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001c3e:	0a1b      	lsrs	r3, r3, #8
 8001c40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	uint32_t address = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);		// Activate the "write out" LED
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	2180      	movs	r1, #128	; 0x80
 8001c4e:	4820      	ldr	r0, [pc, #128]	; (8001cd0 <readFlashToUART+0xd4>)
 8001c50:	f002 f81e 	bl	8003c90 <HAL_GPIO_WritePin>

	for (int i = 0; i < (num_of_pages); i++) {
 8001c54:	2300      	movs	r3, #0
 8001c56:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001c5a:	e026      	b.n	8001caa <readFlashToUART+0xae>
		uint8_t page[PAGE_SIZE];
		read_page_spi(page, hspi, address, config);
 8001c5c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001c60:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c64:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001c68:	f5a2 718a 	sub.w	r1, r2, #276	; 0x114
 8001c6c:	f107 0014 	add.w	r0, r7, #20
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	9200      	str	r2, [sp, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c7a:	6809      	ldr	r1, [r1, #0]
 8001c7c:	f7fe ff34 	bl	8000ae8 <read_page_spi>
		uart_transmit_page(huart, page);						// Transmit the data//
 8001c80:	f107 0214 	add.w	r2, r7, #20
 8001c84:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001c88:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	f000 ff30 	bl	8002af4 <uart_transmit_page>
		address += PAGE_SIZE;
 8001c94:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001c98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001c9c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	for (int i = 0; i < (num_of_pages); i++) {
 8001ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001cae:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d8d2      	bhi.n	8001c5c <readFlashToUART+0x60>
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);	// Deactivate the "write out" LED
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2180      	movs	r1, #128	; 0x80
 8001cba:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <readFlashToUART+0xd4>)
 8001cbc:	f001 ffe8 	bl	8003c90 <HAL_GPIO_WritePin>
}
 8001cc0:	bf00      	nop
 8001cc2:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd90      	pop	{r4, r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	200005ac 	.word	0x200005ac
 8001cd0:	40020400 	.word	0x40020400

08001cd4 <readFlashManuSPI>:

void readFlashManuSPI(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	4639      	mov	r1, r7
 8001ce0:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t manu[2] = {0, 0};
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	82bb      	strh	r3, [r7, #20]
	read_manufacturer_id(manu, hspi, config);
 8001ce8:	f107 0014 	add.w	r0, r7, #20
 8001cec:	463b      	mov	r3, r7
 8001cee:	cb0c      	ldmia	r3, {r2, r3}
 8001cf0:	68f9      	ldr	r1, [r7, #12]
 8001cf2:	f7fe ff1f 	bl	8000b34 <read_manufacturer_id>
	send_uart_hex(huart, manu[0]);
 8001cf6:	7d3b      	ldrb	r3, [r7, #20]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	68b8      	ldr	r0, [r7, #8]
 8001cfc:	f000 ff1f 	bl	8002b3e <send_uart_hex>
	send_uart_hex(huart, manu[1]);
 8001d00:	7d7b      	ldrb	r3, [r7, #21]
 8001d02:	4619      	mov	r1, r3
 8001d04:	68b8      	ldr	r0, [r7, #8]
 8001d06:	f000 ff1a 	bl	8002b3e <send_uart_hex>
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <writePageSPI_W>:

void writePageSPI_W(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b0c9      	sub	sp, #292	; 0x124
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8001d1e:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 8001d22:	6020      	str	r0, [r4, #0]
 8001d24:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8001d28:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 8001d2c:	6001      	str	r1, [r0, #0]
 8001d2e:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001d32:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 8001d36:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t data_out[PAGE_SIZE];
	for (int i = 0; i < PAGE_SIZE; i++) {
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001d40:	e00d      	b.n	8001d5e <writePageSPI_W+0x4a>
		data_out[i] = 0x77;		// Make all data in the page 'w'
 8001d42:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d46:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8001d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d4e:	4413      	add	r3, r2
 8001d50:	2277      	movs	r2, #119	; 0x77
 8001d52:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < PAGE_SIZE; i++) {
 8001d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d58:	3301      	adds	r3, #1
 8001d5a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d62:	2bff      	cmp	r3, #255	; 0xff
 8001d64:	dded      	ble.n	8001d42 <writePageSPI_W+0x2e>
	}
	write_data_spi_dma(data_out, hspi, next_blank_page, config);
 8001d66:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <writePageSPI_W+0xa0>)
 8001d68:	681c      	ldr	r4, [r3, #0]
 8001d6a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d6e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d72:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001d76:	f5a2 7186 	sub.w	r1, r2, #268	; 0x10c
 8001d7a:	f107 0014 	add.w	r0, r7, #20
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	9200      	str	r2, [sp, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4622      	mov	r2, r4
 8001d86:	6809      	ldr	r1, [r1, #0]
 8001d88:	f7fe fde8 	bl	800095c <write_data_spi_dma>
	next_blank_page += PAGE_SIZE;
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <writePageSPI_W+0xa0>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001d94:	4a07      	ldr	r2, [pc, #28]	; (8001db4 <writePageSPI_W+0xa0>)
 8001d96:	6013      	str	r3, [r2, #0]

	send_uart_string(huart, "Successful Page Written\r\n");
 8001d98:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001da0:	4905      	ldr	r1, [pc, #20]	; (8001db8 <writePageSPI_W+0xa4>)
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	f000 feb7 	bl	8002b16 <send_uart_string>
}
 8001da8:	bf00      	nop
 8001daa:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd90      	pop	{r4, r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200005ac 	.word	0x200005ac
 8001db8:	08008628 	.word	0x08008628

08001dbc <resetSPIFlash>:

void resetSPIFlash(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, GPIO_Config config) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	4639      	mov	r1, r7
 8001dc8:	e881 000c 	stmia.w	r1, {r2, r3}
	software_reset(hspi, config);
 8001dcc:	463b      	mov	r3, r7
 8001dce:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f7fe fd9e 	bl	8000914 <software_reset>
	send_uart_string(huart, "Flash Chip Reset\r\n");
 8001dd8:	4903      	ldr	r1, [pc, #12]	; (8001de8 <resetSPIFlash+0x2c>)
 8001dda:	68b8      	ldr	r0, [r7, #8]
 8001ddc:	f000 fe9b 	bl	8002b16 <send_uart_string>
}
 8001de0:	bf00      	nop
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	08008644 	.word	0x08008644

08001dec <checkAccelWhoAmI>:

/***************************************************************************************************************
 * I2C Accelerometer Functions
 */
void checkAccelWhoAmI(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart) {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
	uint8_t whoami = readAccel_whoami(hi2c);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7fe fbda 	bl	80005b0 <readAccel_whoami>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	73fb      	strb	r3, [r7, #15]
	send_uart_hex(huart, whoami);
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	4619      	mov	r1, r3
 8001e04:	6838      	ldr	r0, [r7, #0]
 8001e06:	f000 fe9a 	bl	8002b3e <send_uart_hex>
}
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <accelToUART>:

void accelToUART(UART_HandleTypeDef *huart) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 6; i++) {
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	e00a      	b.n	8001e38 <accelToUART+0x24>
		send_uart_hex(huart, accel_data[i]);
 8001e22:	4a09      	ldr	r2, [pc, #36]	; (8001e48 <accelToUART+0x34>)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4413      	add	r3, r2
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 fe86 	bl	8002b3e <send_uart_hex>
	for (int i = 0; i < 6; i++) {
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	3301      	adds	r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b05      	cmp	r3, #5
 8001e3c:	ddf1      	ble.n	8001e22 <accelToUART+0xe>
	}
}
 8001e3e:	bf00      	nop
 8001e40:	bf00      	nop
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000594 	.word	0x20000594

08001e4c <readTempSensorID>:

/***************************************************************************************************************
 * I2C BME280 Sensor Functions
 */
void readTempSensorID(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart, uint8_t tempNo) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	4613      	mov	r3, r2
 8001e58:	71fb      	strb	r3, [r7, #7]
	send_uart_hex(huart, readBME280_id_reg(hi2c, tempNo));
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7fe fc64 	bl	800072c <readBME280_id_reg>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4619      	mov	r1, r3
 8001e68:	68b8      	ldr	r0, [r7, #8]
 8001e6a:	f000 fe68 	bl	8002b3e <send_uart_hex>
}
 8001e6e:	bf00      	nop
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <readTempCalibration>:

void readTempCalibration(I2C_HandleTypeDef* hi2c, UART_HandleTypeDef *huart, uint8_t tempNo) {
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b090      	sub	sp, #64	; 0x40
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	60f8      	str	r0, [r7, #12]
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	4613      	mov	r3, r2
 8001e82:	71fb      	strb	r3, [r7, #7]
	uint8_t calibration1[25];
	uint8_t calibration2[7];

	for (uint8_t i = 0; i < CALIB_CNT_1; i++) {
 8001e84:	2300      	movs	r3, #0
 8001e86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001e8a:	e016      	b.n	8001eba <readTempCalibration+0x44>
		calibration1[i] = 0x00;
 8001e8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e90:	3340      	adds	r3, #64	; 0x40
 8001e92:	443b      	add	r3, r7
 8001e94:	2200      	movs	r2, #0
 8001e96:	f803 2c28 	strb.w	r2, [r3, #-40]
		if (i < CALIB_CNT_2) {
 8001e9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e9e:	2b06      	cmp	r3, #6
 8001ea0:	d806      	bhi.n	8001eb0 <readTempCalibration+0x3a>
			calibration2[i] = 0x00;
 8001ea2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ea6:	3340      	adds	r3, #64	; 0x40
 8001ea8:	443b      	add	r3, r7
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (uint8_t i = 0; i < CALIB_CNT_1; i++) {
 8001eb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001eba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ebe:	2b18      	cmp	r3, #24
 8001ec0:	d9e4      	bls.n	8001e8c <readTempCalibration+0x16>
		}
	}

	readBME280_calib(hi2c, tempNo, calibration1, calibration2);
 8001ec2:	f107 0310 	add.w	r3, r7, #16
 8001ec6:	f107 0218 	add.w	r2, r7, #24
 8001eca:	79f9      	ldrb	r1, [r7, #7]
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f7fe fc49 	bl	8000764 <readBME280_calib>

	for (int i = 0; i < 25; i++) {
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ed6:	e00b      	b.n	8001ef0 <readTempCalibration+0x7a>
	  send_uart_hex(huart, calibration1[i]);
 8001ed8:	f107 0218 	add.w	r2, r7, #24
 8001edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ede:	4413      	add	r3, r2
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	68b8      	ldr	r0, [r7, #8]
 8001ee6:	f000 fe2a 	bl	8002b3e <send_uart_hex>
	for (int i = 0; i < 25; i++) {
 8001eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eec:	3301      	adds	r3, #1
 8001eee:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef2:	2b18      	cmp	r3, #24
 8001ef4:	ddf0      	ble.n	8001ed8 <readTempCalibration+0x62>
	}

	for (int i = 0; i < 7; i++) {
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8001efa:	e00b      	b.n	8001f14 <readTempCalibration+0x9e>
	  send_uart_hex(huart, calibration2[i]);
 8001efc:	f107 0210 	add.w	r2, r7, #16
 8001f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f02:	4413      	add	r3, r2
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	4619      	mov	r1, r3
 8001f08:	68b8      	ldr	r0, [r7, #8]
 8001f0a:	f000 fe18 	bl	8002b3e <send_uart_hex>
	for (int i = 0; i < 7; i++) {
 8001f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f10:	3301      	adds	r3, #1
 8001f12:	637b      	str	r3, [r7, #52]	; 0x34
 8001f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f16:	2b06      	cmp	r3, #6
 8001f18:	ddf0      	ble.n	8001efc <readTempCalibration+0x86>
	}
}
 8001f1a:	bf00      	nop
 8001f1c:	bf00      	nop
 8001f1e:	3740      	adds	r7, #64	; 0x40
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <readTempSensor>:

void readTempSensor(UART_HandleTypeDef *huart, uint8_t tempNo) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	70fb      	strb	r3, [r7, #3]
	if (tempNo == 0) {
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d111      	bne.n	8001f5a <readTempSensor+0x36>
		for (int i = 0; i < 6; i++) {
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	e00a      	b.n	8001f52 <readTempSensor+0x2e>
			send_uart_hex(huart, bme280_data_0[i]);
 8001f3c:	4a13      	ldr	r2, [pc, #76]	; (8001f8c <readTempSensor+0x68>)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4413      	add	r3, r2
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	4619      	mov	r1, r3
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 fdf9 	bl	8002b3e <send_uart_hex>
		for (int i = 0; i < 6; i++) {
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2b05      	cmp	r3, #5
 8001f56:	ddf1      	ble.n	8001f3c <readTempSensor+0x18>
	} else if (tempNo == 1) {
		for (int i = 0; i < 6; i++) {
			send_uart_hex(huart, bme280_data_1[i]);
		}
	}
}
 8001f58:	e013      	b.n	8001f82 <readTempSensor+0x5e>
	} else if (tempNo == 1) {
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d110      	bne.n	8001f82 <readTempSensor+0x5e>
		for (int i = 0; i < 6; i++) {
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	e00a      	b.n	8001f7c <readTempSensor+0x58>
			send_uart_hex(huart, bme280_data_1[i]);
 8001f66:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <readTempSensor+0x6c>)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 fde4 	bl	8002b3e <send_uart_hex>
		for (int i = 0; i < 6; i++) {
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2b05      	cmp	r3, #5
 8001f80:	ddf1      	ble.n	8001f66 <readTempSensor+0x42>
}
 8001f82:	bf00      	nop
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	2000059c 	.word	0x2000059c
 8001f90:	200005a4 	.word	0x200005a4

08001f94 <readAllSensors>:

/***************************************************************************************************************
 * Process All Sensors
 */
void readAllSensors(I2C_HandleTypeDef* hi2c_accel, I2C_HandleTypeDef* hi2c_temp, RTC_HandleTypeDef* hrtc) {
 8001f94:	b5b0      	push	{r4, r5, r7, lr}
 8001f96:	b08a      	sub	sp, #40	; 0x28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
	// Read Accelerometer Data
	readAccelerometer(accel_data, hi2c_accel);
 8001fa0:	68f9      	ldr	r1, [r7, #12]
 8001fa2:	4869      	ldr	r0, [pc, #420]	; (8002148 <readAllSensors+0x1b4>)
 8001fa4:	f7fe fade 	bl	8000564 <readAccelerometer>

	// Read BME280 Data
	readTempHumPres(bme280_data_0, hi2c_temp, 0);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	68b9      	ldr	r1, [r7, #8]
 8001fac:	4867      	ldr	r0, [pc, #412]	; (800214c <readAllSensors+0x1b8>)
 8001fae:	f7fe fb63 	bl	8000678 <readTempHumPres>
	readTempHumPres(bme280_data_1, hi2c_temp, 1);
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	4866      	ldr	r0, [pc, #408]	; (8002150 <readAllSensors+0x1bc>)
 8001fb8:	f7fe fb5e 	bl	8000678 <readTempHumPres>

	uint16_t time = getTimestampMilliseconds(hrtc);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f8e9 	bl	8002194 <getTimestampMilliseconds>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	82fb      	strh	r3, [r7, #22]
	uint8_t array_ptr = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// Store the new read in the buffer if there is space
	if (byte_tracker < (PAGE_SIZE - READ_SIZE)) {
 8001fcc:	4b61      	ldr	r3, [pc, #388]	; (8002154 <readAllSensors+0x1c0>)
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	2bea      	cmp	r3, #234	; 0xea
 8001fd2:	f200 80b4 	bhi.w	800213e <readAllSensors+0x1aa>
		// Store the timestamp in the buffer (Big Endian)
		data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = (uint8_t) (time & 0xFF); 		// Least significant byte (LSB)
 8001fd6:	4b60      	ldr	r3, [pc, #384]	; (8002158 <readAllSensors+0x1c4>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4b5d      	ldr	r3, [pc, #372]	; (8002154 <readAllSensors+0x1c0>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fe6:	440b      	add	r3, r1
 8001fe8:	8af9      	ldrh	r1, [r7, #22]
 8001fea:	b2c8      	uxtb	r0, r1
 8001fec:	495b      	ldr	r1, [pc, #364]	; (800215c <readAllSensors+0x1c8>)
 8001fee:	0212      	lsls	r2, r2, #8
 8001ff0:	440a      	add	r2, r1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	701a      	strb	r2, [r3, #0]
		array_ptr += 1;
 8001ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = (uint8_t) ((time >> 8) & 0xFF); // Most significant byte (MSB)
 8002002:	8afb      	ldrh	r3, [r7, #22]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	b299      	uxth	r1, r3
 8002008:	4b53      	ldr	r3, [pc, #332]	; (8002158 <readAllSensors+0x1c4>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	461a      	mov	r2, r3
 800200e:	4b51      	ldr	r3, [pc, #324]	; (8002154 <readAllSensors+0x1c0>)
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002018:	4403      	add	r3, r0
 800201a:	b2c8      	uxtb	r0, r1
 800201c:	494f      	ldr	r1, [pc, #316]	; (800215c <readAllSensors+0x1c8>)
 800201e:	0212      	lsls	r2, r2, #8
 8002020:	440a      	add	r2, r1
 8002022:	4413      	add	r3, r2
 8002024:	4602      	mov	r2, r0
 8002026:	701a      	strb	r2, [r3, #0]
		array_ptr += 1;
 8002028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800202c:	3301      	adds	r3, #1
 800202e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		// Store the accelerometer data
		for (int i = 0; i < 6; i++) {
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
 8002036:	e01a      	b.n	800206e <readAllSensors+0xda>
		  data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = accel_data[i];
 8002038:	4b47      	ldr	r3, [pc, #284]	; (8002158 <readAllSensors+0x1c4>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	461c      	mov	r4, r3
 800203e:	4b45      	ldr	r3, [pc, #276]	; (8002154 <readAllSensors+0x1c0>)
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002048:	4413      	add	r3, r2
 800204a:	493f      	ldr	r1, [pc, #252]	; (8002148 <readAllSensors+0x1b4>)
 800204c:	6a3a      	ldr	r2, [r7, #32]
 800204e:	440a      	add	r2, r1
 8002050:	7810      	ldrb	r0, [r2, #0]
 8002052:	4942      	ldr	r1, [pc, #264]	; (800215c <readAllSensors+0x1c8>)
 8002054:	0222      	lsls	r2, r4, #8
 8002056:	440a      	add	r2, r1
 8002058:	4413      	add	r3, r2
 800205a:	4602      	mov	r2, r0
 800205c:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 800205e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002062:	3301      	adds	r3, #1
 8002064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 8002068:	6a3b      	ldr	r3, [r7, #32]
 800206a:	3301      	adds	r3, #1
 800206c:	623b      	str	r3, [r7, #32]
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	2b05      	cmp	r3, #5
 8002072:	dde1      	ble.n	8002038 <readAllSensors+0xa4>
		}

		// Store the BME280_0 Data
		for (int i = 0; i < 6; i++) {
 8002074:	2300      	movs	r3, #0
 8002076:	61fb      	str	r3, [r7, #28]
 8002078:	e01a      	b.n	80020b0 <readAllSensors+0x11c>
		  data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = bme280_data_0[i];
 800207a:	4b37      	ldr	r3, [pc, #220]	; (8002158 <readAllSensors+0x1c4>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	461c      	mov	r4, r3
 8002080:	4b34      	ldr	r3, [pc, #208]	; (8002154 <readAllSensors+0x1c0>)
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800208a:	4413      	add	r3, r2
 800208c:	492f      	ldr	r1, [pc, #188]	; (800214c <readAllSensors+0x1b8>)
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	440a      	add	r2, r1
 8002092:	7810      	ldrb	r0, [r2, #0]
 8002094:	4931      	ldr	r1, [pc, #196]	; (800215c <readAllSensors+0x1c8>)
 8002096:	0222      	lsls	r2, r4, #8
 8002098:	440a      	add	r2, r1
 800209a:	4413      	add	r3, r2
 800209c:	4602      	mov	r2, r0
 800209e:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 80020a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020a4:	3301      	adds	r3, #1
 80020a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3301      	adds	r3, #1
 80020ae:	61fb      	str	r3, [r7, #28]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	2b05      	cmp	r3, #5
 80020b4:	dde1      	ble.n	800207a <readAllSensors+0xe6>
		}

		// Store the BME280_1 Data
		for (int i = 0; i < 6; i++) {
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	e01a      	b.n	80020f2 <readAllSensors+0x15e>
		  data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = bme280_data_1[i];
 80020bc:	4b26      	ldr	r3, [pc, #152]	; (8002158 <readAllSensors+0x1c4>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	461c      	mov	r4, r3
 80020c2:	4b24      	ldr	r3, [pc, #144]	; (8002154 <readAllSensors+0x1c0>)
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020cc:	4413      	add	r3, r2
 80020ce:	4920      	ldr	r1, [pc, #128]	; (8002150 <readAllSensors+0x1bc>)
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	440a      	add	r2, r1
 80020d4:	7810      	ldrb	r0, [r2, #0]
 80020d6:	4921      	ldr	r1, [pc, #132]	; (800215c <readAllSensors+0x1c8>)
 80020d8:	0222      	lsls	r2, r4, #8
 80020da:	440a      	add	r2, r1
 80020dc:	4413      	add	r3, r2
 80020de:	4602      	mov	r2, r0
 80020e0:	701a      	strb	r2, [r3, #0]
		  array_ptr += 1;
 80020e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020e6:	3301      	adds	r3, #1
 80020e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for (int i = 0; i < 6; i++) {
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	3301      	adds	r3, #1
 80020f0:	61bb      	str	r3, [r7, #24]
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	2b05      	cmp	r3, #5
 80020f6:	dde1      	ble.n	80020bc <readAllSensors+0x128>
		}

		// Store the flight state and peripheral status in the final byte
		data_buffer_tx[buffer_tracker][byte_tracker + array_ptr] = combine_system_status();
 80020f8:	4b17      	ldr	r3, [pc, #92]	; (8002158 <readAllSensors+0x1c4>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	461d      	mov	r5, r3
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <readAllSensors+0x1c0>)
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002108:	18d4      	adds	r4, r2, r3
 800210a:	f7ff fcad 	bl	8001a68 <combine_system_status>
 800210e:	4603      	mov	r3, r0
 8002110:	4619      	mov	r1, r3
 8002112:	4a12      	ldr	r2, [pc, #72]	; (800215c <readAllSensors+0x1c8>)
 8002114:	022b      	lsls	r3, r5, #8
 8002116:	4413      	add	r3, r2
 8002118:	4423      	add	r3, r4
 800211a:	460a      	mov	r2, r1
 800211c:	701a      	strb	r2, [r3, #0]
		array_ptr += 1;
 800211e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002122:	3301      	adds	r3, #1
 8002124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		byte_tracker = byte_tracker + (array_ptr - 1);
 8002128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800212c:	b29a      	uxth	r2, r3
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <readAllSensors+0x1c0>)
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	4413      	add	r3, r2
 8002134:	b29b      	uxth	r3, r3
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <readAllSensors+0x1c0>)
 800213c:	801a      	strh	r2, [r3, #0]
	}
}
 800213e:	bf00      	nop
 8002140:	3728      	adds	r7, #40	; 0x28
 8002142:	46bd      	mov	sp, r7
 8002144:	bdb0      	pop	{r4, r5, r7, pc}
 8002146:	bf00      	nop
 8002148:	20000594 	.word	0x20000594
 800214c:	2000059c 	.word	0x2000059c
 8002150:	200005a4 	.word	0x200005a4
 8002154:	200005b0 	.word	0x200005b0
 8002158:	20000590 	.word	0x20000590
 800215c:	20000390 	.word	0x20000390

08002160 <initialise_rtc_default>:
    .Month = RTC_MONTH_JANUARY, // Set default month (e.g., January)
    .Date = 1, // Set default day of the month
    .Year = 24 // Set default year (e.g., 2021)
};

void initialise_rtc_default(RTC_HandleTypeDef* hrtc) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
	// Reset RTC on boot
	HAL_RTC_MspInit(hrtc); // Initialize RTC hardware
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 fa31 	bl	80025d0 <HAL_RTC_MspInit>
	HAL_RTC_SetTime(hrtc, &defaultTime, RTC_FORMAT_BIN); // Set default time
 800216e:	2200      	movs	r2, #0
 8002170:	4906      	ldr	r1, [pc, #24]	; (800218c <initialise_rtc_default+0x2c>)
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f003 fcd1 	bl	8005b1a <HAL_RTC_SetTime>
	HAL_RTC_SetDate(hrtc, &defaultDate, RTC_FORMAT_BIN); // Set default date
 8002178:	2200      	movs	r2, #0
 800217a:	4905      	ldr	r1, [pc, #20]	; (8002190 <initialise_rtc_default+0x30>)
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f003 fdc4 	bl	8005d0a <HAL_RTC_SetDate>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200005f0 	.word	0x200005f0
 8002190:	20000018 	.word	0x20000018

08002194 <getTimestampMilliseconds>:

uint32_t getTimestampMilliseconds(RTC_HandleTypeDef* hrtc) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b08c      	sub	sp, #48	; 0x30
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef rtcTime;
    RTC_DateTypeDef rtcDate;

    // Read RTC time and date
    HAL_RTC_GetTime(hrtc, &rtcTime, RTC_FORMAT_BIN);
 800219c:	f107 0310 	add.w	r3, r7, #16
 80021a0:	2200      	movs	r2, #0
 80021a2:	4619      	mov	r1, r3
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f003 fd52 	bl	8005c4e <HAL_RTC_GetTime>
    HAL_RTC_GetDate(hrtc, &rtcDate, RTC_FORMAT_BIN);
 80021aa:	f107 030c 	add.w	r3, r7, #12
 80021ae:	2200      	movs	r2, #0
 80021b0:	4619      	mov	r1, r3
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f003 fe2d 	bl	8005e12 <HAL_RTC_GetDate>

    // Calculate timestamp in milliseconds
    uint32_t timestampSeconds = rtcTime.Seconds + rtcTime.Minutes * 60 + rtcTime.Hours * 3600;
 80021b8:	7cbb      	ldrb	r3, [r7, #18]
 80021ba:	4619      	mov	r1, r3
 80021bc:	7c7b      	ldrb	r3, [r7, #17]
 80021be:	461a      	mov	r2, r3
 80021c0:	4613      	mov	r3, r2
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	18ca      	adds	r2, r1, r3
 80021ca:	7c3b      	ldrb	r3, [r7, #16]
 80021cc:	4619      	mov	r1, r3
 80021ce:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	4413      	add	r3, r2
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t timestampMilliseconds = timestampSeconds * 1000;
 80021da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021e0:	fb02 f303 	mul.w	r3, r2, r3
 80021e4:	62bb      	str	r3, [r7, #40]	; 0x28
    float subsecondsFraction = (float)(rtcTime.SecondFraction - rtcTime.SubSeconds) / (rtcTime.SecondFraction + 1);
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	ee07 3a90 	vmov	s15, r3
 80021f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	3301      	adds	r3, #1
 80021f8:	ee07 3a90 	vmov	s15, r3
 80021fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002204:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    timestampMilliseconds += subsecondsFraction * 1000;
 8002208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220a:	ee07 3a90 	vmov	s15, r3
 800220e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002212:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002216:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002238 <getTimestampMilliseconds+0xa4>
 800221a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800221e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002226:	ee17 3a90 	vmov	r3, s15
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28

    return timestampMilliseconds;
 800222c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800222e:	4618      	mov	r0, r3
 8002230:	3730      	adds	r7, #48	; 0x30
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	447a0000 	.word	0x447a0000

0800223c <spi_sendOp_readByte>:
#ifndef SRC_SPI_DRIVER_C_
#define SRC_SPI_DRIVER_C_

#include "spi_driver.h"

HAL_StatusTypeDef spi_sendOp_readByte(uint8_t* opcode, SPI_HandleTypeDef *hspi, uint8_t* data_ptr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
 8002248:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 800224a:	8c3b      	ldrh	r3, [r7, #32]
 800224c:	2200      	movs	r2, #0
 800224e:	4619      	mov	r1, r3
 8002250:	6838      	ldr	r0, [r7, #0]
 8002252:	f001 fd1d 	bl	8003c90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);			// Write the write enable value to the Flash to initial reading
 8002256:	2302      	movs	r3, #2
 8002258:	2201      	movs	r2, #1
 800225a:	68f9      	ldr	r1, [r7, #12]
 800225c:	68b8      	ldr	r0, [r7, #8]
 800225e:	f003 ff6e 	bl	800613e <HAL_SPI_Transmit>
	status = HAL_SPI_Receive(hspi, data_ptr, 1, TIMEOUT_SML);
 8002262:	2302      	movs	r3, #2
 8002264:	2201      	movs	r2, #1
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	68b8      	ldr	r0, [r7, #8]
 800226a:	f004 f8ab 	bl	80063c4 <HAL_SPI_Receive>
 800226e:	4603      	mov	r3, r0
 8002270:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 8002272:	8c3b      	ldrh	r3, [r7, #32]
 8002274:	2201      	movs	r2, #1
 8002276:	4619      	mov	r1, r3
 8002278:	6838      	ldr	r0, [r7, #0]
 800227a:	f001 fd09 	bl	8003c90 <HAL_GPIO_WritePin>
	return status;
 800227e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <perform_operation>:

HAL_StatusTypeDef perform_operation(uint8_t* opcode, SPI_HandleTypeDef *hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);				// Set the chip select pin to low to initiate SPI comms
 8002296:	887b      	ldrh	r3, [r7, #2]
 8002298:	2200      	movs	r2, #0
 800229a:	4619      	mov	r1, r3
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f001 fcf7 	bl	8003c90 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);				// Write the opcode value
 80022a2:	2302      	movs	r3, #2
 80022a4:	2201      	movs	r2, #1
 80022a6:	68f9      	ldr	r1, [r7, #12]
 80022a8:	68b8      	ldr	r0, [r7, #8]
 80022aa:	f003 ff48 	bl	800613e <HAL_SPI_Transmit>
 80022ae:	4603      	mov	r3, r0
 80022b0:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 80022b2:	887b      	ldrh	r3, [r7, #2]
 80022b4:	2201      	movs	r2, #1
 80022b6:	4619      	mov	r1, r3
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f001 fce9 	bl	8003c90 <HAL_GPIO_WritePin>

	return status;
 80022be:	7dfb      	ldrb	r3, [r7, #23]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <spi_read_data>:

HAL_StatusTypeDef spi_read_data(uint8_t* opcode, uint16_t data_size, uint8_t data_read[data_size], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	603b      	str	r3, [r7, #0]
 80022d4:	460b      	mov	r3, r1
 80022d6:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef status;

	// Split the 24 bit address into three 8 bit ints
	uint8_t addrL = addr & 0xFF;  // Get the low byte
 80022d8:	6a3b      	ldr	r3, [r7, #32]
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	75bb      	strb	r3, [r7, #22]
	uint8_t addrM = (addr >> 8) & 0xFF;  // Get the middle byte
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	0a1b      	lsrs	r3, r3, #8
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	757b      	strb	r3, [r7, #21]
	uint8_t addrH = (addr >> 16) & 0xFF;  // Get the high byte
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	0c1b      	lsrs	r3, r3, #16
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	753b      	strb	r3, [r7, #20]

	// Read the data denoted by the given address
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);
 80022ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022f0:	2200      	movs	r2, #0
 80022f2:	4619      	mov	r1, r3
 80022f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022f6:	f001 fccb 	bl	8003c90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);	// Write the read enable value
 80022fa:	2302      	movs	r3, #2
 80022fc:	2201      	movs	r2, #1
 80022fe:	68f9      	ldr	r1, [r7, #12]
 8002300:	6838      	ldr	r0, [r7, #0]
 8002302:	f003 ff1c 	bl	800613e <HAL_SPI_Transmit>

	// Transmit the 24 bit address of the page to initialise read from
	HAL_SPI_Transmit(hspi, &addrH, 1, TIMEOUT_SML);
 8002306:	f107 0114 	add.w	r1, r7, #20
 800230a:	2302      	movs	r3, #2
 800230c:	2201      	movs	r2, #1
 800230e:	6838      	ldr	r0, [r7, #0]
 8002310:	f003 ff15 	bl	800613e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrM, 1, TIMEOUT_SML);
 8002314:	f107 0115 	add.w	r1, r7, #21
 8002318:	2302      	movs	r3, #2
 800231a:	2201      	movs	r2, #1
 800231c:	6838      	ldr	r0, [r7, #0]
 800231e:	f003 ff0e 	bl	800613e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &addrL, 1, TIMEOUT_SML);
 8002322:	f107 0116 	add.w	r1, r7, #22
 8002326:	2302      	movs	r3, #2
 8002328:	2201      	movs	r2, #1
 800232a:	6838      	ldr	r0, [r7, #0]
 800232c:	f003 ff07 	bl	800613e <HAL_SPI_Transmit>

	status = HAL_SPI_Receive(hspi, data_read, data_size, TIMEOUT_LRG);
 8002330:	897a      	ldrh	r2, [r7, #10]
 8002332:	2364      	movs	r3, #100	; 0x64
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	6838      	ldr	r0, [r7, #0]
 8002338:	f004 f844 	bl	80063c4 <HAL_SPI_Receive>
 800233c:	4603      	mov	r3, r0
 800233e:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);
 8002340:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002342:	2201      	movs	r2, #1
 8002344:	4619      	mov	r1, r3
 8002346:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002348:	f001 fca2 	bl	8003c90 <HAL_GPIO_WritePin>

	return status;
 800234c:	7dfb      	ldrb	r3, [r7, #23]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <spi_write_data_dma>:
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_SET);	// Set the chip select pin to high to remove the Flash from the SPI bus

	return status;
}

HAL_StatusTypeDef spi_write_data_dma(uint8_t* opcode, uint16_t data_size, uint8_t data_write[data_size], SPI_HandleTypeDef *hspi, uint32_t addr, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_CS) {
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	603b      	str	r3, [r7, #0]
 8002362:	460b      	mov	r3, r1
 8002364:	817b      	strh	r3, [r7, #10]
    HAL_StatusTypeDef status;

    // Split the 24 bit address into three 8 bit ints
    uint8_t addrL = addr & 0xFF;  			// Get the low byte
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	75bb      	strb	r3, [r7, #22]
    uint8_t addrM = (addr >> 8) & 0xFF;  	// Get the middle byte
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	b2db      	uxtb	r3, r3
 8002372:	757b      	strb	r3, [r7, #21]
    uint8_t addrH = (addr >> 16) & 0xFF;  	// Get the high byte
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	0c1b      	lsrs	r3, r3, #16
 8002378:	b2db      	uxtb	r3, r3
 800237a:	753b      	strb	r3, [r7, #20]

    // Send the PageWrite command
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin_CS, GPIO_PIN_RESET);	// Set the chip select pin to low to initiate SPI comms
 800237c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800237e:	2200      	movs	r2, #0
 8002380:	4619      	mov	r1, r3
 8002382:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002384:	f001 fc84 	bl	8003c90 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, opcode, 1, TIMEOUT_SML);					// Write the write enable value to the Flash to initial writing
 8002388:	2302      	movs	r3, #2
 800238a:	2201      	movs	r2, #1
 800238c:	68f9      	ldr	r1, [r7, #12]
 800238e:	6838      	ldr	r0, [r7, #0]
 8002390:	f003 fed5 	bl	800613e <HAL_SPI_Transmit>

    // Transmit the 24 bit address of the page to write to
    HAL_SPI_Transmit(hspi, &addrH, 1, TIMEOUT_SML);
 8002394:	f107 0114 	add.w	r1, r7, #20
 8002398:	2302      	movs	r3, #2
 800239a:	2201      	movs	r2, #1
 800239c:	6838      	ldr	r0, [r7, #0]
 800239e:	f003 fece 	bl	800613e <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, &addrM, 1, TIMEOUT_SML);
 80023a2:	f107 0115 	add.w	r1, r7, #21
 80023a6:	2302      	movs	r3, #2
 80023a8:	2201      	movs	r2, #1
 80023aa:	6838      	ldr	r0, [r7, #0]
 80023ac:	f003 fec7 	bl	800613e <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, &addrL, 1, TIMEOUT_SML);
 80023b0:	f107 0116 	add.w	r1, r7, #22
 80023b4:	2302      	movs	r3, #2
 80023b6:	2201      	movs	r2, #1
 80023b8:	6838      	ldr	r0, [r7, #0]
 80023ba:	f003 fec0 	bl	800613e <HAL_SPI_Transmit>

    // Start the DMA transfer
    status = HAL_SPI_Transmit_DMA(hspi, data_write, data_size);
 80023be:	897b      	ldrh	r3, [r7, #10]
 80023c0:	461a      	mov	r2, r3
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	6838      	ldr	r0, [r7, #0]
 80023c6:	f004 fac5 	bl	8006954 <HAL_SPI_Transmit_DMA>
 80023ca:	4603      	mov	r3, r0
 80023cc:	75fb      	strb	r3, [r7, #23]

    return status;
 80023ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <HAL_MspInit+0x4c>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	4a0f      	ldr	r2, [pc, #60]	; (8002424 <HAL_MspInit+0x4c>)
 80023e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ec:	6453      	str	r3, [r2, #68]	; 0x44
 80023ee:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <HAL_MspInit+0x4c>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f6:	607b      	str	r3, [r7, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	603b      	str	r3, [r7, #0]
 80023fe:	4b09      	ldr	r3, [pc, #36]	; (8002424 <HAL_MspInit+0x4c>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	4a08      	ldr	r2, [pc, #32]	; (8002424 <HAL_MspInit+0x4c>)
 8002404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002408:	6413      	str	r3, [r2, #64]	; 0x40
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_MspInit+0x4c>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800

08002428 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	; 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a20      	ldr	r2, [pc, #128]	; (80024c8 <HAL_CAN_MspInit+0xa0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d139      	bne.n	80024be <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	4b1f      	ldr	r3, [pc, #124]	; (80024cc <HAL_CAN_MspInit+0xa4>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	4a1e      	ldr	r2, [pc, #120]	; (80024cc <HAL_CAN_MspInit+0xa4>)
 8002454:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002458:	6413      	str	r3, [r2, #64]	; 0x40
 800245a:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <HAL_CAN_MspInit+0xa4>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	4b18      	ldr	r3, [pc, #96]	; (80024cc <HAL_CAN_MspInit+0xa4>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	4a17      	ldr	r2, [pc, #92]	; (80024cc <HAL_CAN_MspInit+0xa4>)
 8002470:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	4b15      	ldr	r3, [pc, #84]	; (80024cc <HAL_CAN_MspInit+0xa4>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	4b11      	ldr	r3, [pc, #68]	; (80024cc <HAL_CAN_MspInit+0xa4>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a10      	ldr	r2, [pc, #64]	; (80024cc <HAL_CAN_MspInit+0xa4>)
 800248c:	f043 0302 	orr.w	r3, r3, #2
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <HAL_CAN_MspInit+0xa4>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800249e:	2360      	movs	r3, #96	; 0x60
 80024a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a2:	2302      	movs	r3, #2
 80024a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024aa:	2303      	movs	r3, #3
 80024ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80024ae:	2309      	movs	r3, #9
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b2:	f107 0314 	add.w	r3, r7, #20
 80024b6:	4619      	mov	r1, r3
 80024b8:	4805      	ldr	r0, [pc, #20]	; (80024d0 <HAL_CAN_MspInit+0xa8>)
 80024ba:	f001 fa25 	bl	8003908 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80024be:	bf00      	nop
 80024c0:	3728      	adds	r7, #40	; 0x28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40006800 	.word	0x40006800
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40020400 	.word	0x40020400

080024d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08c      	sub	sp, #48	; 0x30
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 031c 	add.w	r3, r7, #28
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a33      	ldr	r2, [pc, #204]	; (80025c0 <HAL_I2C_MspInit+0xec>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d12d      	bne.n	8002552 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
 80024fa:	4b32      	ldr	r3, [pc, #200]	; (80025c4 <HAL_I2C_MspInit+0xf0>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4a31      	ldr	r2, [pc, #196]	; (80025c4 <HAL_I2C_MspInit+0xf0>)
 8002500:	f043 0302 	orr.w	r3, r3, #2
 8002504:	6313      	str	r3, [r2, #48]	; 0x30
 8002506:	4b2f      	ldr	r3, [pc, #188]	; (80025c4 <HAL_I2C_MspInit+0xf0>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002512:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002518:	2312      	movs	r3, #18
 800251a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002520:	2303      	movs	r3, #3
 8002522:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002524:	2304      	movs	r3, #4
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002528:	f107 031c 	add.w	r3, r7, #28
 800252c:	4619      	mov	r1, r3
 800252e:	4826      	ldr	r0, [pc, #152]	; (80025c8 <HAL_I2C_MspInit+0xf4>)
 8002530:	f001 f9ea 	bl	8003908 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <HAL_I2C_MspInit+0xf0>)
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	4a21      	ldr	r2, [pc, #132]	; (80025c4 <HAL_I2C_MspInit+0xf0>)
 800253e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002542:	6413      	str	r3, [r2, #64]	; 0x40
 8002544:	4b1f      	ldr	r3, [pc, #124]	; (80025c4 <HAL_I2C_MspInit+0xf0>)
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002550:	e031      	b.n	80025b6 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1d      	ldr	r2, [pc, #116]	; (80025cc <HAL_I2C_MspInit+0xf8>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d12c      	bne.n	80025b6 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800255c:	2300      	movs	r3, #0
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <HAL_I2C_MspInit+0xf0>)
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	4a17      	ldr	r2, [pc, #92]	; (80025c4 <HAL_I2C_MspInit+0xf0>)
 8002566:	f043 0302 	orr.w	r3, r3, #2
 800256a:	6313      	str	r3, [r2, #48]	; 0x30
 800256c:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <HAL_I2C_MspInit+0xf0>)
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002578:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800257c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800257e:	2312      	movs	r3, #18
 8002580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002586:	2303      	movs	r3, #3
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800258a:	2304      	movs	r3, #4
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258e:	f107 031c 	add.w	r3, r7, #28
 8002592:	4619      	mov	r1, r3
 8002594:	480c      	ldr	r0, [pc, #48]	; (80025c8 <HAL_I2C_MspInit+0xf4>)
 8002596:	f001 f9b7 	bl	8003908 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_I2C_MspInit+0xf0>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	4a08      	ldr	r2, [pc, #32]	; (80025c4 <HAL_I2C_MspInit+0xf0>)
 80025a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025a8:	6413      	str	r3, [r2, #64]	; 0x40
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_I2C_MspInit+0xf0>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
}
 80025b6:	bf00      	nop
 80025b8:	3730      	adds	r7, #48	; 0x30
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40005400 	.word	0x40005400
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40020400 	.word	0x40020400
 80025cc:	40005800 	.word	0x40005800

080025d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08e      	sub	sp, #56	; 0x38
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025d8:	f107 0308 	add.w	r3, r7, #8
 80025dc:	2230      	movs	r2, #48	; 0x30
 80025de:	2100      	movs	r1, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f005 ffb5 	bl	8008550 <memset>
  if(hrtc->Instance==RTC)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a0c      	ldr	r2, [pc, #48]	; (800261c <HAL_RTC_MspInit+0x4c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d111      	bne.n	8002614 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80025f0:	2320      	movs	r3, #32
 80025f2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80025f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025f8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025fa:	f107 0308 	add.w	r3, r7, #8
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 f848 	bl	8005694 <HAL_RCCEx_PeriphCLKConfig>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800260a:	f7ff fa57 	bl	8001abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800260e:	4b04      	ldr	r3, [pc, #16]	; (8002620 <HAL_RTC_MspInit+0x50>)
 8002610:	2201      	movs	r2, #1
 8002612:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002614:	bf00      	nop
 8002616:	3738      	adds	r7, #56	; 0x38
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40002800 	.word	0x40002800
 8002620:	42470e3c 	.word	0x42470e3c

08002624 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08c      	sub	sp, #48	; 0x30
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 031c 	add.w	r3, r7, #28
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a6f      	ldr	r2, [pc, #444]	; (8002800 <HAL_SPI_MspInit+0x1dc>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d15b      	bne.n	80026fe <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	61bb      	str	r3, [r7, #24]
 800264a:	4b6e      	ldr	r3, [pc, #440]	; (8002804 <HAL_SPI_MspInit+0x1e0>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	4a6d      	ldr	r2, [pc, #436]	; (8002804 <HAL_SPI_MspInit+0x1e0>)
 8002650:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002654:	6453      	str	r3, [r2, #68]	; 0x44
 8002656:	4b6b      	ldr	r3, [pc, #428]	; (8002804 <HAL_SPI_MspInit+0x1e0>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800265e:	61bb      	str	r3, [r7, #24]
 8002660:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	4b67      	ldr	r3, [pc, #412]	; (8002804 <HAL_SPI_MspInit+0x1e0>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	4a66      	ldr	r2, [pc, #408]	; (8002804 <HAL_SPI_MspInit+0x1e0>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6313      	str	r3, [r2, #48]	; 0x30
 8002672:	4b64      	ldr	r3, [pc, #400]	; (8002804 <HAL_SPI_MspInit+0x1e0>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800267e:	23e0      	movs	r3, #224	; 0xe0
 8002680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002682:	2302      	movs	r3, #2
 8002684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268a:	2303      	movs	r3, #3
 800268c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800268e:	2305      	movs	r3, #5
 8002690:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002692:	f107 031c 	add.w	r3, r7, #28
 8002696:	4619      	mov	r1, r3
 8002698:	485b      	ldr	r0, [pc, #364]	; (8002808 <HAL_SPI_MspInit+0x1e4>)
 800269a:	f001 f935 	bl	8003908 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800269e:	4b5b      	ldr	r3, [pc, #364]	; (800280c <HAL_SPI_MspInit+0x1e8>)
 80026a0:	4a5b      	ldr	r2, [pc, #364]	; (8002810 <HAL_SPI_MspInit+0x1ec>)
 80026a2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80026a4:	4b59      	ldr	r3, [pc, #356]	; (800280c <HAL_SPI_MspInit+0x1e8>)
 80026a6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80026aa:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026ac:	4b57      	ldr	r3, [pc, #348]	; (800280c <HAL_SPI_MspInit+0x1e8>)
 80026ae:	2240      	movs	r2, #64	; 0x40
 80026b0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026b2:	4b56      	ldr	r3, [pc, #344]	; (800280c <HAL_SPI_MspInit+0x1e8>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026b8:	4b54      	ldr	r3, [pc, #336]	; (800280c <HAL_SPI_MspInit+0x1e8>)
 80026ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026be:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026c0:	4b52      	ldr	r3, [pc, #328]	; (800280c <HAL_SPI_MspInit+0x1e8>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026c6:	4b51      	ldr	r3, [pc, #324]	; (800280c <HAL_SPI_MspInit+0x1e8>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80026cc:	4b4f      	ldr	r3, [pc, #316]	; (800280c <HAL_SPI_MspInit+0x1e8>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80026d2:	4b4e      	ldr	r3, [pc, #312]	; (800280c <HAL_SPI_MspInit+0x1e8>)
 80026d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026d8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026da:	4b4c      	ldr	r3, [pc, #304]	; (800280c <HAL_SPI_MspInit+0x1e8>)
 80026dc:	2200      	movs	r2, #0
 80026de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80026e0:	484a      	ldr	r0, [pc, #296]	; (800280c <HAL_SPI_MspInit+0x1e8>)
 80026e2:	f000 fd0f 	bl	8003104 <HAL_DMA_Init>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80026ec:	f7ff f9e6 	bl	8001abc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a46      	ldr	r2, [pc, #280]	; (800280c <HAL_SPI_MspInit+0x1e8>)
 80026f4:	649a      	str	r2, [r3, #72]	; 0x48
 80026f6:	4a45      	ldr	r2, [pc, #276]	; (800280c <HAL_SPI_MspInit+0x1e8>)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80026fc:	e07b      	b.n	80027f6 <HAL_SPI_MspInit+0x1d2>
  else if(hspi->Instance==SPI2)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a44      	ldr	r2, [pc, #272]	; (8002814 <HAL_SPI_MspInit+0x1f0>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d176      	bne.n	80027f6 <HAL_SPI_MspInit+0x1d2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002708:	2300      	movs	r3, #0
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	4b3d      	ldr	r3, [pc, #244]	; (8002804 <HAL_SPI_MspInit+0x1e0>)
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	4a3c      	ldr	r2, [pc, #240]	; (8002804 <HAL_SPI_MspInit+0x1e0>)
 8002712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002716:	6413      	str	r3, [r2, #64]	; 0x40
 8002718:	4b3a      	ldr	r3, [pc, #232]	; (8002804 <HAL_SPI_MspInit+0x1e0>)
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	4b36      	ldr	r3, [pc, #216]	; (8002804 <HAL_SPI_MspInit+0x1e0>)
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	4a35      	ldr	r2, [pc, #212]	; (8002804 <HAL_SPI_MspInit+0x1e0>)
 800272e:	f043 0304 	orr.w	r3, r3, #4
 8002732:	6313      	str	r3, [r2, #48]	; 0x30
 8002734:	4b33      	ldr	r3, [pc, #204]	; (8002804 <HAL_SPI_MspInit+0x1e0>)
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002740:	2300      	movs	r3, #0
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	4b2f      	ldr	r3, [pc, #188]	; (8002804 <HAL_SPI_MspInit+0x1e0>)
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	4a2e      	ldr	r2, [pc, #184]	; (8002804 <HAL_SPI_MspInit+0x1e0>)
 800274a:	f043 0308 	orr.w	r3, r3, #8
 800274e:	6313      	str	r3, [r2, #48]	; 0x30
 8002750:	4b2c      	ldr	r3, [pc, #176]	; (8002804 <HAL_SPI_MspInit+0x1e0>)
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800275c:	230c      	movs	r3, #12
 800275e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002760:	2302      	movs	r3, #2
 8002762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002768:	2303      	movs	r3, #3
 800276a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800276c:	2305      	movs	r3, #5
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002770:	f107 031c 	add.w	r3, r7, #28
 8002774:	4619      	mov	r1, r3
 8002776:	4828      	ldr	r0, [pc, #160]	; (8002818 <HAL_SPI_MspInit+0x1f4>)
 8002778:	f001 f8c6 	bl	8003908 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800277c:	2308      	movs	r3, #8
 800277e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002788:	2303      	movs	r3, #3
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800278c:	2305      	movs	r3, #5
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002790:	f107 031c 	add.w	r3, r7, #28
 8002794:	4619      	mov	r1, r3
 8002796:	4821      	ldr	r0, [pc, #132]	; (800281c <HAL_SPI_MspInit+0x1f8>)
 8002798:	f001 f8b6 	bl	8003908 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800279c:	4b20      	ldr	r3, [pc, #128]	; (8002820 <HAL_SPI_MspInit+0x1fc>)
 800279e:	4a21      	ldr	r2, [pc, #132]	; (8002824 <HAL_SPI_MspInit+0x200>)
 80027a0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80027a2:	4b1f      	ldr	r3, [pc, #124]	; (8002820 <HAL_SPI_MspInit+0x1fc>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027a8:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <HAL_SPI_MspInit+0x1fc>)
 80027aa:	2240      	movs	r2, #64	; 0x40
 80027ac:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ae:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <HAL_SPI_MspInit+0x1fc>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027b4:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <HAL_SPI_MspInit+0x1fc>)
 80027b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027ba:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027bc:	4b18      	ldr	r3, [pc, #96]	; (8002820 <HAL_SPI_MspInit+0x1fc>)
 80027be:	2200      	movs	r2, #0
 80027c0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027c2:	4b17      	ldr	r3, [pc, #92]	; (8002820 <HAL_SPI_MspInit+0x1fc>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80027c8:	4b15      	ldr	r3, [pc, #84]	; (8002820 <HAL_SPI_MspInit+0x1fc>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027ce:	4b14      	ldr	r3, [pc, #80]	; (8002820 <HAL_SPI_MspInit+0x1fc>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_SPI_MspInit+0x1fc>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80027da:	4811      	ldr	r0, [pc, #68]	; (8002820 <HAL_SPI_MspInit+0x1fc>)
 80027dc:	f000 fc92 	bl	8003104 <HAL_DMA_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_SPI_MspInit+0x1c6>
      Error_Handler();
 80027e6:	f7ff f969 	bl	8001abc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a0c      	ldr	r2, [pc, #48]	; (8002820 <HAL_SPI_MspInit+0x1fc>)
 80027ee:	649a      	str	r2, [r3, #72]	; 0x48
 80027f0:	4a0b      	ldr	r2, [pc, #44]	; (8002820 <HAL_SPI_MspInit+0x1fc>)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80027f6:	bf00      	nop
 80027f8:	3730      	adds	r7, #48	; 0x30
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40013000 	.word	0x40013000
 8002804:	40023800 	.word	0x40023800
 8002808:	40020000 	.word	0x40020000
 800280c:	200001e8 	.word	0x200001e8
 8002810:	40026458 	.word	0x40026458
 8002814:	40003800 	.word	0x40003800
 8002818:	40020800 	.word	0x40020800
 800281c:	40020c00 	.word	0x40020c00
 8002820:	20000248 	.word	0x20000248
 8002824:	40026070 	.word	0x40026070

08002828 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1c      	ldr	r2, [pc, #112]	; (80028a8 <HAL_TIM_Base_MspInit+0x80>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d116      	bne.n	8002868 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <HAL_TIM_Base_MspInit+0x84>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	4a1a      	ldr	r2, [pc, #104]	; (80028ac <HAL_TIM_Base_MspInit+0x84>)
 8002844:	f043 0310 	orr.w	r3, r3, #16
 8002848:	6413      	str	r3, [r2, #64]	; 0x40
 800284a:	4b18      	ldr	r3, [pc, #96]	; (80028ac <HAL_TIM_Base_MspInit+0x84>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	2100      	movs	r1, #0
 800285a:	2036      	movs	r0, #54	; 0x36
 800285c:	f000 fc1b 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002860:	2036      	movs	r0, #54	; 0x36
 8002862:	f000 fc34 	bl	80030ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002866:	e01a      	b.n	800289e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a10      	ldr	r2, [pc, #64]	; (80028b0 <HAL_TIM_Base_MspInit+0x88>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d115      	bne.n	800289e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <HAL_TIM_Base_MspInit+0x84>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	4a0c      	ldr	r2, [pc, #48]	; (80028ac <HAL_TIM_Base_MspInit+0x84>)
 800287c:	f043 0320 	orr.w	r3, r3, #32
 8002880:	6413      	str	r3, [r2, #64]	; 0x40
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_TIM_Base_MspInit+0x84>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f003 0320 	and.w	r3, r3, #32
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800288e:	2200      	movs	r2, #0
 8002890:	2100      	movs	r1, #0
 8002892:	2037      	movs	r0, #55	; 0x37
 8002894:	f000 fbff 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002898:	2037      	movs	r0, #55	; 0x37
 800289a:	f000 fc18 	bl	80030ce <HAL_NVIC_EnableIRQ>
}
 800289e:	bf00      	nop
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40001000 	.word	0x40001000
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40001400 	.word	0x40001400

080028b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08a      	sub	sp, #40	; 0x28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1d      	ldr	r2, [pc, #116]	; (8002948 <HAL_UART_MspInit+0x94>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d133      	bne.n	800293e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	4b1c      	ldr	r3, [pc, #112]	; (800294c <HAL_UART_MspInit+0x98>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	4a1b      	ldr	r2, [pc, #108]	; (800294c <HAL_UART_MspInit+0x98>)
 80028e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e4:	6413      	str	r3, [r2, #64]	; 0x40
 80028e6:	4b19      	ldr	r3, [pc, #100]	; (800294c <HAL_UART_MspInit+0x98>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <HAL_UART_MspInit+0x98>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a14      	ldr	r2, [pc, #80]	; (800294c <HAL_UART_MspInit+0x98>)
 80028fc:	f043 0308 	orr.w	r3, r3, #8
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_UART_MspInit+0x98>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800290e:	2360      	movs	r3, #96	; 0x60
 8002910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002912:	2302      	movs	r3, #2
 8002914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291a:	2303      	movs	r3, #3
 800291c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800291e:	2307      	movs	r3, #7
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002922:	f107 0314 	add.w	r3, r7, #20
 8002926:	4619      	mov	r1, r3
 8002928:	4809      	ldr	r0, [pc, #36]	; (8002950 <HAL_UART_MspInit+0x9c>)
 800292a:	f000 ffed 	bl	8003908 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	2100      	movs	r1, #0
 8002932:	2026      	movs	r0, #38	; 0x26
 8002934:	f000 fbaf 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002938:	2026      	movs	r0, #38	; 0x26
 800293a:	f000 fbc8 	bl	80030ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800293e:	bf00      	nop
 8002940:	3728      	adds	r7, #40	; 0x28
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40004400 	.word	0x40004400
 800294c:	40023800 	.word	0x40023800
 8002950:	40020c00 	.word	0x40020c00

08002954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002958:	e7fe      	b.n	8002958 <NMI_Handler+0x4>

0800295a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800295a:	b480      	push	{r7}
 800295c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800295e:	e7fe      	b.n	800295e <HardFault_Handler+0x4>

08002960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002964:	e7fe      	b.n	8002964 <MemManage_Handler+0x4>

08002966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002966:	b480      	push	{r7}
 8002968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800296a:	e7fe      	b.n	800296a <BusFault_Handler+0x4>

0800296c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002970:	e7fe      	b.n	8002970 <UsageFault_Handler+0x4>

08002972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029a0:	f000 f95e 	bl	8002c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029a4:	bf00      	nop
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80029ac:	4802      	ldr	r0, [pc, #8]	; (80029b8 <DMA1_Stream4_IRQHandler+0x10>)
 80029ae:	f000 fd41 	bl	8003434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20000248 	.word	0x20000248

080029bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029c0:	4802      	ldr	r0, [pc, #8]	; (80029cc <USART2_IRQHandler+0x10>)
 80029c2:	f004 fe6f 	bl	80076a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000338 	.word	0x20000338

080029d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80029d4:	4803      	ldr	r0, [pc, #12]	; (80029e4 <TIM6_DAC_IRQHandler+0x14>)
 80029d6:	f004 fb07 	bl	8006fe8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  tim6_overflow_flag = 0x01;
 80029da:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <TIM6_DAC_IRQHandler+0x18>)
 80029dc:	2201      	movs	r2, #1
 80029de:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80029e0:	bf00      	nop
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	200002a8 	.word	0x200002a8
 80029e8:	2000038b 	.word	0x2000038b

080029ec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80029f0:	4803      	ldr	r0, [pc, #12]	; (8002a00 <TIM7_IRQHandler+0x14>)
 80029f2:	f004 faf9 	bl	8006fe8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  tim7_overflow_flag = 0x01;
 80029f6:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <TIM7_IRQHandler+0x18>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM7_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	200002f0 	.word	0x200002f0
 8002a04:	2000038c 	.word	0x2000038c

08002a08 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002a0c:	4802      	ldr	r0, [pc, #8]	; (8002a18 <DMA2_Stream3_IRQHandler+0x10>)
 8002a0e:	f000 fd11 	bl	8003434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	200001e8 	.word	0x200001e8

08002a1c <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
	// Pull CS pin high to deselect the device
    if (hspi->Instance == SPI1) {
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a18      	ldr	r2, [pc, #96]	; (8002a8c <HAL_SPI_TxCpltCallback+0x70>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d108      	bne.n	8002a40 <HAL_SPI_TxCpltCallback+0x24>
        // Pull CS pin high for SPI1 to deselect the device
    	HAL_GPIO_WritePin(cs_spi1.GPIOx, cs_spi1.GPIO_Pin, GPIO_PIN_SET);
 8002a2e:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <HAL_SPI_TxCpltCallback+0x74>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a17      	ldr	r2, [pc, #92]	; (8002a90 <HAL_SPI_TxCpltCallback+0x74>)
 8002a34:	8891      	ldrh	r1, [r2, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f001 f929 	bl	8003c90 <HAL_GPIO_WritePin>
 8002a3e:	e00c      	b.n	8002a5a <HAL_SPI_TxCpltCallback+0x3e>
    } else if (hspi->Instance == SPI2) {
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a13      	ldr	r2, [pc, #76]	; (8002a94 <HAL_SPI_TxCpltCallback+0x78>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d107      	bne.n	8002a5a <HAL_SPI_TxCpltCallback+0x3e>
        // Pull CS pin high for SPI2 to deselect the device
    	HAL_GPIO_WritePin(cs_spi2.GPIOx, cs_spi2.GPIO_Pin, GPIO_PIN_SET);
 8002a4a:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <HAL_SPI_TxCpltCallback+0x7c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a12      	ldr	r2, [pc, #72]	; (8002a98 <HAL_SPI_TxCpltCallback+0x7c>)
 8002a50:	8891      	ldrh	r1, [r2, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	4618      	mov	r0, r3
 8002a56:	f001 f91b 	bl	8003c90 <HAL_GPIO_WritePin>
    }

    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0202 	bic.w	r2, r2, #2
 8002a68:	605a      	str	r2, [r3, #4]
    clean_data_buffer(PAGE_SIZE, data_buffer_tx[buffer_tracker ^ 0x01]);
 8002a6a:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <HAL_SPI_TxCpltCallback+0x80>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	f083 0301 	eor.w	r3, r3, #1
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	021b      	lsls	r3, r3, #8
 8002a76:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <HAL_SPI_TxCpltCallback+0x84>)
 8002a78:	4413      	add	r3, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a80:	f7fe fd36 	bl	80014f0 <clean_data_buffer>
}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40013000 	.word	0x40013000
 8002a90:	200005c4 	.word	0x200005c4
 8002a94:	40003800 	.word	0x40003800
 8002a98:	200005d4 	.word	0x200005d4
 8002a9c:	20000590 	.word	0x20000590
 8002aa0:	20000390 	.word	0x20000390

08002aa4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
	uart2_rec_flag = 0x01;
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_UART_RxCpltCallback+0x20>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, UARTRxData, 2);
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	4904      	ldr	r1, [pc, #16]	; (8002ac8 <HAL_UART_RxCpltCallback+0x24>)
 8002ab6:	4805      	ldr	r0, [pc, #20]	; (8002acc <HAL_UART_RxCpltCallback+0x28>)
 8002ab8:	f004 fdcf 	bl	800765a <HAL_UART_Receive_IT>
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	2000038a 	.word	0x2000038a
 8002ac8:	20000388 	.word	0x20000388
 8002acc:	20000338 	.word	0x20000338

08002ad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ad4:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <SystemInit+0x20>)
 8002ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ada:	4a05      	ldr	r2, [pc, #20]	; (8002af0 <SystemInit+0x20>)
 8002adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <uart_transmit_page>:

#include "uart_transmit.h"
/**
 * Transmit one single page over the UART interface
 */
void uart_transmit_page(UART_HandleTypeDef *huart, uint8_t page[PAGE_SIZE]) {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, page, PAGE_SIZE, HAL_MAX_DELAY);
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b06:	6839      	ldr	r1, [r7, #0]
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f004 fd1b 	bl	8007544 <HAL_UART_Transmit>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <send_uart_string>:

void send_uart_string(UART_HandleTypeDef *huart, const char *str) {
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8002b20:	6838      	ldr	r0, [r7, #0]
 8002b22:	f7fd fb63 	bl	80001ec <strlen>
 8002b26:	4603      	mov	r3, r0
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b2e:	6839      	ldr	r1, [r7, #0]
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f004 fd07 	bl	8007544 <HAL_UART_Transmit>
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <send_uart_hex>:
	// Call the send_uart_string function to send the value to UART
	send_uart_string(huart, value_str);
	send_uart_string(huart, "\r\n");
}

void send_uart_hex(UART_HandleTypeDef *huart, uint8_t value) {
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b084      	sub	sp, #16
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	460b      	mov	r3, r1
 8002b48:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[1];
	buffer[0] = value;
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(huart, buffer, 1, HAL_MAX_DELAY);
 8002b4e:	f107 010c 	add.w	r1, r7, #12
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b56:	2201      	movs	r2, #1
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f004 fcf3 	bl	8007544 <HAL_UART_Transmit>
}
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ba0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002b6c:	f7ff ffb0 	bl	8002ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b70:	480c      	ldr	r0, [pc, #48]	; (8002ba4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b72:	490d      	ldr	r1, [pc, #52]	; (8002ba8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b74:	4a0d      	ldr	r2, [pc, #52]	; (8002bac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b78:	e002      	b.n	8002b80 <LoopCopyDataInit>

08002b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b7e:	3304      	adds	r3, #4

08002b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b84:	d3f9      	bcc.n	8002b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b86:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b88:	4c0a      	ldr	r4, [pc, #40]	; (8002bb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b8c:	e001      	b.n	8002b92 <LoopFillZerobss>

08002b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b90:	3204      	adds	r2, #4

08002b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b94:	d3fb      	bcc.n	8002b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b96:	f005 fce3 	bl	8008560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b9a:	f7fe f887 	bl	8000cac <main>
  bx  lr    
 8002b9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ba0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ba8:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8002bac:	08008688 	.word	0x08008688
  ldr r2, =_sbss
 8002bb0:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002bb4:	20000608 	.word	0x20000608

08002bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bb8:	e7fe      	b.n	8002bb8 <ADC_IRQHandler>
	...

08002bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bc0:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <HAL_Init+0x40>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0d      	ldr	r2, [pc, #52]	; (8002bfc <HAL_Init+0x40>)
 8002bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_Init+0x40>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <HAL_Init+0x40>)
 8002bd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bd8:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <HAL_Init+0x40>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a07      	ldr	r2, [pc, #28]	; (8002bfc <HAL_Init+0x40>)
 8002bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002be4:	2003      	movs	r0, #3
 8002be6:	f000 fa4b 	bl	8003080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bea:	200f      	movs	r0, #15
 8002bec:	f000 f808 	bl	8002c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bf0:	f7ff fbf2 	bl	80023d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023c00 	.word	0x40023c00

08002c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c08:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <HAL_InitTick+0x54>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <HAL_InitTick+0x58>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	4619      	mov	r1, r3
 8002c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fa63 	bl	80030ea <HAL_SYSTICK_Config>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e00e      	b.n	8002c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b0f      	cmp	r3, #15
 8002c32:	d80a      	bhi.n	8002c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c34:	2200      	movs	r2, #0
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c3c:	f000 fa2b 	bl	8003096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c40:	4a06      	ldr	r2, [pc, #24]	; (8002c5c <HAL_InitTick+0x5c>)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	e000      	b.n	8002c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	2000001c 	.word	0x2000001c
 8002c58:	20000024 	.word	0x20000024
 8002c5c:	20000020 	.word	0x20000020

08002c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c64:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <HAL_IncTick+0x20>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_IncTick+0x24>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4413      	add	r3, r2
 8002c70:	4a04      	ldr	r2, [pc, #16]	; (8002c84 <HAL_IncTick+0x24>)
 8002c72:	6013      	str	r3, [r2, #0]
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	20000024 	.word	0x20000024
 8002c84:	20000604 	.word	0x20000604

08002c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c8c:	4b03      	ldr	r3, [pc, #12]	; (8002c9c <HAL_GetTick+0x14>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	20000604 	.word	0x20000604

08002ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ca8:	f7ff ffee 	bl	8002c88 <HAL_GetTick>
 8002cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cb8:	d005      	beq.n	8002cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cba:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <HAL_Delay+0x44>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cc6:	bf00      	nop
 8002cc8:	f7ff ffde 	bl	8002c88 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d8f7      	bhi.n	8002cc8 <HAL_Delay+0x28>
  {
  }
}
 8002cd8:	bf00      	nop
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000024 	.word	0x20000024

08002ce8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e0ed      	b.n	8002ed6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d102      	bne.n	8002d0c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff fb8e 	bl	8002428 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0201 	orr.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d1c:	f7ff ffb4 	bl	8002c88 <HAL_GetTick>
 8002d20:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d22:	e012      	b.n	8002d4a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d24:	f7ff ffb0 	bl	8002c88 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b0a      	cmp	r3, #10
 8002d30:	d90b      	bls.n	8002d4a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2205      	movs	r2, #5
 8002d42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e0c5      	b.n	8002ed6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0e5      	beq.n	8002d24 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0202 	bic.w	r2, r2, #2
 8002d66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d68:	f7ff ff8e 	bl	8002c88 <HAL_GetTick>
 8002d6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d6e:	e012      	b.n	8002d96 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d70:	f7ff ff8a 	bl	8002c88 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b0a      	cmp	r3, #10
 8002d7c:	d90b      	bls.n	8002d96 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2205      	movs	r2, #5
 8002d8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e09f      	b.n	8002ed6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1e5      	bne.n	8002d70 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	7e1b      	ldrb	r3, [r3, #24]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d108      	bne.n	8002dbe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e007      	b.n	8002dce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	7e5b      	ldrb	r3, [r3, #25]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d108      	bne.n	8002de8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	e007      	b.n	8002df8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7e9b      	ldrb	r3, [r3, #26]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d108      	bne.n	8002e12 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0220 	orr.w	r2, r2, #32
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	e007      	b.n	8002e22 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0220 	bic.w	r2, r2, #32
 8002e20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	7edb      	ldrb	r3, [r3, #27]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d108      	bne.n	8002e3c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0210 	bic.w	r2, r2, #16
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	e007      	b.n	8002e4c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0210 	orr.w	r2, r2, #16
 8002e4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	7f1b      	ldrb	r3, [r3, #28]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d108      	bne.n	8002e66 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0208 	orr.w	r2, r2, #8
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	e007      	b.n	8002e76 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0208 	bic.w	r2, r2, #8
 8002e74:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	7f5b      	ldrb	r3, [r3, #29]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d108      	bne.n	8002e90 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0204 	orr.w	r2, r2, #4
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	e007      	b.n	8002ea0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0204 	bic.w	r2, r2, #4
 8002e9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	ea42 0103 	orr.w	r1, r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	1e5a      	subs	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002efc:	4013      	ands	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f12:	4a04      	ldr	r2, [pc, #16]	; (8002f24 <__NVIC_SetPriorityGrouping+0x44>)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	60d3      	str	r3, [r2, #12]
}
 8002f18:	bf00      	nop
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f2c:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <__NVIC_GetPriorityGrouping+0x18>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	0a1b      	lsrs	r3, r3, #8
 8002f32:	f003 0307 	and.w	r3, r3, #7
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	db0b      	blt.n	8002f6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	f003 021f 	and.w	r2, r3, #31
 8002f5c:	4907      	ldr	r1, [pc, #28]	; (8002f7c <__NVIC_EnableIRQ+0x38>)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	2001      	movs	r0, #1
 8002f66:	fa00 f202 	lsl.w	r2, r0, r2
 8002f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	e000e100 	.word	0xe000e100

08002f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	6039      	str	r1, [r7, #0]
 8002f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	db0a      	blt.n	8002faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	490c      	ldr	r1, [pc, #48]	; (8002fcc <__NVIC_SetPriority+0x4c>)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	0112      	lsls	r2, r2, #4
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa8:	e00a      	b.n	8002fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4908      	ldr	r1, [pc, #32]	; (8002fd0 <__NVIC_SetPriority+0x50>)
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	3b04      	subs	r3, #4
 8002fb8:	0112      	lsls	r2, r2, #4
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	761a      	strb	r2, [r3, #24]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000e100 	.word	0xe000e100
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b089      	sub	sp, #36	; 0x24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f1c3 0307 	rsb	r3, r3, #7
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	bf28      	it	cs
 8002ff2:	2304      	movcs	r3, #4
 8002ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	2b06      	cmp	r3, #6
 8002ffc:	d902      	bls.n	8003004 <NVIC_EncodePriority+0x30>
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3b03      	subs	r3, #3
 8003002:	e000      	b.n	8003006 <NVIC_EncodePriority+0x32>
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003008:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43da      	mvns	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	401a      	ands	r2, r3
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800301c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	fa01 f303 	lsl.w	r3, r1, r3
 8003026:	43d9      	mvns	r1, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800302c:	4313      	orrs	r3, r2
         );
}
 800302e:	4618      	mov	r0, r3
 8003030:	3724      	adds	r7, #36	; 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3b01      	subs	r3, #1
 8003048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800304c:	d301      	bcc.n	8003052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800304e:	2301      	movs	r3, #1
 8003050:	e00f      	b.n	8003072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003052:	4a0a      	ldr	r2, [pc, #40]	; (800307c <SysTick_Config+0x40>)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3b01      	subs	r3, #1
 8003058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800305a:	210f      	movs	r1, #15
 800305c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003060:	f7ff ff8e 	bl	8002f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <SysTick_Config+0x40>)
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800306a:	4b04      	ldr	r3, [pc, #16]	; (800307c <SysTick_Config+0x40>)
 800306c:	2207      	movs	r2, #7
 800306e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	e000e010 	.word	0xe000e010

08003080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff ff29 	bl	8002ee0 <__NVIC_SetPriorityGrouping>
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003096:	b580      	push	{r7, lr}
 8003098:	b086      	sub	sp, #24
 800309a:	af00      	add	r7, sp, #0
 800309c:	4603      	mov	r3, r0
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	607a      	str	r2, [r7, #4]
 80030a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030a8:	f7ff ff3e 	bl	8002f28 <__NVIC_GetPriorityGrouping>
 80030ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	6978      	ldr	r0, [r7, #20]
 80030b4:	f7ff ff8e 	bl	8002fd4 <NVIC_EncodePriority>
 80030b8:	4602      	mov	r2, r0
 80030ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030be:	4611      	mov	r1, r2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ff5d 	bl	8002f80 <__NVIC_SetPriority>
}
 80030c6:	bf00      	nop
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	4603      	mov	r3, r0
 80030d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff ff31 	bl	8002f44 <__NVIC_EnableIRQ>
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b082      	sub	sp, #8
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7ff ffa2 	bl	800303c <SysTick_Config>
 80030f8:	4603      	mov	r3, r0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003110:	f7ff fdba 	bl	8002c88 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e099      	b.n	8003254 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0201 	bic.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003140:	e00f      	b.n	8003162 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003142:	f7ff fda1 	bl	8002c88 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b05      	cmp	r3, #5
 800314e:	d908      	bls.n	8003162 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2220      	movs	r2, #32
 8003154:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2203      	movs	r2, #3
 800315a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e078      	b.n	8003254 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1e8      	bne.n	8003142 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4b38      	ldr	r3, [pc, #224]	; (800325c <HAL_DMA_Init+0x158>)
 800317c:	4013      	ands	r3, r2
 800317e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800318e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800319a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d107      	bne.n	80031cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c4:	4313      	orrs	r3, r2
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f023 0307 	bic.w	r3, r3, #7
 80031e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d117      	bne.n	8003226 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00e      	beq.n	8003226 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fb01 	bl	8003810 <DMA_CheckFifoParam>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2240      	movs	r2, #64	; 0x40
 8003218:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003222:	2301      	movs	r3, #1
 8003224:	e016      	b.n	8003254 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fab8 	bl	80037a4 <DMA_CalcBaseAndBitshift>
 8003234:	4603      	mov	r3, r0
 8003236:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323c:	223f      	movs	r2, #63	; 0x3f
 800323e:	409a      	lsls	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	f010803f 	.word	0xf010803f

08003260 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003276:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_DMA_Start_IT+0x26>
 8003282:	2302      	movs	r3, #2
 8003284:	e040      	b.n	8003308 <HAL_DMA_Start_IT+0xa8>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b01      	cmp	r3, #1
 8003298:	d12f      	bne.n	80032fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2202      	movs	r2, #2
 800329e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 fa4a 	bl	8003748 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b8:	223f      	movs	r2, #63	; 0x3f
 80032ba:	409a      	lsls	r2, r3
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0216 	orr.w	r2, r2, #22
 80032ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d007      	beq.n	80032e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0208 	orr.w	r2, r2, #8
 80032e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	e005      	b.n	8003306 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003302:	2302      	movs	r3, #2
 8003304:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003306:	7dfb      	ldrb	r3, [r7, #23]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800331e:	f7ff fcb3 	bl	8002c88 <HAL_GetTick>
 8003322:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d008      	beq.n	8003342 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2280      	movs	r2, #128	; 0x80
 8003334:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e052      	b.n	80033e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0216 	bic.w	r2, r2, #22
 8003350:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695a      	ldr	r2, [r3, #20]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003360:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	2b00      	cmp	r3, #0
 8003368:	d103      	bne.n	8003372 <HAL_DMA_Abort+0x62>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0208 	bic.w	r2, r2, #8
 8003380:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0201 	bic.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003392:	e013      	b.n	80033bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003394:	f7ff fc78 	bl	8002c88 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b05      	cmp	r3, #5
 80033a0:	d90c      	bls.n	80033bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2220      	movs	r2, #32
 80033a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2203      	movs	r2, #3
 80033ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e015      	b.n	80033e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1e4      	bne.n	8003394 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ce:	223f      	movs	r2, #63	; 0x3f
 80033d0:	409a      	lsls	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d004      	beq.n	800340e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2280      	movs	r2, #128	; 0x80
 8003408:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e00c      	b.n	8003428 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2205      	movs	r2, #5
 8003412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0201 	bic.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003440:	4b8e      	ldr	r3, [pc, #568]	; (800367c <HAL_DMA_IRQHandler+0x248>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a8e      	ldr	r2, [pc, #568]	; (8003680 <HAL_DMA_IRQHandler+0x24c>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	0a9b      	lsrs	r3, r3, #10
 800344c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003452:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345e:	2208      	movs	r2, #8
 8003460:	409a      	lsls	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4013      	ands	r3, r2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d01a      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d013      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0204 	bic.w	r2, r2, #4
 8003486:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348c:	2208      	movs	r2, #8
 800348e:	409a      	lsls	r2, r3
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003498:	f043 0201 	orr.w	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a4:	2201      	movs	r2, #1
 80034a6:	409a      	lsls	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d012      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00b      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c2:	2201      	movs	r2, #1
 80034c4:	409a      	lsls	r2, r3
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ce:	f043 0202 	orr.w	r2, r3, #2
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034da:	2204      	movs	r2, #4
 80034dc:	409a      	lsls	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d012      	beq.n	800350c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00b      	beq.n	800350c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f8:	2204      	movs	r2, #4
 80034fa:	409a      	lsls	r2, r3
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003504:	f043 0204 	orr.w	r2, r3, #4
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003510:	2210      	movs	r2, #16
 8003512:	409a      	lsls	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4013      	ands	r3, r2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d043      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d03c      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352e:	2210      	movs	r2, #16
 8003530:	409a      	lsls	r2, r3
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d018      	beq.n	8003576 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d108      	bne.n	8003564 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d024      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	4798      	blx	r3
 8003562:	e01f      	b.n	80035a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01b      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4798      	blx	r3
 8003574:	e016      	b.n	80035a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d107      	bne.n	8003594 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0208 	bic.w	r2, r2, #8
 8003592:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a8:	2220      	movs	r2, #32
 80035aa:	409a      	lsls	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 808f 	beq.w	80036d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 8087 	beq.w	80036d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ca:	2220      	movs	r2, #32
 80035cc:	409a      	lsls	r2, r3
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b05      	cmp	r3, #5
 80035dc:	d136      	bne.n	800364c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0216 	bic.w	r2, r2, #22
 80035ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d103      	bne.n	800360e <HAL_DMA_IRQHandler+0x1da>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0208 	bic.w	r2, r2, #8
 800361c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003622:	223f      	movs	r2, #63	; 0x3f
 8003624:	409a      	lsls	r2, r3
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800363e:	2b00      	cmp	r3, #0
 8003640:	d07e      	beq.n	8003740 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	4798      	blx	r3
        }
        return;
 800364a:	e079      	b.n	8003740 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d01d      	beq.n	8003696 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10d      	bne.n	8003684 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366c:	2b00      	cmp	r3, #0
 800366e:	d031      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	4798      	blx	r3
 8003678:	e02c      	b.n	80036d4 <HAL_DMA_IRQHandler+0x2a0>
 800367a:	bf00      	nop
 800367c:	2000001c 	.word	0x2000001c
 8003680:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003688:	2b00      	cmp	r3, #0
 800368a:	d023      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	4798      	blx	r3
 8003694:	e01e      	b.n	80036d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10f      	bne.n	80036c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0210 	bic.w	r2, r2, #16
 80036b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d032      	beq.n	8003742 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d022      	beq.n	800372e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2205      	movs	r2, #5
 80036ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0201 	bic.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	3301      	adds	r3, #1
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	429a      	cmp	r2, r3
 800370a:	d307      	bcc.n	800371c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f2      	bne.n	8003700 <HAL_DMA_IRQHandler+0x2cc>
 800371a:	e000      	b.n	800371e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800371c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
 800373e:	e000      	b.n	8003742 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003740:	bf00      	nop
    }
  }
}
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003764:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2b40      	cmp	r3, #64	; 0x40
 8003774:	d108      	bne.n	8003788 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003786:	e007      	b.n	8003798 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	60da      	str	r2, [r3, #12]
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	3b10      	subs	r3, #16
 80037b4:	4a14      	ldr	r2, [pc, #80]	; (8003808 <DMA_CalcBaseAndBitshift+0x64>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037be:	4a13      	ldr	r2, [pc, #76]	; (800380c <DMA_CalcBaseAndBitshift+0x68>)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4413      	add	r3, r2
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d909      	bls.n	80037e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037da:	f023 0303 	bic.w	r3, r3, #3
 80037de:	1d1a      	adds	r2, r3, #4
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	659a      	str	r2, [r3, #88]	; 0x58
 80037e4:	e007      	b.n	80037f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037ee:	f023 0303 	bic.w	r3, r3, #3
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	aaaaaaab 	.word	0xaaaaaaab
 800380c:	08008670 	.word	0x08008670

08003810 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d11f      	bne.n	800386a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b03      	cmp	r3, #3
 800382e:	d856      	bhi.n	80038de <DMA_CheckFifoParam+0xce>
 8003830:	a201      	add	r2, pc, #4	; (adr r2, 8003838 <DMA_CheckFifoParam+0x28>)
 8003832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003836:	bf00      	nop
 8003838:	08003849 	.word	0x08003849
 800383c:	0800385b 	.word	0x0800385b
 8003840:	08003849 	.word	0x08003849
 8003844:	080038df 	.word	0x080038df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d046      	beq.n	80038e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003858:	e043      	b.n	80038e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003862:	d140      	bne.n	80038e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003868:	e03d      	b.n	80038e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003872:	d121      	bne.n	80038b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2b03      	cmp	r3, #3
 8003878:	d837      	bhi.n	80038ea <DMA_CheckFifoParam+0xda>
 800387a:	a201      	add	r2, pc, #4	; (adr r2, 8003880 <DMA_CheckFifoParam+0x70>)
 800387c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003880:	08003891 	.word	0x08003891
 8003884:	08003897 	.word	0x08003897
 8003888:	08003891 	.word	0x08003891
 800388c:	080038a9 	.word	0x080038a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	73fb      	strb	r3, [r7, #15]
      break;
 8003894:	e030      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d025      	beq.n	80038ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a6:	e022      	b.n	80038ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038b0:	d11f      	bne.n	80038f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038b6:	e01c      	b.n	80038f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d903      	bls.n	80038c6 <DMA_CheckFifoParam+0xb6>
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d003      	beq.n	80038cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038c4:	e018      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
      break;
 80038ca:	e015      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00e      	beq.n	80038f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
      break;
 80038dc:	e00b      	b.n	80038f6 <DMA_CheckFifoParam+0xe6>
      break;
 80038de:	bf00      	nop
 80038e0:	e00a      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
      break;
 80038e2:	bf00      	nop
 80038e4:	e008      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
      break;
 80038e6:	bf00      	nop
 80038e8:	e006      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
      break;
 80038ea:	bf00      	nop
 80038ec:	e004      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
      break;
 80038ee:	bf00      	nop
 80038f0:	e002      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80038f2:	bf00      	nop
 80038f4:	e000      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
      break;
 80038f6:	bf00      	nop
    }
  } 
  
  return status; 
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop

08003908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003908:	b480      	push	{r7}
 800390a:	b089      	sub	sp, #36	; 0x24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003916:	2300      	movs	r3, #0
 8003918:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800391a:	2300      	movs	r3, #0
 800391c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
 8003922:	e177      	b.n	8003c14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003924:	2201      	movs	r2, #1
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	4013      	ands	r3, r2
 8003936:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	429a      	cmp	r2, r3
 800393e:	f040 8166 	bne.w	8003c0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	2b01      	cmp	r3, #1
 800394c:	d005      	beq.n	800395a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003956:	2b02      	cmp	r3, #2
 8003958:	d130      	bne.n	80039bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	2203      	movs	r2, #3
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	43db      	mvns	r3, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4013      	ands	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4313      	orrs	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003990:	2201      	movs	r2, #1
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	43db      	mvns	r3, r3
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	4013      	ands	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	f003 0201 	and.w	r2, r3, #1
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d017      	beq.n	80039f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	2203      	movs	r2, #3
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	43db      	mvns	r3, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4013      	ands	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f003 0303 	and.w	r3, r3, #3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d123      	bne.n	8003a4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	08da      	lsrs	r2, r3, #3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3208      	adds	r2, #8
 8003a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	220f      	movs	r2, #15
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	43db      	mvns	r3, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4013      	ands	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	08da      	lsrs	r2, r3, #3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3208      	adds	r2, #8
 8003a46:	69b9      	ldr	r1, [r7, #24]
 8003a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	2203      	movs	r2, #3
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 0203 	and.w	r2, r3, #3
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 80c0 	beq.w	8003c0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	4b66      	ldr	r3, [pc, #408]	; (8003c2c <HAL_GPIO_Init+0x324>)
 8003a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a96:	4a65      	ldr	r2, [pc, #404]	; (8003c2c <HAL_GPIO_Init+0x324>)
 8003a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a9e:	4b63      	ldr	r3, [pc, #396]	; (8003c2c <HAL_GPIO_Init+0x324>)
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aaa:	4a61      	ldr	r2, [pc, #388]	; (8003c30 <HAL_GPIO_Init+0x328>)
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	089b      	lsrs	r3, r3, #2
 8003ab0:	3302      	adds	r3, #2
 8003ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	220f      	movs	r2, #15
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4013      	ands	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a58      	ldr	r2, [pc, #352]	; (8003c34 <HAL_GPIO_Init+0x32c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d037      	beq.n	8003b46 <HAL_GPIO_Init+0x23e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a57      	ldr	r2, [pc, #348]	; (8003c38 <HAL_GPIO_Init+0x330>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d031      	beq.n	8003b42 <HAL_GPIO_Init+0x23a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a56      	ldr	r2, [pc, #344]	; (8003c3c <HAL_GPIO_Init+0x334>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d02b      	beq.n	8003b3e <HAL_GPIO_Init+0x236>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a55      	ldr	r2, [pc, #340]	; (8003c40 <HAL_GPIO_Init+0x338>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d025      	beq.n	8003b3a <HAL_GPIO_Init+0x232>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a54      	ldr	r2, [pc, #336]	; (8003c44 <HAL_GPIO_Init+0x33c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d01f      	beq.n	8003b36 <HAL_GPIO_Init+0x22e>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a53      	ldr	r2, [pc, #332]	; (8003c48 <HAL_GPIO_Init+0x340>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d019      	beq.n	8003b32 <HAL_GPIO_Init+0x22a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a52      	ldr	r2, [pc, #328]	; (8003c4c <HAL_GPIO_Init+0x344>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d013      	beq.n	8003b2e <HAL_GPIO_Init+0x226>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a51      	ldr	r2, [pc, #324]	; (8003c50 <HAL_GPIO_Init+0x348>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00d      	beq.n	8003b2a <HAL_GPIO_Init+0x222>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a50      	ldr	r2, [pc, #320]	; (8003c54 <HAL_GPIO_Init+0x34c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d007      	beq.n	8003b26 <HAL_GPIO_Init+0x21e>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a4f      	ldr	r2, [pc, #316]	; (8003c58 <HAL_GPIO_Init+0x350>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d101      	bne.n	8003b22 <HAL_GPIO_Init+0x21a>
 8003b1e:	2309      	movs	r3, #9
 8003b20:	e012      	b.n	8003b48 <HAL_GPIO_Init+0x240>
 8003b22:	230a      	movs	r3, #10
 8003b24:	e010      	b.n	8003b48 <HAL_GPIO_Init+0x240>
 8003b26:	2308      	movs	r3, #8
 8003b28:	e00e      	b.n	8003b48 <HAL_GPIO_Init+0x240>
 8003b2a:	2307      	movs	r3, #7
 8003b2c:	e00c      	b.n	8003b48 <HAL_GPIO_Init+0x240>
 8003b2e:	2306      	movs	r3, #6
 8003b30:	e00a      	b.n	8003b48 <HAL_GPIO_Init+0x240>
 8003b32:	2305      	movs	r3, #5
 8003b34:	e008      	b.n	8003b48 <HAL_GPIO_Init+0x240>
 8003b36:	2304      	movs	r3, #4
 8003b38:	e006      	b.n	8003b48 <HAL_GPIO_Init+0x240>
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e004      	b.n	8003b48 <HAL_GPIO_Init+0x240>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e002      	b.n	8003b48 <HAL_GPIO_Init+0x240>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <HAL_GPIO_Init+0x240>
 8003b46:	2300      	movs	r3, #0
 8003b48:	69fa      	ldr	r2, [r7, #28]
 8003b4a:	f002 0203 	and.w	r2, r2, #3
 8003b4e:	0092      	lsls	r2, r2, #2
 8003b50:	4093      	lsls	r3, r2
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b58:	4935      	ldr	r1, [pc, #212]	; (8003c30 <HAL_GPIO_Init+0x328>)
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	089b      	lsrs	r3, r3, #2
 8003b5e:	3302      	adds	r3, #2
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b66:	4b3d      	ldr	r3, [pc, #244]	; (8003c5c <HAL_GPIO_Init+0x354>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4013      	ands	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b8a:	4a34      	ldr	r2, [pc, #208]	; (8003c5c <HAL_GPIO_Init+0x354>)
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b90:	4b32      	ldr	r3, [pc, #200]	; (8003c5c <HAL_GPIO_Init+0x354>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bb4:	4a29      	ldr	r2, [pc, #164]	; (8003c5c <HAL_GPIO_Init+0x354>)
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bba:	4b28      	ldr	r3, [pc, #160]	; (8003c5c <HAL_GPIO_Init+0x354>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bde:	4a1f      	ldr	r2, [pc, #124]	; (8003c5c <HAL_GPIO_Init+0x354>)
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003be4:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <HAL_GPIO_Init+0x354>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c08:	4a14      	ldr	r2, [pc, #80]	; (8003c5c <HAL_GPIO_Init+0x354>)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	3301      	adds	r3, #1
 8003c12:	61fb      	str	r3, [r7, #28]
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	2b0f      	cmp	r3, #15
 8003c18:	f67f ae84 	bls.w	8003924 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c1c:	bf00      	nop
 8003c1e:	bf00      	nop
 8003c20:	3724      	adds	r7, #36	; 0x24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	40013800 	.word	0x40013800
 8003c34:	40020000 	.word	0x40020000
 8003c38:	40020400 	.word	0x40020400
 8003c3c:	40020800 	.word	0x40020800
 8003c40:	40020c00 	.word	0x40020c00
 8003c44:	40021000 	.word	0x40021000
 8003c48:	40021400 	.word	0x40021400
 8003c4c:	40021800 	.word	0x40021800
 8003c50:	40021c00 	.word	0x40021c00
 8003c54:	40022000 	.word	0x40022000
 8003c58:	40022400 	.word	0x40022400
 8003c5c:	40013c00 	.word	0x40013c00

08003c60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	887b      	ldrh	r3, [r7, #2]
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	73fb      	strb	r3, [r7, #15]
 8003c7c:	e001      	b.n	8003c82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	807b      	strh	r3, [r7, #2]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ca0:	787b      	ldrb	r3, [r7, #1]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ca6:	887a      	ldrh	r2, [r7, #2]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cac:	e003      	b.n	8003cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cae:	887b      	ldrh	r3, [r7, #2]
 8003cb0:	041a      	lsls	r2, r3, #16
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	619a      	str	r2, [r3, #24]
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b085      	sub	sp, #20
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	460b      	mov	r3, r1
 8003ccc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cd4:	887a      	ldrh	r2, [r7, #2]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	041a      	lsls	r2, r3, #16
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	43d9      	mvns	r1, r3
 8003ce0:	887b      	ldrh	r3, [r7, #2]
 8003ce2:	400b      	ands	r3, r1
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	619a      	str	r2, [r3, #24]
}
 8003cea:	bf00      	nop
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
	...

08003cf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e12b      	b.n	8003f62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fe fbd8 	bl	80024d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2224      	movs	r2, #36	; 0x24
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0201 	bic.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d5c:	f001 fc72 	bl	8005644 <HAL_RCC_GetPCLK1Freq>
 8003d60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	4a81      	ldr	r2, [pc, #516]	; (8003f6c <HAL_I2C_Init+0x274>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d807      	bhi.n	8003d7c <HAL_I2C_Init+0x84>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4a80      	ldr	r2, [pc, #512]	; (8003f70 <HAL_I2C_Init+0x278>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	bf94      	ite	ls
 8003d74:	2301      	movls	r3, #1
 8003d76:	2300      	movhi	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	e006      	b.n	8003d8a <HAL_I2C_Init+0x92>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4a7d      	ldr	r2, [pc, #500]	; (8003f74 <HAL_I2C_Init+0x27c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	bf94      	ite	ls
 8003d84:	2301      	movls	r3, #1
 8003d86:	2300      	movhi	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e0e7      	b.n	8003f62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4a78      	ldr	r2, [pc, #480]	; (8003f78 <HAL_I2C_Init+0x280>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	0c9b      	lsrs	r3, r3, #18
 8003d9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	4a6a      	ldr	r2, [pc, #424]	; (8003f6c <HAL_I2C_Init+0x274>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d802      	bhi.n	8003dcc <HAL_I2C_Init+0xd4>
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	e009      	b.n	8003de0 <HAL_I2C_Init+0xe8>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003dd2:	fb02 f303 	mul.w	r3, r2, r3
 8003dd6:	4a69      	ldr	r2, [pc, #420]	; (8003f7c <HAL_I2C_Init+0x284>)
 8003dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ddc:	099b      	lsrs	r3, r3, #6
 8003dde:	3301      	adds	r3, #1
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	430b      	orrs	r3, r1
 8003de6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003df2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	495c      	ldr	r1, [pc, #368]	; (8003f6c <HAL_I2C_Init+0x274>)
 8003dfc:	428b      	cmp	r3, r1
 8003dfe:	d819      	bhi.n	8003e34 <HAL_I2C_Init+0x13c>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	1e59      	subs	r1, r3, #1
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e0e:	1c59      	adds	r1, r3, #1
 8003e10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e14:	400b      	ands	r3, r1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_I2C_Init+0x138>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	1e59      	subs	r1, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e28:	3301      	adds	r3, #1
 8003e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e2e:	e051      	b.n	8003ed4 <HAL_I2C_Init+0x1dc>
 8003e30:	2304      	movs	r3, #4
 8003e32:	e04f      	b.n	8003ed4 <HAL_I2C_Init+0x1dc>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d111      	bne.n	8003e60 <HAL_I2C_Init+0x168>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	1e58      	subs	r0, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6859      	ldr	r1, [r3, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	440b      	add	r3, r1
 8003e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e4e:	3301      	adds	r3, #1
 8003e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	bf0c      	ite	eq
 8003e58:	2301      	moveq	r3, #1
 8003e5a:	2300      	movne	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	e012      	b.n	8003e86 <HAL_I2C_Init+0x18e>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	1e58      	subs	r0, r3, #1
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6859      	ldr	r1, [r3, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	0099      	lsls	r1, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e76:	3301      	adds	r3, #1
 8003e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf0c      	ite	eq
 8003e80:	2301      	moveq	r3, #1
 8003e82:	2300      	movne	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_I2C_Init+0x196>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e022      	b.n	8003ed4 <HAL_I2C_Init+0x1dc>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10e      	bne.n	8003eb4 <HAL_I2C_Init+0x1bc>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1e58      	subs	r0, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6859      	ldr	r1, [r3, #4]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	440b      	add	r3, r1
 8003ea4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb2:	e00f      	b.n	8003ed4 <HAL_I2C_Init+0x1dc>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	1e58      	subs	r0, r3, #1
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6859      	ldr	r1, [r3, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	0099      	lsls	r1, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eca:	3301      	adds	r3, #1
 8003ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	6809      	ldr	r1, [r1, #0]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69da      	ldr	r2, [r3, #28]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6911      	ldr	r1, [r2, #16]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	68d2      	ldr	r2, [r2, #12]
 8003f0e:	4311      	orrs	r1, r2
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	430b      	orrs	r3, r1
 8003f16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695a      	ldr	r2, [r3, #20]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	000186a0 	.word	0x000186a0
 8003f70:	001e847f 	.word	0x001e847f
 8003f74:	003d08ff 	.word	0x003d08ff
 8003f78:	431bde83 	.word	0x431bde83
 8003f7c:	10624dd3 	.word	0x10624dd3

08003f80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	607a      	str	r2, [r7, #4]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	817b      	strh	r3, [r7, #10]
 8003f90:	4613      	mov	r3, r2
 8003f92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f94:	f7fe fe78 	bl	8002c88 <HAL_GetTick>
 8003f98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	f040 80e0 	bne.w	8004168 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	2319      	movs	r3, #25
 8003fae:	2201      	movs	r2, #1
 8003fb0:	4970      	ldr	r1, [pc, #448]	; (8004174 <HAL_I2C_Master_Transmit+0x1f4>)
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 fc64 	bl	8004880 <I2C_WaitOnFlagUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e0d3      	b.n	800416a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_I2C_Master_Transmit+0x50>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e0cc      	b.n	800416a <HAL_I2C_Master_Transmit+0x1ea>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d007      	beq.n	8003ff6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 0201 	orr.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004004:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2221      	movs	r2, #33	; 0x21
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2210      	movs	r2, #16
 8004012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	893a      	ldrh	r2, [r7, #8]
 8004026:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4a50      	ldr	r2, [pc, #320]	; (8004178 <HAL_I2C_Master_Transmit+0x1f8>)
 8004036:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004038:	8979      	ldrh	r1, [r7, #10]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	6a3a      	ldr	r2, [r7, #32]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 face 	bl	80045e0 <I2C_MasterRequestWrite>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e08d      	b.n	800416a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800404e:	2300      	movs	r3, #0
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004064:	e066      	b.n	8004134 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	6a39      	ldr	r1, [r7, #32]
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 fd22 	bl	8004ab4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00d      	beq.n	8004092 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	2b04      	cmp	r3, #4
 800407c:	d107      	bne.n	800408e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800408c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e06b      	b.n	800416a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	781a      	ldrb	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d11b      	bne.n	8004108 <HAL_I2C_Master_Transmit+0x188>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d017      	beq.n	8004108 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	781a      	ldrb	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	6a39      	ldr	r1, [r7, #32]
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 fd19 	bl	8004b44 <I2C_WaitOnBTFFlagUntilTimeout>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00d      	beq.n	8004134 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	2b04      	cmp	r3, #4
 800411e:	d107      	bne.n	8004130 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e01a      	b.n	800416a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004138:	2b00      	cmp	r3, #0
 800413a:	d194      	bne.n	8004066 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004164:	2300      	movs	r3, #0
 8004166:	e000      	b.n	800416a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004168:	2302      	movs	r3, #2
  }
}
 800416a:	4618      	mov	r0, r3
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	00100002 	.word	0x00100002
 8004178:	ffff0000 	.word	0xffff0000

0800417c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08c      	sub	sp, #48	; 0x30
 8004180:	af02      	add	r7, sp, #8
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	607a      	str	r2, [r7, #4]
 8004186:	461a      	mov	r2, r3
 8004188:	460b      	mov	r3, r1
 800418a:	817b      	strh	r3, [r7, #10]
 800418c:	4613      	mov	r3, r2
 800418e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004190:	f7fe fd7a 	bl	8002c88 <HAL_GetTick>
 8004194:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b20      	cmp	r3, #32
 80041a0:	f040 8217 	bne.w	80045d2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	2319      	movs	r3, #25
 80041aa:	2201      	movs	r2, #1
 80041ac:	497c      	ldr	r1, [pc, #496]	; (80043a0 <HAL_I2C_Master_Receive+0x224>)
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 fb66 	bl	8004880 <I2C_WaitOnFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80041ba:	2302      	movs	r3, #2
 80041bc:	e20a      	b.n	80045d4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_I2C_Master_Receive+0x50>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e203      	b.n	80045d4 <HAL_I2C_Master_Receive+0x458>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d007      	beq.n	80041f2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f042 0201 	orr.w	r2, r2, #1
 80041f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004200:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2222      	movs	r2, #34	; 0x22
 8004206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2210      	movs	r2, #16
 800420e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	893a      	ldrh	r2, [r7, #8]
 8004222:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4a5c      	ldr	r2, [pc, #368]	; (80043a4 <HAL_I2C_Master_Receive+0x228>)
 8004232:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004234:	8979      	ldrh	r1, [r7, #10]
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 fa52 	bl	80046e4 <I2C_MasterRequestRead>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e1c4      	b.n	80045d4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424e:	2b00      	cmp	r3, #0
 8004250:	d113      	bne.n	800427a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004252:	2300      	movs	r3, #0
 8004254:	623b      	str	r3, [r7, #32]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	623b      	str	r3, [r7, #32]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	623b      	str	r3, [r7, #32]
 8004266:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	e198      	b.n	80045ac <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427e:	2b01      	cmp	r3, #1
 8004280:	d11b      	bne.n	80042ba <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004290:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004292:	2300      	movs	r3, #0
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	61fb      	str	r3, [r7, #28]
 80042a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	e178      	b.n	80045ac <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d11b      	bne.n	80042fa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e2:	2300      	movs	r3, #0
 80042e4:	61bb      	str	r3, [r7, #24]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	61bb      	str	r3, [r7, #24]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	61bb      	str	r3, [r7, #24]
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	e158      	b.n	80045ac <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004308:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800430a:	2300      	movs	r3, #0
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004320:	e144      	b.n	80045ac <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004326:	2b03      	cmp	r3, #3
 8004328:	f200 80f1 	bhi.w	800450e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004330:	2b01      	cmp	r3, #1
 8004332:	d123      	bne.n	800437c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004336:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 fc4b 	bl	8004bd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e145      	b.n	80045d4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691a      	ldr	r2, [r3, #16]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	855a      	strh	r2, [r3, #42]	; 0x2a
 800437a:	e117      	b.n	80045ac <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004380:	2b02      	cmp	r3, #2
 8004382:	d14e      	bne.n	8004422 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	2200      	movs	r2, #0
 800438c:	4906      	ldr	r1, [pc, #24]	; (80043a8 <HAL_I2C_Master_Receive+0x22c>)
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 fa76 	bl	8004880 <I2C_WaitOnFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d008      	beq.n	80043ac <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e11a      	b.n	80045d4 <HAL_I2C_Master_Receive+0x458>
 800439e:	bf00      	nop
 80043a0:	00100002 	.word	0x00100002
 80043a4:	ffff0000 	.word	0xffff0000
 80043a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004420:	e0c4      	b.n	80045ac <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	2200      	movs	r2, #0
 800442a:	496c      	ldr	r1, [pc, #432]	; (80045dc <HAL_I2C_Master_Receive+0x460>)
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 fa27 	bl	8004880 <I2C_WaitOnFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0cb      	b.n	80045d4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800444a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691a      	ldr	r2, [r3, #16]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004474:	b29b      	uxth	r3, r3
 8004476:	3b01      	subs	r3, #1
 8004478:	b29a      	uxth	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	2200      	movs	r2, #0
 8004486:	4955      	ldr	r1, [pc, #340]	; (80045dc <HAL_I2C_Master_Receive+0x460>)
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f9f9 	bl	8004880 <I2C_WaitOnFlagUntilTimeout>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e09d      	b.n	80045d4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691a      	ldr	r2, [r3, #16]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	b2d2      	uxtb	r2, r2
 80044b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	3b01      	subs	r3, #1
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	691a      	ldr	r2, [r3, #16]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800450c:	e04e      	b.n	80045ac <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800450e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004510:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 fb5e 	bl	8004bd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e058      	b.n	80045d4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454a:	b29b      	uxth	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b04      	cmp	r3, #4
 8004560:	d124      	bne.n	80045ac <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004566:	2b03      	cmp	r3, #3
 8004568:	d107      	bne.n	800457a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004578:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	691a      	ldr	r2, [r3, #16]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004596:	3b01      	subs	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f47f aeb6 	bne.w	8004322 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	e000      	b.n	80045d4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80045d2:	2302      	movs	r3, #2
  }
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3728      	adds	r7, #40	; 0x28
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	00010004 	.word	0x00010004

080045e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	607a      	str	r2, [r7, #4]
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	460b      	mov	r3, r1
 80045ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d006      	beq.n	800460a <I2C_MasterRequestWrite+0x2a>
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d003      	beq.n	800460a <I2C_MasterRequestWrite+0x2a>
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004608:	d108      	bne.n	800461c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	e00b      	b.n	8004634 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004620:	2b12      	cmp	r3, #18
 8004622:	d107      	bne.n	8004634 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004632:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 f91d 	bl	8004880 <I2C_WaitOnFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00d      	beq.n	8004668 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800465a:	d103      	bne.n	8004664 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004662:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e035      	b.n	80046d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004670:	d108      	bne.n	8004684 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004672:	897b      	ldrh	r3, [r7, #10]
 8004674:	b2db      	uxtb	r3, r3
 8004676:	461a      	mov	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004680:	611a      	str	r2, [r3, #16]
 8004682:	e01b      	b.n	80046bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004684:	897b      	ldrh	r3, [r7, #10]
 8004686:	11db      	asrs	r3, r3, #7
 8004688:	b2db      	uxtb	r3, r3
 800468a:	f003 0306 	and.w	r3, r3, #6
 800468e:	b2db      	uxtb	r3, r3
 8004690:	f063 030f 	orn	r3, r3, #15
 8004694:	b2da      	uxtb	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	490e      	ldr	r1, [pc, #56]	; (80046dc <I2C_MasterRequestWrite+0xfc>)
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 f966 	bl	8004974 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e010      	b.n	80046d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80046b2:	897b      	ldrh	r3, [r7, #10]
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	4907      	ldr	r1, [pc, #28]	; (80046e0 <I2C_MasterRequestWrite+0x100>)
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 f956 	bl	8004974 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	00010008 	.word	0x00010008
 80046e0:	00010002 	.word	0x00010002

080046e4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	607a      	str	r2, [r7, #4]
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	460b      	mov	r3, r1
 80046f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004708:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2b08      	cmp	r3, #8
 800470e:	d006      	beq.n	800471e <I2C_MasterRequestRead+0x3a>
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d003      	beq.n	800471e <I2C_MasterRequestRead+0x3a>
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800471c:	d108      	bne.n	8004730 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	e00b      	b.n	8004748 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004734:	2b11      	cmp	r3, #17
 8004736:	d107      	bne.n	8004748 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004746:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f893 	bl	8004880 <I2C_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00d      	beq.n	800477c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800476e:	d103      	bne.n	8004778 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004776:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e079      	b.n	8004870 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004784:	d108      	bne.n	8004798 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004786:	897b      	ldrh	r3, [r7, #10]
 8004788:	b2db      	uxtb	r3, r3
 800478a:	f043 0301 	orr.w	r3, r3, #1
 800478e:	b2da      	uxtb	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	611a      	str	r2, [r3, #16]
 8004796:	e05f      	b.n	8004858 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004798:	897b      	ldrh	r3, [r7, #10]
 800479a:	11db      	asrs	r3, r3, #7
 800479c:	b2db      	uxtb	r3, r3
 800479e:	f003 0306 	and.w	r3, r3, #6
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	f063 030f 	orn	r3, r3, #15
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	4930      	ldr	r1, [pc, #192]	; (8004878 <I2C_MasterRequestRead+0x194>)
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 f8dc 	bl	8004974 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e054      	b.n	8004870 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047c6:	897b      	ldrh	r3, [r7, #10]
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	4929      	ldr	r1, [pc, #164]	; (800487c <I2C_MasterRequestRead+0x198>)
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 f8cc 	bl	8004974 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e044      	b.n	8004870 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047e6:	2300      	movs	r3, #0
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	613b      	str	r3, [r7, #16]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	613b      	str	r3, [r7, #16]
 80047fa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800480a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 f831 	bl	8004880 <I2C_WaitOnFlagUntilTimeout>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00d      	beq.n	8004840 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004832:	d103      	bne.n	800483c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800483a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e017      	b.n	8004870 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004840:	897b      	ldrh	r3, [r7, #10]
 8004842:	11db      	asrs	r3, r3, #7
 8004844:	b2db      	uxtb	r3, r3
 8004846:	f003 0306 	and.w	r3, r3, #6
 800484a:	b2db      	uxtb	r3, r3
 800484c:	f063 030e 	orn	r3, r3, #14
 8004850:	b2da      	uxtb	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	4907      	ldr	r1, [pc, #28]	; (800487c <I2C_MasterRequestRead+0x198>)
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 f888 	bl	8004974 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3718      	adds	r7, #24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	00010008 	.word	0x00010008
 800487c:	00010002 	.word	0x00010002

08004880 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	603b      	str	r3, [r7, #0]
 800488c:	4613      	mov	r3, r2
 800488e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004890:	e048      	b.n	8004924 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004898:	d044      	beq.n	8004924 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489a:	f7fe f9f5 	bl	8002c88 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d302      	bcc.n	80048b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d139      	bne.n	8004924 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	0c1b      	lsrs	r3, r3, #16
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d10d      	bne.n	80048d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	43da      	mvns	r2, r3
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	4013      	ands	r3, r2
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	bf0c      	ite	eq
 80048cc:	2301      	moveq	r3, #1
 80048ce:	2300      	movne	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	461a      	mov	r2, r3
 80048d4:	e00c      	b.n	80048f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	43da      	mvns	r2, r3
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	4013      	ands	r3, r2
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	bf0c      	ite	eq
 80048e8:	2301      	moveq	r3, #1
 80048ea:	2300      	movne	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	461a      	mov	r2, r3
 80048f0:	79fb      	ldrb	r3, [r7, #7]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d116      	bne.n	8004924 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	f043 0220 	orr.w	r2, r3, #32
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e023      	b.n	800496c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	0c1b      	lsrs	r3, r3, #16
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b01      	cmp	r3, #1
 800492c:	d10d      	bne.n	800494a <I2C_WaitOnFlagUntilTimeout+0xca>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	43da      	mvns	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	4013      	ands	r3, r2
 800493a:	b29b      	uxth	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	bf0c      	ite	eq
 8004940:	2301      	moveq	r3, #1
 8004942:	2300      	movne	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	461a      	mov	r2, r3
 8004948:	e00c      	b.n	8004964 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	43da      	mvns	r2, r3
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	4013      	ands	r3, r2
 8004956:	b29b      	uxth	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	bf0c      	ite	eq
 800495c:	2301      	moveq	r3, #1
 800495e:	2300      	movne	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	461a      	mov	r2, r3
 8004964:	79fb      	ldrb	r3, [r7, #7]
 8004966:	429a      	cmp	r2, r3
 8004968:	d093      	beq.n	8004892 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004982:	e071      	b.n	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800498e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004992:	d123      	bne.n	80049dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	f043 0204 	orr.w	r2, r3, #4
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e067      	b.n	8004aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049e2:	d041      	beq.n	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e4:	f7fe f950 	bl	8002c88 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d302      	bcc.n	80049fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d136      	bne.n	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	0c1b      	lsrs	r3, r3, #16
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d10c      	bne.n	8004a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	43da      	mvns	r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	bf14      	ite	ne
 8004a16:	2301      	movne	r3, #1
 8004a18:	2300      	moveq	r3, #0
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	e00b      	b.n	8004a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	43da      	mvns	r2, r3
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	bf14      	ite	ne
 8004a30:	2301      	movne	r3, #1
 8004a32:	2300      	moveq	r3, #0
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d016      	beq.n	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	f043 0220 	orr.w	r2, r3, #32
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e021      	b.n	8004aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	0c1b      	lsrs	r3, r3, #16
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d10c      	bne.n	8004a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	43da      	mvns	r2, r3
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	bf14      	ite	ne
 8004a84:	2301      	movne	r3, #1
 8004a86:	2300      	moveq	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	e00b      	b.n	8004aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	43da      	mvns	r2, r3
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	4013      	ands	r3, r2
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bf14      	ite	ne
 8004a9e:	2301      	movne	r3, #1
 8004aa0:	2300      	moveq	r3, #0
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f47f af6d 	bne.w	8004984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ac0:	e034      	b.n	8004b2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 f8e3 	bl	8004c8e <I2C_IsAcknowledgeFailed>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e034      	b.n	8004b3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ad8:	d028      	beq.n	8004b2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ada:	f7fe f8d5 	bl	8002c88 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d302      	bcc.n	8004af0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d11d      	bne.n	8004b2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afa:	2b80      	cmp	r3, #128	; 0x80
 8004afc:	d016      	beq.n	8004b2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b18:	f043 0220 	orr.w	r2, r3, #32
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e007      	b.n	8004b3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b36:	2b80      	cmp	r3, #128	; 0x80
 8004b38:	d1c3      	bne.n	8004ac2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b50:	e034      	b.n	8004bbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 f89b 	bl	8004c8e <I2C_IsAcknowledgeFailed>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e034      	b.n	8004bcc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b68:	d028      	beq.n	8004bbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6a:	f7fe f88d 	bl	8002c88 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d302      	bcc.n	8004b80 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d11d      	bne.n	8004bbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d016      	beq.n	8004bbc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	f043 0220 	orr.w	r2, r3, #32
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e007      	b.n	8004bcc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	f003 0304 	and.w	r3, r3, #4
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d1c3      	bne.n	8004b52 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004be0:	e049      	b.n	8004c76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	f003 0310 	and.w	r3, r3, #16
 8004bec:	2b10      	cmp	r3, #16
 8004bee:	d119      	bne.n	8004c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f06f 0210 	mvn.w	r2, #16
 8004bf8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e030      	b.n	8004c86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c24:	f7fe f830 	bl	8002c88 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d302      	bcc.n	8004c3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d11d      	bne.n	8004c76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c44:	2b40      	cmp	r3, #64	; 0x40
 8004c46:	d016      	beq.n	8004c76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2220      	movs	r2, #32
 8004c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	f043 0220 	orr.w	r2, r3, #32
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e007      	b.n	8004c86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c80:	2b40      	cmp	r3, #64	; 0x40
 8004c82:	d1ae      	bne.n	8004be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca4:	d11b      	bne.n	8004cde <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	f043 0204 	orr.w	r2, r3, #4
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	d129      	bne.n	8004d56 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2224      	movs	r2, #36	; 0x24
 8004d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0201 	bic.w	r2, r2, #1
 8004d18:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0210 	bic.w	r2, r2, #16
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f042 0201 	orr.w	r2, r2, #1
 8004d48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	e000      	b.n	8004d58 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004d56:	2302      	movs	r3, #2
  }
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b20      	cmp	r3, #32
 8004d7c:	d12a      	bne.n	8004dd4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2224      	movs	r2, #36	; 0x24
 8004d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0201 	bic.w	r2, r2, #1
 8004d94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004d9e:	89fb      	ldrh	r3, [r7, #14]
 8004da0:	f023 030f 	bic.w	r3, r3, #15
 8004da4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	89fb      	ldrh	r3, [r7, #14]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	89fa      	ldrh	r2, [r7, #14]
 8004db6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	e000      	b.n	8004dd6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004dd4:	2302      	movs	r3, #2
  }
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e267      	b.n	80052c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d075      	beq.n	8004eee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e02:	4b88      	ldr	r3, [pc, #544]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 030c 	and.w	r3, r3, #12
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d00c      	beq.n	8004e28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e0e:	4b85      	ldr	r3, [pc, #532]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d112      	bne.n	8004e40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e1a:	4b82      	ldr	r3, [pc, #520]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e26:	d10b      	bne.n	8004e40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e28:	4b7e      	ldr	r3, [pc, #504]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d05b      	beq.n	8004eec <HAL_RCC_OscConfig+0x108>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d157      	bne.n	8004eec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e242      	b.n	80052c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e48:	d106      	bne.n	8004e58 <HAL_RCC_OscConfig+0x74>
 8004e4a:	4b76      	ldr	r3, [pc, #472]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a75      	ldr	r2, [pc, #468]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	e01d      	b.n	8004e94 <HAL_RCC_OscConfig+0xb0>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e60:	d10c      	bne.n	8004e7c <HAL_RCC_OscConfig+0x98>
 8004e62:	4b70      	ldr	r3, [pc, #448]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a6f      	ldr	r2, [pc, #444]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	4b6d      	ldr	r3, [pc, #436]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a6c      	ldr	r2, [pc, #432]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	e00b      	b.n	8004e94 <HAL_RCC_OscConfig+0xb0>
 8004e7c:	4b69      	ldr	r3, [pc, #420]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a68      	ldr	r2, [pc, #416]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	4b66      	ldr	r3, [pc, #408]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a65      	ldr	r2, [pc, #404]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d013      	beq.n	8004ec4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9c:	f7fd fef4 	bl	8002c88 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ea4:	f7fd fef0 	bl	8002c88 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b64      	cmp	r3, #100	; 0x64
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e207      	b.n	80052c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb6:	4b5b      	ldr	r3, [pc, #364]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0f0      	beq.n	8004ea4 <HAL_RCC_OscConfig+0xc0>
 8004ec2:	e014      	b.n	8004eee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec4:	f7fd fee0 	bl	8002c88 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ecc:	f7fd fedc 	bl	8002c88 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b64      	cmp	r3, #100	; 0x64
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e1f3      	b.n	80052c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ede:	4b51      	ldr	r3, [pc, #324]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f0      	bne.n	8004ecc <HAL_RCC_OscConfig+0xe8>
 8004eea:	e000      	b.n	8004eee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d063      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004efa:	4b4a      	ldr	r3, [pc, #296]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 030c 	and.w	r3, r3, #12
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00b      	beq.n	8004f1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f06:	4b47      	ldr	r3, [pc, #284]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f0e:	2b08      	cmp	r3, #8
 8004f10:	d11c      	bne.n	8004f4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f12:	4b44      	ldr	r3, [pc, #272]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d116      	bne.n	8004f4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f1e:	4b41      	ldr	r3, [pc, #260]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d005      	beq.n	8004f36 <HAL_RCC_OscConfig+0x152>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d001      	beq.n	8004f36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e1c7      	b.n	80052c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f36:	4b3b      	ldr	r3, [pc, #236]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	4937      	ldr	r1, [pc, #220]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f4a:	e03a      	b.n	8004fc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d020      	beq.n	8004f96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f54:	4b34      	ldr	r3, [pc, #208]	; (8005028 <HAL_RCC_OscConfig+0x244>)
 8004f56:	2201      	movs	r2, #1
 8004f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5a:	f7fd fe95 	bl	8002c88 <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f62:	f7fd fe91 	bl	8002c88 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e1a8      	b.n	80052c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f74:	4b2b      	ldr	r3, [pc, #172]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0f0      	beq.n	8004f62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f80:	4b28      	ldr	r3, [pc, #160]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	4925      	ldr	r1, [pc, #148]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	600b      	str	r3, [r1, #0]
 8004f94:	e015      	b.n	8004fc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f96:	4b24      	ldr	r3, [pc, #144]	; (8005028 <HAL_RCC_OscConfig+0x244>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9c:	f7fd fe74 	bl	8002c88 <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fa4:	f7fd fe70 	bl	8002c88 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e187      	b.n	80052c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fb6:	4b1b      	ldr	r3, [pc, #108]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f0      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0308 	and.w	r3, r3, #8
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d036      	beq.n	800503c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d016      	beq.n	8005004 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fd6:	4b15      	ldr	r3, [pc, #84]	; (800502c <HAL_RCC_OscConfig+0x248>)
 8004fd8:	2201      	movs	r2, #1
 8004fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fdc:	f7fd fe54 	bl	8002c88 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fe4:	f7fd fe50 	bl	8002c88 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e167      	b.n	80052c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ff6:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <HAL_RCC_OscConfig+0x240>)
 8004ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x200>
 8005002:	e01b      	b.n	800503c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005004:	4b09      	ldr	r3, [pc, #36]	; (800502c <HAL_RCC_OscConfig+0x248>)
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800500a:	f7fd fe3d 	bl	8002c88 <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005010:	e00e      	b.n	8005030 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005012:	f7fd fe39 	bl	8002c88 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d907      	bls.n	8005030 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e150      	b.n	80052c6 <HAL_RCC_OscConfig+0x4e2>
 8005024:	40023800 	.word	0x40023800
 8005028:	42470000 	.word	0x42470000
 800502c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005030:	4b88      	ldr	r3, [pc, #544]	; (8005254 <HAL_RCC_OscConfig+0x470>)
 8005032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1ea      	bne.n	8005012 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 8097 	beq.w	8005178 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800504a:	2300      	movs	r3, #0
 800504c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800504e:	4b81      	ldr	r3, [pc, #516]	; (8005254 <HAL_RCC_OscConfig+0x470>)
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10f      	bne.n	800507a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800505a:	2300      	movs	r3, #0
 800505c:	60bb      	str	r3, [r7, #8]
 800505e:	4b7d      	ldr	r3, [pc, #500]	; (8005254 <HAL_RCC_OscConfig+0x470>)
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	4a7c      	ldr	r2, [pc, #496]	; (8005254 <HAL_RCC_OscConfig+0x470>)
 8005064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005068:	6413      	str	r3, [r2, #64]	; 0x40
 800506a:	4b7a      	ldr	r3, [pc, #488]	; (8005254 <HAL_RCC_OscConfig+0x470>)
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005072:	60bb      	str	r3, [r7, #8]
 8005074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005076:	2301      	movs	r3, #1
 8005078:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800507a:	4b77      	ldr	r3, [pc, #476]	; (8005258 <HAL_RCC_OscConfig+0x474>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005082:	2b00      	cmp	r3, #0
 8005084:	d118      	bne.n	80050b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005086:	4b74      	ldr	r3, [pc, #464]	; (8005258 <HAL_RCC_OscConfig+0x474>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a73      	ldr	r2, [pc, #460]	; (8005258 <HAL_RCC_OscConfig+0x474>)
 800508c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005092:	f7fd fdf9 	bl	8002c88 <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005098:	e008      	b.n	80050ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800509a:	f7fd fdf5 	bl	8002c88 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e10c      	b.n	80052c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ac:	4b6a      	ldr	r3, [pc, #424]	; (8005258 <HAL_RCC_OscConfig+0x474>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0f0      	beq.n	800509a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d106      	bne.n	80050ce <HAL_RCC_OscConfig+0x2ea>
 80050c0:	4b64      	ldr	r3, [pc, #400]	; (8005254 <HAL_RCC_OscConfig+0x470>)
 80050c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c4:	4a63      	ldr	r2, [pc, #396]	; (8005254 <HAL_RCC_OscConfig+0x470>)
 80050c6:	f043 0301 	orr.w	r3, r3, #1
 80050ca:	6713      	str	r3, [r2, #112]	; 0x70
 80050cc:	e01c      	b.n	8005108 <HAL_RCC_OscConfig+0x324>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	2b05      	cmp	r3, #5
 80050d4:	d10c      	bne.n	80050f0 <HAL_RCC_OscConfig+0x30c>
 80050d6:	4b5f      	ldr	r3, [pc, #380]	; (8005254 <HAL_RCC_OscConfig+0x470>)
 80050d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050da:	4a5e      	ldr	r2, [pc, #376]	; (8005254 <HAL_RCC_OscConfig+0x470>)
 80050dc:	f043 0304 	orr.w	r3, r3, #4
 80050e0:	6713      	str	r3, [r2, #112]	; 0x70
 80050e2:	4b5c      	ldr	r3, [pc, #368]	; (8005254 <HAL_RCC_OscConfig+0x470>)
 80050e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e6:	4a5b      	ldr	r2, [pc, #364]	; (8005254 <HAL_RCC_OscConfig+0x470>)
 80050e8:	f043 0301 	orr.w	r3, r3, #1
 80050ec:	6713      	str	r3, [r2, #112]	; 0x70
 80050ee:	e00b      	b.n	8005108 <HAL_RCC_OscConfig+0x324>
 80050f0:	4b58      	ldr	r3, [pc, #352]	; (8005254 <HAL_RCC_OscConfig+0x470>)
 80050f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f4:	4a57      	ldr	r2, [pc, #348]	; (8005254 <HAL_RCC_OscConfig+0x470>)
 80050f6:	f023 0301 	bic.w	r3, r3, #1
 80050fa:	6713      	str	r3, [r2, #112]	; 0x70
 80050fc:	4b55      	ldr	r3, [pc, #340]	; (8005254 <HAL_RCC_OscConfig+0x470>)
 80050fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005100:	4a54      	ldr	r2, [pc, #336]	; (8005254 <HAL_RCC_OscConfig+0x470>)
 8005102:	f023 0304 	bic.w	r3, r3, #4
 8005106:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d015      	beq.n	800513c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005110:	f7fd fdba 	bl	8002c88 <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005116:	e00a      	b.n	800512e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005118:	f7fd fdb6 	bl	8002c88 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	f241 3288 	movw	r2, #5000	; 0x1388
 8005126:	4293      	cmp	r3, r2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e0cb      	b.n	80052c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800512e:	4b49      	ldr	r3, [pc, #292]	; (8005254 <HAL_RCC_OscConfig+0x470>)
 8005130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0ee      	beq.n	8005118 <HAL_RCC_OscConfig+0x334>
 800513a:	e014      	b.n	8005166 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800513c:	f7fd fda4 	bl	8002c88 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005142:	e00a      	b.n	800515a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005144:	f7fd fda0 	bl	8002c88 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005152:	4293      	cmp	r3, r2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e0b5      	b.n	80052c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800515a:	4b3e      	ldr	r3, [pc, #248]	; (8005254 <HAL_RCC_OscConfig+0x470>)
 800515c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1ee      	bne.n	8005144 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005166:	7dfb      	ldrb	r3, [r7, #23]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d105      	bne.n	8005178 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800516c:	4b39      	ldr	r3, [pc, #228]	; (8005254 <HAL_RCC_OscConfig+0x470>)
 800516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005170:	4a38      	ldr	r2, [pc, #224]	; (8005254 <HAL_RCC_OscConfig+0x470>)
 8005172:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005176:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 80a1 	beq.w	80052c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005182:	4b34      	ldr	r3, [pc, #208]	; (8005254 <HAL_RCC_OscConfig+0x470>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 030c 	and.w	r3, r3, #12
 800518a:	2b08      	cmp	r3, #8
 800518c:	d05c      	beq.n	8005248 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	2b02      	cmp	r3, #2
 8005194:	d141      	bne.n	800521a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005196:	4b31      	ldr	r3, [pc, #196]	; (800525c <HAL_RCC_OscConfig+0x478>)
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519c:	f7fd fd74 	bl	8002c88 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051a4:	f7fd fd70 	bl	8002c88 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e087      	b.n	80052c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051b6:	4b27      	ldr	r3, [pc, #156]	; (8005254 <HAL_RCC_OscConfig+0x470>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1f0      	bne.n	80051a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69da      	ldr	r2, [r3, #28]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	019b      	lsls	r3, r3, #6
 80051d2:	431a      	orrs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d8:	085b      	lsrs	r3, r3, #1
 80051da:	3b01      	subs	r3, #1
 80051dc:	041b      	lsls	r3, r3, #16
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e4:	061b      	lsls	r3, r3, #24
 80051e6:	491b      	ldr	r1, [pc, #108]	; (8005254 <HAL_RCC_OscConfig+0x470>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051ec:	4b1b      	ldr	r3, [pc, #108]	; (800525c <HAL_RCC_OscConfig+0x478>)
 80051ee:	2201      	movs	r2, #1
 80051f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f2:	f7fd fd49 	bl	8002c88 <HAL_GetTick>
 80051f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051f8:	e008      	b.n	800520c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051fa:	f7fd fd45 	bl	8002c88 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e05c      	b.n	80052c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800520c:	4b11      	ldr	r3, [pc, #68]	; (8005254 <HAL_RCC_OscConfig+0x470>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d0f0      	beq.n	80051fa <HAL_RCC_OscConfig+0x416>
 8005218:	e054      	b.n	80052c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800521a:	4b10      	ldr	r3, [pc, #64]	; (800525c <HAL_RCC_OscConfig+0x478>)
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005220:	f7fd fd32 	bl	8002c88 <HAL_GetTick>
 8005224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005228:	f7fd fd2e 	bl	8002c88 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e045      	b.n	80052c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800523a:	4b06      	ldr	r3, [pc, #24]	; (8005254 <HAL_RCC_OscConfig+0x470>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1f0      	bne.n	8005228 <HAL_RCC_OscConfig+0x444>
 8005246:	e03d      	b.n	80052c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d107      	bne.n	8005260 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e038      	b.n	80052c6 <HAL_RCC_OscConfig+0x4e2>
 8005254:	40023800 	.word	0x40023800
 8005258:	40007000 	.word	0x40007000
 800525c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005260:	4b1b      	ldr	r3, [pc, #108]	; (80052d0 <HAL_RCC_OscConfig+0x4ec>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d028      	beq.n	80052c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005278:	429a      	cmp	r2, r3
 800527a:	d121      	bne.n	80052c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005286:	429a      	cmp	r2, r3
 8005288:	d11a      	bne.n	80052c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005290:	4013      	ands	r3, r2
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005296:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005298:	4293      	cmp	r3, r2
 800529a:	d111      	bne.n	80052c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a6:	085b      	lsrs	r3, r3, #1
 80052a8:	3b01      	subs	r3, #1
 80052aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d107      	bne.n	80052c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052bc:	429a      	cmp	r2, r3
 80052be:	d001      	beq.n	80052c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e000      	b.n	80052c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	40023800 	.word	0x40023800

080052d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e0cc      	b.n	8005482 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052e8:	4b68      	ldr	r3, [pc, #416]	; (800548c <HAL_RCC_ClockConfig+0x1b8>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 030f 	and.w	r3, r3, #15
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d90c      	bls.n	8005310 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052f6:	4b65      	ldr	r3, [pc, #404]	; (800548c <HAL_RCC_ClockConfig+0x1b8>)
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	b2d2      	uxtb	r2, r2
 80052fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052fe:	4b63      	ldr	r3, [pc, #396]	; (800548c <HAL_RCC_ClockConfig+0x1b8>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d001      	beq.n	8005310 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e0b8      	b.n	8005482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d020      	beq.n	800535e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d005      	beq.n	8005334 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005328:	4b59      	ldr	r3, [pc, #356]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	4a58      	ldr	r2, [pc, #352]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 800532e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005332:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0308 	and.w	r3, r3, #8
 800533c:	2b00      	cmp	r3, #0
 800533e:	d005      	beq.n	800534c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005340:	4b53      	ldr	r3, [pc, #332]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	4a52      	ldr	r2, [pc, #328]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 8005346:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800534a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800534c:	4b50      	ldr	r3, [pc, #320]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	494d      	ldr	r1, [pc, #308]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 800535a:	4313      	orrs	r3, r2
 800535c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d044      	beq.n	80053f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d107      	bne.n	8005382 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005372:	4b47      	ldr	r3, [pc, #284]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d119      	bne.n	80053b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e07f      	b.n	8005482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2b02      	cmp	r3, #2
 8005388:	d003      	beq.n	8005392 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800538e:	2b03      	cmp	r3, #3
 8005390:	d107      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005392:	4b3f      	ldr	r3, [pc, #252]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d109      	bne.n	80053b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e06f      	b.n	8005482 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a2:	4b3b      	ldr	r3, [pc, #236]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e067      	b.n	8005482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053b2:	4b37      	ldr	r3, [pc, #220]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f023 0203 	bic.w	r2, r3, #3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	4934      	ldr	r1, [pc, #208]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053c4:	f7fd fc60 	bl	8002c88 <HAL_GetTick>
 80053c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ca:	e00a      	b.n	80053e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053cc:	f7fd fc5c 	bl	8002c88 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053da:	4293      	cmp	r3, r2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e04f      	b.n	8005482 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e2:	4b2b      	ldr	r3, [pc, #172]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 020c 	and.w	r2, r3, #12
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d1eb      	bne.n	80053cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053f4:	4b25      	ldr	r3, [pc, #148]	; (800548c <HAL_RCC_ClockConfig+0x1b8>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 030f 	and.w	r3, r3, #15
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d20c      	bcs.n	800541c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005402:	4b22      	ldr	r3, [pc, #136]	; (800548c <HAL_RCC_ClockConfig+0x1b8>)
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800540a:	4b20      	ldr	r3, [pc, #128]	; (800548c <HAL_RCC_ClockConfig+0x1b8>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 030f 	and.w	r3, r3, #15
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d001      	beq.n	800541c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e032      	b.n	8005482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b00      	cmp	r3, #0
 8005426:	d008      	beq.n	800543a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005428:	4b19      	ldr	r3, [pc, #100]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	4916      	ldr	r1, [pc, #88]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 8005436:	4313      	orrs	r3, r2
 8005438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0308 	and.w	r3, r3, #8
 8005442:	2b00      	cmp	r3, #0
 8005444:	d009      	beq.n	800545a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005446:	4b12      	ldr	r3, [pc, #72]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	490e      	ldr	r1, [pc, #56]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 8005456:	4313      	orrs	r3, r2
 8005458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800545a:	f000 f821 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 800545e:	4602      	mov	r2, r0
 8005460:	4b0b      	ldr	r3, [pc, #44]	; (8005490 <HAL_RCC_ClockConfig+0x1bc>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	091b      	lsrs	r3, r3, #4
 8005466:	f003 030f 	and.w	r3, r3, #15
 800546a:	490a      	ldr	r1, [pc, #40]	; (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 800546c:	5ccb      	ldrb	r3, [r1, r3]
 800546e:	fa22 f303 	lsr.w	r3, r2, r3
 8005472:	4a09      	ldr	r2, [pc, #36]	; (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 8005474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005476:	4b09      	ldr	r3, [pc, #36]	; (800549c <HAL_RCC_ClockConfig+0x1c8>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f7fd fbc0 	bl	8002c00 <HAL_InitTick>

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	40023c00 	.word	0x40023c00
 8005490:	40023800 	.word	0x40023800
 8005494:	08008658 	.word	0x08008658
 8005498:	2000001c 	.word	0x2000001c
 800549c:	20000020 	.word	0x20000020

080054a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054a4:	b090      	sub	sp, #64	; 0x40
 80054a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	637b      	str	r3, [r7, #52]	; 0x34
 80054ac:	2300      	movs	r3, #0
 80054ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054b0:	2300      	movs	r3, #0
 80054b2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054b8:	4b59      	ldr	r3, [pc, #356]	; (8005620 <HAL_RCC_GetSysClockFreq+0x180>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f003 030c 	and.w	r3, r3, #12
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d00d      	beq.n	80054e0 <HAL_RCC_GetSysClockFreq+0x40>
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	f200 80a1 	bhi.w	800560c <HAL_RCC_GetSysClockFreq+0x16c>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <HAL_RCC_GetSysClockFreq+0x34>
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d003      	beq.n	80054da <HAL_RCC_GetSysClockFreq+0x3a>
 80054d2:	e09b      	b.n	800560c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054d4:	4b53      	ldr	r3, [pc, #332]	; (8005624 <HAL_RCC_GetSysClockFreq+0x184>)
 80054d6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80054d8:	e09b      	b.n	8005612 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054da:	4b53      	ldr	r3, [pc, #332]	; (8005628 <HAL_RCC_GetSysClockFreq+0x188>)
 80054dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80054de:	e098      	b.n	8005612 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054e0:	4b4f      	ldr	r3, [pc, #316]	; (8005620 <HAL_RCC_GetSysClockFreq+0x180>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054e8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054ea:	4b4d      	ldr	r3, [pc, #308]	; (8005620 <HAL_RCC_GetSysClockFreq+0x180>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d028      	beq.n	8005548 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054f6:	4b4a      	ldr	r3, [pc, #296]	; (8005620 <HAL_RCC_GetSysClockFreq+0x180>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	099b      	lsrs	r3, r3, #6
 80054fc:	2200      	movs	r2, #0
 80054fe:	623b      	str	r3, [r7, #32]
 8005500:	627a      	str	r2, [r7, #36]	; 0x24
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005508:	2100      	movs	r1, #0
 800550a:	4b47      	ldr	r3, [pc, #284]	; (8005628 <HAL_RCC_GetSysClockFreq+0x188>)
 800550c:	fb03 f201 	mul.w	r2, r3, r1
 8005510:	2300      	movs	r3, #0
 8005512:	fb00 f303 	mul.w	r3, r0, r3
 8005516:	4413      	add	r3, r2
 8005518:	4a43      	ldr	r2, [pc, #268]	; (8005628 <HAL_RCC_GetSysClockFreq+0x188>)
 800551a:	fba0 1202 	umull	r1, r2, r0, r2
 800551e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005520:	460a      	mov	r2, r1
 8005522:	62ba      	str	r2, [r7, #40]	; 0x28
 8005524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005526:	4413      	add	r3, r2
 8005528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800552a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552c:	2200      	movs	r2, #0
 800552e:	61bb      	str	r3, [r7, #24]
 8005530:	61fa      	str	r2, [r7, #28]
 8005532:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005536:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800553a:	f7fa fe5f 	bl	80001fc <__aeabi_uldivmod>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	4613      	mov	r3, r2
 8005544:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005546:	e053      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005548:	4b35      	ldr	r3, [pc, #212]	; (8005620 <HAL_RCC_GetSysClockFreq+0x180>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	099b      	lsrs	r3, r3, #6
 800554e:	2200      	movs	r2, #0
 8005550:	613b      	str	r3, [r7, #16]
 8005552:	617a      	str	r2, [r7, #20]
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800555a:	f04f 0b00 	mov.w	fp, #0
 800555e:	4652      	mov	r2, sl
 8005560:	465b      	mov	r3, fp
 8005562:	f04f 0000 	mov.w	r0, #0
 8005566:	f04f 0100 	mov.w	r1, #0
 800556a:	0159      	lsls	r1, r3, #5
 800556c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005570:	0150      	lsls	r0, r2, #5
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	ebb2 080a 	subs.w	r8, r2, sl
 800557a:	eb63 090b 	sbc.w	r9, r3, fp
 800557e:	f04f 0200 	mov.w	r2, #0
 8005582:	f04f 0300 	mov.w	r3, #0
 8005586:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800558a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800558e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005592:	ebb2 0408 	subs.w	r4, r2, r8
 8005596:	eb63 0509 	sbc.w	r5, r3, r9
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	f04f 0300 	mov.w	r3, #0
 80055a2:	00eb      	lsls	r3, r5, #3
 80055a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055a8:	00e2      	lsls	r2, r4, #3
 80055aa:	4614      	mov	r4, r2
 80055ac:	461d      	mov	r5, r3
 80055ae:	eb14 030a 	adds.w	r3, r4, sl
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	eb45 030b 	adc.w	r3, r5, fp
 80055b8:	607b      	str	r3, [r7, #4]
 80055ba:	f04f 0200 	mov.w	r2, #0
 80055be:	f04f 0300 	mov.w	r3, #0
 80055c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055c6:	4629      	mov	r1, r5
 80055c8:	028b      	lsls	r3, r1, #10
 80055ca:	4621      	mov	r1, r4
 80055cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055d0:	4621      	mov	r1, r4
 80055d2:	028a      	lsls	r2, r1, #10
 80055d4:	4610      	mov	r0, r2
 80055d6:	4619      	mov	r1, r3
 80055d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055da:	2200      	movs	r2, #0
 80055dc:	60bb      	str	r3, [r7, #8]
 80055de:	60fa      	str	r2, [r7, #12]
 80055e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055e4:	f7fa fe0a 	bl	80001fc <__aeabi_uldivmod>
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	4613      	mov	r3, r2
 80055ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055f0:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <HAL_RCC_GetSysClockFreq+0x180>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	0c1b      	lsrs	r3, r3, #16
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	3301      	adds	r3, #1
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005600:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	fbb2 f3f3 	udiv	r3, r2, r3
 8005608:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800560a:	e002      	b.n	8005612 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800560c:	4b05      	ldr	r3, [pc, #20]	; (8005624 <HAL_RCC_GetSysClockFreq+0x184>)
 800560e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005610:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005614:	4618      	mov	r0, r3
 8005616:	3740      	adds	r7, #64	; 0x40
 8005618:	46bd      	mov	sp, r7
 800561a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800561e:	bf00      	nop
 8005620:	40023800 	.word	0x40023800
 8005624:	00f42400 	.word	0x00f42400
 8005628:	017d7840 	.word	0x017d7840

0800562c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005630:	4b03      	ldr	r3, [pc, #12]	; (8005640 <HAL_RCC_GetHCLKFreq+0x14>)
 8005632:	681b      	ldr	r3, [r3, #0]
}
 8005634:	4618      	mov	r0, r3
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	2000001c 	.word	0x2000001c

08005644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005648:	f7ff fff0 	bl	800562c <HAL_RCC_GetHCLKFreq>
 800564c:	4602      	mov	r2, r0
 800564e:	4b05      	ldr	r3, [pc, #20]	; (8005664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	0a9b      	lsrs	r3, r3, #10
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	4903      	ldr	r1, [pc, #12]	; (8005668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800565a:	5ccb      	ldrb	r3, [r1, r3]
 800565c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005660:	4618      	mov	r0, r3
 8005662:	bd80      	pop	{r7, pc}
 8005664:	40023800 	.word	0x40023800
 8005668:	08008668 	.word	0x08008668

0800566c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005670:	f7ff ffdc 	bl	800562c <HAL_RCC_GetHCLKFreq>
 8005674:	4602      	mov	r2, r0
 8005676:	4b05      	ldr	r3, [pc, #20]	; (800568c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	0b5b      	lsrs	r3, r3, #13
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	4903      	ldr	r1, [pc, #12]	; (8005690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005682:	5ccb      	ldrb	r3, [r1, r3]
 8005684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005688:	4618      	mov	r0, r3
 800568a:	bd80      	pop	{r7, pc}
 800568c:	40023800 	.word	0x40023800
 8005690:	08008668 	.word	0x08008668

08005694 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10b      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d105      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d075      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056c8:	4b91      	ldr	r3, [pc, #580]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056ce:	f7fd fadb 	bl	8002c88 <HAL_GetTick>
 80056d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056d4:	e008      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80056d6:	f7fd fad7 	bl	8002c88 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d901      	bls.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e189      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056e8:	4b8a      	ldr	r3, [pc, #552]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1f0      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d009      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	019a      	lsls	r2, r3, #6
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	071b      	lsls	r3, r3, #28
 800570c:	4981      	ldr	r1, [pc, #516]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01f      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005720:	4b7c      	ldr	r3, [pc, #496]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005726:	0f1b      	lsrs	r3, r3, #28
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	019a      	lsls	r2, r3, #6
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	061b      	lsls	r3, r3, #24
 800573a:	431a      	orrs	r2, r3
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	071b      	lsls	r3, r3, #28
 8005740:	4974      	ldr	r1, [pc, #464]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005742:	4313      	orrs	r3, r2
 8005744:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005748:	4b72      	ldr	r3, [pc, #456]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800574a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800574e:	f023 021f 	bic.w	r2, r3, #31
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	3b01      	subs	r3, #1
 8005758:	496e      	ldr	r1, [pc, #440]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800575a:	4313      	orrs	r3, r2
 800575c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00d      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	019a      	lsls	r2, r3, #6
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	061b      	lsls	r3, r3, #24
 8005778:	431a      	orrs	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	071b      	lsls	r3, r3, #28
 8005780:	4964      	ldr	r1, [pc, #400]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005782:	4313      	orrs	r3, r2
 8005784:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005788:	4b61      	ldr	r3, [pc, #388]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800578a:	2201      	movs	r2, #1
 800578c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800578e:	f7fd fa7b 	bl	8002c88 <HAL_GetTick>
 8005792:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005794:	e008      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005796:	f7fd fa77 	bl	8002c88 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e129      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057a8:	4b5a      	ldr	r3, [pc, #360]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0f0      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d105      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d079      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80057cc:	4b52      	ldr	r3, [pc, #328]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057d2:	f7fd fa59 	bl	8002c88 <HAL_GetTick>
 80057d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057d8:	e008      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80057da:	f7fd fa55 	bl	8002c88 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d901      	bls.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e107      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057ec:	4b49      	ldr	r3, [pc, #292]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057f8:	d0ef      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	2b00      	cmp	r3, #0
 8005804:	d020      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005806:	4b43      	ldr	r3, [pc, #268]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580c:	0f1b      	lsrs	r3, r3, #28
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	019a      	lsls	r2, r3, #6
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	061b      	lsls	r3, r3, #24
 8005820:	431a      	orrs	r2, r3
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	071b      	lsls	r3, r3, #28
 8005826:	493b      	ldr	r1, [pc, #236]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005828:	4313      	orrs	r3, r2
 800582a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800582e:	4b39      	ldr	r3, [pc, #228]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005834:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	3b01      	subs	r3, #1
 800583e:	021b      	lsls	r3, r3, #8
 8005840:	4934      	ldr	r1, [pc, #208]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005842:	4313      	orrs	r3, r2
 8005844:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0308 	and.w	r3, r3, #8
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01e      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005854:	4b2f      	ldr	r3, [pc, #188]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585a:	0e1b      	lsrs	r3, r3, #24
 800585c:	f003 030f 	and.w	r3, r3, #15
 8005860:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	019a      	lsls	r2, r3, #6
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	061b      	lsls	r3, r3, #24
 800586c:	431a      	orrs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	071b      	lsls	r3, r3, #28
 8005874:	4927      	ldr	r1, [pc, #156]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800587c:	4b25      	ldr	r3, [pc, #148]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800587e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005882:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	4922      	ldr	r1, [pc, #136]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800588c:	4313      	orrs	r3, r2
 800588e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005892:	4b21      	ldr	r3, [pc, #132]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005894:	2201      	movs	r2, #1
 8005896:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005898:	f7fd f9f6 	bl	8002c88 <HAL_GetTick>
 800589c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800589e:	e008      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80058a0:	f7fd f9f2 	bl	8002c88 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e0a4      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058b2:	4b18      	ldr	r3, [pc, #96]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058be:	d1ef      	bne.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0320 	and.w	r3, r3, #32
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 808b 	beq.w	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	4b10      	ldr	r3, [pc, #64]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	4a0f      	ldr	r2, [pc, #60]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058dc:	6413      	str	r3, [r2, #64]	; 0x40
 80058de:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80058ea:	4b0c      	ldr	r3, [pc, #48]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a0b      	ldr	r2, [pc, #44]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80058f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058f6:	f7fd f9c7 	bl	8002c88 <HAL_GetTick>
 80058fa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058fc:	e010      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058fe:	f7fd f9c3 	bl	8002c88 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d909      	bls.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e075      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005910:	42470068 	.word	0x42470068
 8005914:	40023800 	.word	0x40023800
 8005918:	42470070 	.word	0x42470070
 800591c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005920:	4b38      	ldr	r3, [pc, #224]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0e8      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800592c:	4b36      	ldr	r3, [pc, #216]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800592e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005934:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d02f      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x308>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005940:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	429a      	cmp	r2, r3
 8005948:	d028      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800594a:	4b2f      	ldr	r3, [pc, #188]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800594c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005952:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005954:	4b2d      	ldr	r3, [pc, #180]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005956:	2201      	movs	r2, #1
 8005958:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800595a:	4b2c      	ldr	r3, [pc, #176]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005960:	4a29      	ldr	r2, [pc, #164]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005966:	4b28      	ldr	r3, [pc, #160]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b01      	cmp	r3, #1
 8005970:	d114      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005972:	f7fd f989 	bl	8002c88 <HAL_GetTick>
 8005976:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005978:	e00a      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800597a:	f7fd f985 	bl	8002c88 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	f241 3288 	movw	r2, #5000	; 0x1388
 8005988:	4293      	cmp	r3, r2
 800598a:	d901      	bls.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e035      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005990:	4b1d      	ldr	r3, [pc, #116]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0ee      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059a8:	d10d      	bne.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80059aa:	4b17      	ldr	r3, [pc, #92]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80059ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059be:	4912      	ldr	r1, [pc, #72]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	608b      	str	r3, [r1, #8]
 80059c4:	e005      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80059c6:	4b10      	ldr	r3, [pc, #64]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	4a0f      	ldr	r2, [pc, #60]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059cc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80059d0:	6093      	str	r3, [r2, #8]
 80059d2:	4b0d      	ldr	r3, [pc, #52]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059de:	490a      	ldr	r1, [pc, #40]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0310 	and.w	r3, r3, #16
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d004      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80059f6:	4b06      	ldr	r3, [pc, #24]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80059f8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	40007000 	.word	0x40007000
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	42470e40 	.word	0x42470e40
 8005a10:	424711e0 	.word	0x424711e0

08005a14 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e073      	b.n	8005b12 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	7f5b      	ldrb	r3, [r3, #29]
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d105      	bne.n	8005a40 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7fc fdc8 	bl	80025d0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 0310 	and.w	r3, r3, #16
 8005a50:	2b10      	cmp	r3, #16
 8005a52:	d055      	beq.n	8005b00 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	22ca      	movs	r2, #202	; 0xca
 8005a5a:	625a      	str	r2, [r3, #36]	; 0x24
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2253      	movs	r2, #83	; 0x53
 8005a62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fa49 	bl	8005efc <RTC_EnterInitMode>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d12c      	bne.n	8005ace <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6812      	ldr	r2, [r2, #0]
 8005a7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a86:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6899      	ldr	r1, [r3, #8]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	68d2      	ldr	r2, [r2, #12]
 8005aae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6919      	ldr	r1, [r3, #16]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	041a      	lsls	r2, r3, #16
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fa50 	bl	8005f6a <RTC_ExitInitMode>
 8005aca:	4603      	mov	r3, r0
 8005acc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005ace:	7bfb      	ldrb	r3, [r7, #15]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d110      	bne.n	8005af6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ae2:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	699a      	ldr	r2, [r3, #24]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	22ff      	movs	r2, #255	; 0xff
 8005afc:	625a      	str	r2, [r3, #36]	; 0x24
 8005afe:	e001      	b.n	8005b04 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d102      	bne.n	8005b10 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b1a:	b590      	push	{r4, r7, lr}
 8005b1c:	b087      	sub	sp, #28
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	7f1b      	ldrb	r3, [r3, #28]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d101      	bne.n	8005b36 <HAL_RTC_SetTime+0x1c>
 8005b32:	2302      	movs	r3, #2
 8005b34:	e087      	b.n	8005c46 <HAL_RTC_SetTime+0x12c>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d126      	bne.n	8005b96 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d102      	bne.n	8005b5c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fa27 	bl	8005fb4 <RTC_ByteToBcd2>
 8005b66:	4603      	mov	r3, r0
 8005b68:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	785b      	ldrb	r3, [r3, #1]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fa20 	bl	8005fb4 <RTC_ByteToBcd2>
 8005b74:	4603      	mov	r3, r0
 8005b76:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005b78:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	789b      	ldrb	r3, [r3, #2]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fa18 	bl	8005fb4 <RTC_ByteToBcd2>
 8005b84:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b86:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	78db      	ldrb	r3, [r3, #3]
 8005b8e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005b90:	4313      	orrs	r3, r2
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	e018      	b.n	8005bc8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d102      	bne.n	8005baa <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	785b      	ldrb	r3, [r3, #1]
 8005bb4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005bb6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005bbc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	78db      	ldrb	r3, [r3, #3]
 8005bc2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	22ca      	movs	r2, #202	; 0xca
 8005bce:	625a      	str	r2, [r3, #36]	; 0x24
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2253      	movs	r2, #83	; 0x53
 8005bd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 f98f 	bl	8005efc <RTC_EnterInitMode>
 8005bde:	4603      	mov	r3, r0
 8005be0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005be2:	7cfb      	ldrb	r3, [r7, #19]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d120      	bne.n	8005c2a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005bf2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005bf6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689a      	ldr	r2, [r3, #8]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c06:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6899      	ldr	r1, [r3, #8]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	431a      	orrs	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 f9a2 	bl	8005f6a <RTC_ExitInitMode>
 8005c26:	4603      	mov	r3, r0
 8005c28:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005c2a:	7cfb      	ldrb	r3, [r7, #19]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d102      	bne.n	8005c36 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2201      	movs	r2, #1
 8005c34:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	22ff      	movs	r2, #255	; 0xff
 8005c3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	771a      	strb	r2, [r3, #28]

  return status;
 8005c44:	7cfb      	ldrb	r3, [r7, #19]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	371c      	adds	r7, #28
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd90      	pop	{r4, r7, pc}

08005c4e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b086      	sub	sp, #24
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005c80:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c84:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	0c1b      	lsrs	r3, r3, #16
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	0a1b      	lsrs	r3, r3, #8
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	0d9b      	lsrs	r3, r3, #22
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d11a      	bne.n	8005d00 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 f98e 	bl	8005ff0 <RTC_Bcd2ToByte>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	785b      	ldrb	r3, [r3, #1]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 f985 	bl	8005ff0 <RTC_Bcd2ToByte>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	461a      	mov	r2, r3
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	789b      	ldrb	r3, [r3, #2]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 f97c 	bl	8005ff0 <RTC_Bcd2ToByte>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3718      	adds	r7, #24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d0a:	b590      	push	{r4, r7, lr}
 8005d0c:	b087      	sub	sp, #28
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	60f8      	str	r0, [r7, #12]
 8005d12:	60b9      	str	r1, [r7, #8]
 8005d14:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	7f1b      	ldrb	r3, [r3, #28]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d101      	bne.n	8005d26 <HAL_RTC_SetDate+0x1c>
 8005d22:	2302      	movs	r3, #2
 8005d24:	e071      	b.n	8005e0a <HAL_RTC_SetDate+0x100>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10e      	bne.n	8005d56 <HAL_RTC_SetDate+0x4c>
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	785b      	ldrb	r3, [r3, #1]
 8005d3c:	f003 0310 	and.w	r3, r3, #16
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d008      	beq.n	8005d56 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	785b      	ldrb	r3, [r3, #1]
 8005d48:	f023 0310 	bic.w	r3, r3, #16
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	330a      	adds	r3, #10
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d11c      	bne.n	8005d96 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	78db      	ldrb	r3, [r3, #3]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 f927 	bl	8005fb4 <RTC_ByteToBcd2>
 8005d66:	4603      	mov	r3, r0
 8005d68:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	785b      	ldrb	r3, [r3, #1]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 f920 	bl	8005fb4 <RTC_ByteToBcd2>
 8005d74:	4603      	mov	r3, r0
 8005d76:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d78:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	789b      	ldrb	r3, [r3, #2]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 f918 	bl	8005fb4 <RTC_ByteToBcd2>
 8005d84:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d86:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d90:	4313      	orrs	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	e00e      	b.n	8005db4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	78db      	ldrb	r3, [r3, #3]
 8005d9a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	785b      	ldrb	r3, [r3, #1]
 8005da0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005da2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005da8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005db0:	4313      	orrs	r3, r2
 8005db2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	22ca      	movs	r2, #202	; 0xca
 8005dba:	625a      	str	r2, [r3, #36]	; 0x24
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2253      	movs	r2, #83	; 0x53
 8005dc2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 f899 	bl	8005efc <RTC_EnterInitMode>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005dce:	7cfb      	ldrb	r3, [r7, #19]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10c      	bne.n	8005dee <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005dde:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005de2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 f8c0 	bl	8005f6a <RTC_ExitInitMode>
 8005dea:	4603      	mov	r3, r0
 8005dec:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005dee:	7cfb      	ldrb	r3, [r7, #19]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d102      	bne.n	8005dfa <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2201      	movs	r2, #1
 8005df8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	22ff      	movs	r2, #255	; 0xff
 8005e00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	771a      	strb	r2, [r3, #28]

  return status;
 8005e08:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd90      	pop	{r4, r7, pc}

08005e12 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b086      	sub	sp, #24
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	60f8      	str	r0, [r7, #12]
 8005e1a:	60b9      	str	r1, [r7, #8]
 8005e1c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005e30:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	0c1b      	lsrs	r3, r3, #16
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	0a1b      	lsrs	r3, r3, #8
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	f003 031f 	and.w	r3, r3, #31
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	0b5b      	lsrs	r3, r3, #13
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	f003 0307 	and.w	r3, r3, #7
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d11a      	bne.n	8005ea6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	78db      	ldrb	r3, [r3, #3]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 f8bb 	bl	8005ff0 <RTC_Bcd2ToByte>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	785b      	ldrb	r3, [r3, #1]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 f8b2 	bl	8005ff0 <RTC_Bcd2ToByte>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	461a      	mov	r2, r3
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	789b      	ldrb	r3, [r3, #2]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 f8a9 	bl	8005ff0 <RTC_Bcd2ToByte>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a0d      	ldr	r2, [pc, #52]	; (8005ef8 <HAL_RTC_WaitForSynchro+0x48>)
 8005ec2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ec4:	f7fc fee0 	bl	8002c88 <HAL_GetTick>
 8005ec8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005eca:	e009      	b.n	8005ee0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ecc:	f7fc fedc 	bl	8002c88 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005eda:	d901      	bls.n	8005ee0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e007      	b.n	8005ef0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0ee      	beq.n	8005ecc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	00017f5f 	.word	0x00017f5f

08005efc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f04:	2300      	movs	r3, #0
 8005f06:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d122      	bne.n	8005f60 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f28:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f2a:	f7fc fead 	bl	8002c88 <HAL_GetTick>
 8005f2e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005f30:	e00c      	b.n	8005f4c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f32:	f7fc fea9 	bl	8002c88 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f40:	d904      	bls.n	8005f4c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2204      	movs	r2, #4
 8005f46:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d102      	bne.n	8005f60 <RTC_EnterInitMode+0x64>
 8005f5a:	7bfb      	ldrb	r3, [r7, #15]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d1e8      	bne.n	8005f32 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68da      	ldr	r2, [r3, #12]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f84:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f003 0320 	and.w	r3, r3, #32
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10a      	bne.n	8005faa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f7ff ff8b 	bl	8005eb0 <HAL_RTC_WaitForSynchro>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d004      	beq.n	8005faa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2204      	movs	r2, #4
 8005fa4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	4603      	mov	r3, r0
 8005fbc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005fc2:	e005      	b.n	8005fd0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005fca:	79fb      	ldrb	r3, [r7, #7]
 8005fcc:	3b0a      	subs	r3, #10
 8005fce:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005fd0:	79fb      	ldrb	r3, [r7, #7]
 8005fd2:	2b09      	cmp	r3, #9
 8005fd4:	d8f6      	bhi.n	8005fc4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	79fb      	ldrb	r3, [r7, #7]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	b2db      	uxtb	r3, r3
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005ffe:	79fb      	ldrb	r3, [r7, #7]
 8006000:	091b      	lsrs	r3, r3, #4
 8006002:	b2db      	uxtb	r3, r3
 8006004:	461a      	mov	r2, r3
 8006006:	4613      	mov	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	b2da      	uxtb	r2, r3
 8006014:	79fb      	ldrb	r3, [r7, #7]
 8006016:	f003 030f 	and.w	r3, r3, #15
 800601a:	b2db      	uxtb	r3, r3
 800601c:	4413      	add	r3, r2
 800601e:	b2db      	uxtb	r3, r3
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e07b      	b.n	8006136 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	2b00      	cmp	r3, #0
 8006044:	d108      	bne.n	8006058 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800604e:	d009      	beq.n	8006064 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	61da      	str	r2, [r3, #28]
 8006056:	e005      	b.n	8006064 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d106      	bne.n	8006084 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7fc fad0 	bl	8002624 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800609a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060ac:	431a      	orrs	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060b6:	431a      	orrs	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	431a      	orrs	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	431a      	orrs	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a1b      	ldr	r3, [r3, #32]
 80060e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e8:	ea42 0103 	orr.w	r1, r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	0c1b      	lsrs	r3, r3, #16
 8006102:	f003 0104 	and.w	r1, r3, #4
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610a:	f003 0210 	and.w	r2, r3, #16
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	69da      	ldr	r2, [r3, #28]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006124:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b088      	sub	sp, #32
 8006142:	af00      	add	r7, sp, #0
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	603b      	str	r3, [r7, #0]
 800614a:	4613      	mov	r3, r2
 800614c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006158:	2b01      	cmp	r3, #1
 800615a:	d101      	bne.n	8006160 <HAL_SPI_Transmit+0x22>
 800615c:	2302      	movs	r3, #2
 800615e:	e12d      	b.n	80063bc <HAL_SPI_Transmit+0x27e>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006168:	f7fc fd8e 	bl	8002c88 <HAL_GetTick>
 800616c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800616e:	88fb      	ldrh	r3, [r7, #6]
 8006170:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b01      	cmp	r3, #1
 800617c:	d002      	beq.n	8006184 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800617e:	2302      	movs	r3, #2
 8006180:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006182:	e116      	b.n	80063b2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <HAL_SPI_Transmit+0x52>
 800618a:	88fb      	ldrh	r3, [r7, #6]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d102      	bne.n	8006196 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006194:	e10d      	b.n	80063b2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2203      	movs	r2, #3
 800619a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	88fa      	ldrh	r2, [r7, #6]
 80061ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	88fa      	ldrh	r2, [r7, #6]
 80061b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061dc:	d10f      	bne.n	80061fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006208:	2b40      	cmp	r3, #64	; 0x40
 800620a:	d007      	beq.n	800621c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800621a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006224:	d14f      	bne.n	80062c6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <HAL_SPI_Transmit+0xf6>
 800622e:	8afb      	ldrh	r3, [r7, #22]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d142      	bne.n	80062ba <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006238:	881a      	ldrh	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006244:	1c9a      	adds	r2, r3, #2
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800624e:	b29b      	uxth	r3, r3
 8006250:	3b01      	subs	r3, #1
 8006252:	b29a      	uxth	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006258:	e02f      	b.n	80062ba <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b02      	cmp	r3, #2
 8006266:	d112      	bne.n	800628e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626c:	881a      	ldrh	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006278:	1c9a      	adds	r2, r3, #2
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006282:	b29b      	uxth	r3, r3
 8006284:	3b01      	subs	r3, #1
 8006286:	b29a      	uxth	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	86da      	strh	r2, [r3, #54]	; 0x36
 800628c:	e015      	b.n	80062ba <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800628e:	f7fc fcfb 	bl	8002c88 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	429a      	cmp	r2, r3
 800629c:	d803      	bhi.n	80062a6 <HAL_SPI_Transmit+0x168>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062a4:	d102      	bne.n	80062ac <HAL_SPI_Transmit+0x16e>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d106      	bne.n	80062ba <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80062b8:	e07b      	b.n	80063b2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062be:	b29b      	uxth	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1ca      	bne.n	800625a <HAL_SPI_Transmit+0x11c>
 80062c4:	e050      	b.n	8006368 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <HAL_SPI_Transmit+0x196>
 80062ce:	8afb      	ldrh	r3, [r7, #22]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d144      	bne.n	800635e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	330c      	adds	r3, #12
 80062de:	7812      	ldrb	r2, [r2, #0]
 80062e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80062fa:	e030      	b.n	800635e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b02      	cmp	r3, #2
 8006308:	d113      	bne.n	8006332 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	330c      	adds	r3, #12
 8006314:	7812      	ldrb	r2, [r2, #0]
 8006316:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631c:	1c5a      	adds	r2, r3, #1
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006326:	b29b      	uxth	r3, r3
 8006328:	3b01      	subs	r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006330:	e015      	b.n	800635e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006332:	f7fc fca9 	bl	8002c88 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	429a      	cmp	r2, r3
 8006340:	d803      	bhi.n	800634a <HAL_SPI_Transmit+0x20c>
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006348:	d102      	bne.n	8006350 <HAL_SPI_Transmit+0x212>
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d106      	bne.n	800635e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800635c:	e029      	b.n	80063b2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006362:	b29b      	uxth	r3, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1c9      	bne.n	80062fc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	6839      	ldr	r1, [r7, #0]
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 fd27 	bl	8006dc0 <SPI_EndRxTxTransaction>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d002      	beq.n	800637e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2220      	movs	r2, #32
 800637c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10a      	bne.n	800639c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006386:	2300      	movs	r3, #0
 8006388:	613b      	str	r3, [r7, #16]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	613b      	str	r3, [r7, #16]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	613b      	str	r3, [r7, #16]
 800639a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	77fb      	strb	r3, [r7, #31]
 80063a8:	e003      	b.n	80063b2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80063ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3720      	adds	r7, #32
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b088      	sub	sp, #32
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	603b      	str	r3, [r7, #0]
 80063d0:	4613      	mov	r3, r2
 80063d2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d002      	beq.n	80063ea <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80063e4:	2302      	movs	r3, #2
 80063e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063e8:	e0fb      	b.n	80065e2 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063f2:	d112      	bne.n	800641a <HAL_SPI_Receive+0x56>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10e      	bne.n	800641a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2204      	movs	r2, #4
 8006400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006404:	88fa      	ldrh	r2, [r7, #6]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	4613      	mov	r3, r2
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	68b9      	ldr	r1, [r7, #8]
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 f8ef 	bl	80065f4 <HAL_SPI_TransmitReceive>
 8006416:	4603      	mov	r3, r0
 8006418:	e0e8      	b.n	80065ec <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006420:	2b01      	cmp	r3, #1
 8006422:	d101      	bne.n	8006428 <HAL_SPI_Receive+0x64>
 8006424:	2302      	movs	r3, #2
 8006426:	e0e1      	b.n	80065ec <HAL_SPI_Receive+0x228>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006430:	f7fc fc2a 	bl	8002c88 <HAL_GetTick>
 8006434:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <HAL_SPI_Receive+0x7e>
 800643c:	88fb      	ldrh	r3, [r7, #6]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d102      	bne.n	8006448 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006446:	e0cc      	b.n	80065e2 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2204      	movs	r2, #4
 800644c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	88fa      	ldrh	r2, [r7, #6]
 8006460:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	88fa      	ldrh	r2, [r7, #6]
 8006466:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800648e:	d10f      	bne.n	80064b0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800649e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064ae:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ba:	2b40      	cmp	r3, #64	; 0x40
 80064bc:	d007      	beq.n	80064ce <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064cc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d16a      	bne.n	80065ac <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80064d6:	e032      	b.n	800653e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d115      	bne.n	8006512 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f103 020c 	add.w	r2, r3, #12
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f2:	7812      	ldrb	r2, [r2, #0]
 80064f4:	b2d2      	uxtb	r2, r2
 80064f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006506:	b29b      	uxth	r3, r3
 8006508:	3b01      	subs	r3, #1
 800650a:	b29a      	uxth	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006510:	e015      	b.n	800653e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006512:	f7fc fbb9 	bl	8002c88 <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	429a      	cmp	r2, r3
 8006520:	d803      	bhi.n	800652a <HAL_SPI_Receive+0x166>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006528:	d102      	bne.n	8006530 <HAL_SPI_Receive+0x16c>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d106      	bne.n	800653e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800653c:	e051      	b.n	80065e2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006542:	b29b      	uxth	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1c7      	bne.n	80064d8 <HAL_SPI_Receive+0x114>
 8006548:	e035      	b.n	80065b6 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b01      	cmp	r3, #1
 8006556:	d113      	bne.n	8006580 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68da      	ldr	r2, [r3, #12]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006562:	b292      	uxth	r2, r2
 8006564:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656a:	1c9a      	adds	r2, r3, #2
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006574:	b29b      	uxth	r3, r3
 8006576:	3b01      	subs	r3, #1
 8006578:	b29a      	uxth	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800657e:	e015      	b.n	80065ac <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006580:	f7fc fb82 	bl	8002c88 <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	429a      	cmp	r2, r3
 800658e:	d803      	bhi.n	8006598 <HAL_SPI_Receive+0x1d4>
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006596:	d102      	bne.n	800659e <HAL_SPI_Receive+0x1da>
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d106      	bne.n	80065ac <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80065aa:	e01a      	b.n	80065e2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1c9      	bne.n	800654a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	6839      	ldr	r1, [r7, #0]
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 fb9a 	bl	8006cf4 <SPI_EndRxTransaction>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2220      	movs	r2, #32
 80065ca:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	75fb      	strb	r3, [r7, #23]
 80065d8:	e003      	b.n	80065e2 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3718      	adds	r7, #24
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b08c      	sub	sp, #48	; 0x30
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
 8006600:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006602:	2301      	movs	r3, #1
 8006604:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006612:	2b01      	cmp	r3, #1
 8006614:	d101      	bne.n	800661a <HAL_SPI_TransmitReceive+0x26>
 8006616:	2302      	movs	r3, #2
 8006618:	e198      	b.n	800694c <HAL_SPI_TransmitReceive+0x358>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006622:	f7fc fb31 	bl	8002c88 <HAL_GetTick>
 8006626:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800662e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006638:	887b      	ldrh	r3, [r7, #2]
 800663a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800663c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006640:	2b01      	cmp	r3, #1
 8006642:	d00f      	beq.n	8006664 <HAL_SPI_TransmitReceive+0x70>
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800664a:	d107      	bne.n	800665c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d103      	bne.n	800665c <HAL_SPI_TransmitReceive+0x68>
 8006654:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006658:	2b04      	cmp	r3, #4
 800665a:	d003      	beq.n	8006664 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800665c:	2302      	movs	r3, #2
 800665e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006662:	e16d      	b.n	8006940 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d005      	beq.n	8006676 <HAL_SPI_TransmitReceive+0x82>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <HAL_SPI_TransmitReceive+0x82>
 8006670:	887b      	ldrh	r3, [r7, #2]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d103      	bne.n	800667e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800667c:	e160      	b.n	8006940 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b04      	cmp	r3, #4
 8006688:	d003      	beq.n	8006692 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2205      	movs	r2, #5
 800668e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	887a      	ldrh	r2, [r7, #2]
 80066a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	887a      	ldrh	r2, [r7, #2]
 80066a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	887a      	ldrh	r2, [r7, #2]
 80066b4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	887a      	ldrh	r2, [r7, #2]
 80066ba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d2:	2b40      	cmp	r3, #64	; 0x40
 80066d4:	d007      	beq.n	80066e6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ee:	d17c      	bne.n	80067ea <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <HAL_SPI_TransmitReceive+0x10a>
 80066f8:	8b7b      	ldrh	r3, [r7, #26]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d16a      	bne.n	80067d4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006702:	881a      	ldrh	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670e:	1c9a      	adds	r2, r3, #2
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006718:	b29b      	uxth	r3, r3
 800671a:	3b01      	subs	r3, #1
 800671c:	b29a      	uxth	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006722:	e057      	b.n	80067d4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	2b02      	cmp	r3, #2
 8006730:	d11b      	bne.n	800676a <HAL_SPI_TransmitReceive+0x176>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006736:	b29b      	uxth	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	d016      	beq.n	800676a <HAL_SPI_TransmitReceive+0x176>
 800673c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673e:	2b01      	cmp	r3, #1
 8006740:	d113      	bne.n	800676a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006746:	881a      	ldrh	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006752:	1c9a      	adds	r2, r3, #2
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800675c:	b29b      	uxth	r3, r3
 800675e:	3b01      	subs	r3, #1
 8006760:	b29a      	uxth	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b01      	cmp	r3, #1
 8006776:	d119      	bne.n	80067ac <HAL_SPI_TransmitReceive+0x1b8>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800677c:	b29b      	uxth	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d014      	beq.n	80067ac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678c:	b292      	uxth	r2, r2
 800678e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006794:	1c9a      	adds	r2, r3, #2
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800679e:	b29b      	uxth	r3, r3
 80067a0:	3b01      	subs	r3, #1
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067a8:	2301      	movs	r3, #1
 80067aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80067ac:	f7fc fa6c 	bl	8002c88 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d80b      	bhi.n	80067d4 <HAL_SPI_TransmitReceive+0x1e0>
 80067bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067c2:	d007      	beq.n	80067d4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80067d2:	e0b5      	b.n	8006940 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067d8:	b29b      	uxth	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1a2      	bne.n	8006724 <HAL_SPI_TransmitReceive+0x130>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d19d      	bne.n	8006724 <HAL_SPI_TransmitReceive+0x130>
 80067e8:	e080      	b.n	80068ec <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <HAL_SPI_TransmitReceive+0x204>
 80067f2:	8b7b      	ldrh	r3, [r7, #26]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d16f      	bne.n	80068d8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	330c      	adds	r3, #12
 8006802:	7812      	ldrb	r2, [r2, #0]
 8006804:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006814:	b29b      	uxth	r3, r3
 8006816:	3b01      	subs	r3, #1
 8006818:	b29a      	uxth	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800681e:	e05b      	b.n	80068d8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b02      	cmp	r3, #2
 800682c:	d11c      	bne.n	8006868 <HAL_SPI_TransmitReceive+0x274>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006832:	b29b      	uxth	r3, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	d017      	beq.n	8006868 <HAL_SPI_TransmitReceive+0x274>
 8006838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683a:	2b01      	cmp	r3, #1
 800683c:	d114      	bne.n	8006868 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	330c      	adds	r3, #12
 8006848:	7812      	ldrb	r2, [r2, #0]
 800684a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800685a:	b29b      	uxth	r3, r3
 800685c:	3b01      	subs	r3, #1
 800685e:	b29a      	uxth	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006864:	2300      	movs	r3, #0
 8006866:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b01      	cmp	r3, #1
 8006874:	d119      	bne.n	80068aa <HAL_SPI_TransmitReceive+0x2b6>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800687a:	b29b      	uxth	r3, r3
 800687c:	2b00      	cmp	r3, #0
 800687e:	d014      	beq.n	80068aa <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68da      	ldr	r2, [r3, #12]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800689c:	b29b      	uxth	r3, r3
 800689e:	3b01      	subs	r3, #1
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068a6:	2301      	movs	r3, #1
 80068a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80068aa:	f7fc f9ed 	bl	8002c88 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d803      	bhi.n	80068c2 <HAL_SPI_TransmitReceive+0x2ce>
 80068ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068c0:	d102      	bne.n	80068c8 <HAL_SPI_TransmitReceive+0x2d4>
 80068c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d107      	bne.n	80068d8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80068d6:	e033      	b.n	8006940 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068dc:	b29b      	uxth	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d19e      	bne.n	8006820 <HAL_SPI_TransmitReceive+0x22c>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d199      	bne.n	8006820 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f000 fa65 	bl	8006dc0 <SPI_EndRxTxTransaction>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d006      	beq.n	800690a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2220      	movs	r2, #32
 8006906:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006908:	e01a      	b.n	8006940 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10a      	bne.n	8006928 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006912:	2300      	movs	r3, #0
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	617b      	str	r3, [r7, #20]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	617b      	str	r3, [r7, #20]
 8006926:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800692c:	2b00      	cmp	r3, #0
 800692e:	d003      	beq.n	8006938 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006936:	e003      	b.n	8006940 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006948:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800694c:	4618      	mov	r0, r3
 800694e:	3730      	adds	r7, #48	; 0x30
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	4613      	mov	r3, r2
 8006960:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800696c:	2b01      	cmp	r3, #1
 800696e:	d101      	bne.n	8006974 <HAL_SPI_Transmit_DMA+0x20>
 8006970:	2302      	movs	r3, #2
 8006972:	e097      	b.n	8006aa4 <HAL_SPI_Transmit_DMA+0x150>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b01      	cmp	r3, #1
 8006986:	d002      	beq.n	800698e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006988:	2302      	movs	r3, #2
 800698a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800698c:	e085      	b.n	8006a9a <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d002      	beq.n	800699a <HAL_SPI_Transmit_DMA+0x46>
 8006994:	88fb      	ldrh	r3, [r7, #6]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d102      	bne.n	80069a0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800699e:	e07c      	b.n	8006a9a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2203      	movs	r2, #3
 80069a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	88fa      	ldrh	r2, [r7, #6]
 80069b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	88fa      	ldrh	r2, [r7, #6]
 80069be:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069e6:	d10f      	bne.n	8006a08 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a0c:	4a27      	ldr	r2, [pc, #156]	; (8006aac <HAL_SPI_Transmit_DMA+0x158>)
 8006a0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a14:	4a26      	ldr	r2, [pc, #152]	; (8006ab0 <HAL_SPI_Transmit_DMA+0x15c>)
 8006a16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a1c:	4a25      	ldr	r2, [pc, #148]	; (8006ab4 <HAL_SPI_Transmit_DMA+0x160>)
 8006a1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a24:	2200      	movs	r2, #0
 8006a26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a30:	4619      	mov	r1, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	330c      	adds	r3, #12
 8006a38:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a3e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006a40:	f7fc fc0e 	bl	8003260 <HAL_DMA_Start_IT>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d008      	beq.n	8006a5c <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a4e:	f043 0210 	orr.w	r2, r3, #16
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	75fb      	strb	r3, [r7, #23]

    goto error;
 8006a5a:	e01e      	b.n	8006a9a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a66:	2b40      	cmp	r3, #64	; 0x40
 8006a68:	d007      	beq.n	8006a7a <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a78:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f042 0220 	orr.w	r2, r2, #32
 8006a88:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f042 0202 	orr.w	r2, r2, #2
 8006a98:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3718      	adds	r7, #24
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	08006b89 	.word	0x08006b89
 8006ab0:	08006ae1 	.word	0x08006ae1
 8006ab4:	08006ba5 	.word	0x08006ba5

08006ab8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006aee:	f7fc f8cb 	bl	8002c88 <HAL_GetTick>
 8006af2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b02:	d03b      	beq.n	8006b7c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 0220 	bic.w	r2, r2, #32
 8006b12:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f022 0202 	bic.w	r2, r2, #2
 8006b22:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	2164      	movs	r1, #100	; 0x64
 8006b28:	6978      	ldr	r0, [r7, #20]
 8006b2a:	f000 f949 	bl	8006dc0 <SPI_EndRxTxTransaction>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b38:	f043 0220 	orr.w	r2, r3, #32
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10a      	bne.n	8006b5e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b48:	2300      	movs	r3, #0
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	2200      	movs	r2, #0
 8006b62:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d003      	beq.n	8006b7c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006b74:	6978      	ldr	r0, [r7, #20]
 8006b76:	f7ff ffa9 	bl	8006acc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006b7a:	e002      	b.n	8006b82 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006b7c:	6978      	ldr	r0, [r7, #20]
 8006b7e:	f7fb ff4d 	bl	8002a1c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b82:	3718      	adds	r7, #24
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b94:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f7ff ff8e 	bl	8006ab8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b9c:	bf00      	nop
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 0203 	bic.w	r2, r2, #3
 8006bc0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc6:	f043 0210 	orr.w	r2, r3, #16
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f7ff ff78 	bl	8006acc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006bdc:	bf00      	nop
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b088      	sub	sp, #32
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	603b      	str	r3, [r7, #0]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006bf4:	f7fc f848 	bl	8002c88 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfc:	1a9b      	subs	r3, r3, r2
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	4413      	add	r3, r2
 8006c02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c04:	f7fc f840 	bl	8002c88 <HAL_GetTick>
 8006c08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c0a:	4b39      	ldr	r3, [pc, #228]	; (8006cf0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	015b      	lsls	r3, r3, #5
 8006c10:	0d1b      	lsrs	r3, r3, #20
 8006c12:	69fa      	ldr	r2, [r7, #28]
 8006c14:	fb02 f303 	mul.w	r3, r2, r3
 8006c18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c1a:	e054      	b.n	8006cc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c22:	d050      	beq.n	8006cc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c24:	f7fc f830 	bl	8002c88 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	69fa      	ldr	r2, [r7, #28]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d902      	bls.n	8006c3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d13d      	bne.n	8006cb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	685a      	ldr	r2, [r3, #4]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c52:	d111      	bne.n	8006c78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c5c:	d004      	beq.n	8006c68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c66:	d107      	bne.n	8006c78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c80:	d10f      	bne.n	8006ca2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ca0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e017      	b.n	8006ce6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689a      	ldr	r2, [r3, #8]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	bf0c      	ite	eq
 8006cd6:	2301      	moveq	r3, #1
 8006cd8:	2300      	movne	r3, #0
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	461a      	mov	r2, r3
 8006cde:	79fb      	ldrb	r3, [r7, #7]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d19b      	bne.n	8006c1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3720      	adds	r7, #32
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	2000001c 	.word	0x2000001c

08006cf4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af02      	add	r7, sp, #8
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d08:	d111      	bne.n	8006d2e <SPI_EndRxTransaction+0x3a>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d12:	d004      	beq.n	8006d1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d1c:	d107      	bne.n	8006d2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d2c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d36:	d12a      	bne.n	8006d8e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d40:	d012      	beq.n	8006d68 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	2180      	movs	r1, #128	; 0x80
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f7ff ff49 	bl	8006be4 <SPI_WaitFlagStateUntilTimeout>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d02d      	beq.n	8006db4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d5c:	f043 0220 	orr.w	r2, r3, #32
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e026      	b.n	8006db6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	2101      	movs	r1, #1
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f7ff ff36 	bl	8006be4 <SPI_WaitFlagStateUntilTimeout>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d01a      	beq.n	8006db4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d82:	f043 0220 	orr.w	r2, r3, #32
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e013      	b.n	8006db6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	2200      	movs	r2, #0
 8006d96:	2101      	movs	r1, #1
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f7ff ff23 	bl	8006be4 <SPI_WaitFlagStateUntilTimeout>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d007      	beq.n	8006db4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da8:	f043 0220 	orr.w	r2, r3, #32
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e000      	b.n	8006db6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
	...

08006dc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af02      	add	r7, sp, #8
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	2102      	movs	r1, #2
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f7ff ff04 	bl	8006be4 <SPI_WaitFlagStateUntilTimeout>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d007      	beq.n	8006df2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de6:	f043 0220 	orr.w	r2, r3, #32
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e032      	b.n	8006e58 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006df2:	4b1b      	ldr	r3, [pc, #108]	; (8006e60 <SPI_EndRxTxTransaction+0xa0>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a1b      	ldr	r2, [pc, #108]	; (8006e64 <SPI_EndRxTxTransaction+0xa4>)
 8006df8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfc:	0d5b      	lsrs	r3, r3, #21
 8006dfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e02:	fb02 f303 	mul.w	r3, r2, r3
 8006e06:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e10:	d112      	bne.n	8006e38 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	2180      	movs	r1, #128	; 0x80
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f7ff fee1 	bl	8006be4 <SPI_WaitFlagStateUntilTimeout>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d016      	beq.n	8006e56 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2c:	f043 0220 	orr.w	r2, r3, #32
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e00f      	b.n	8006e58 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00a      	beq.n	8006e54 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	3b01      	subs	r3, #1
 8006e42:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e4e:	2b80      	cmp	r3, #128	; 0x80
 8006e50:	d0f2      	beq.n	8006e38 <SPI_EndRxTxTransaction+0x78>
 8006e52:	e000      	b.n	8006e56 <SPI_EndRxTxTransaction+0x96>
        break;
 8006e54:	bf00      	nop
  }

  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3718      	adds	r7, #24
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	2000001c 	.word	0x2000001c
 8006e64:	165e9f81 	.word	0x165e9f81

08006e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d101      	bne.n	8006e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e041      	b.n	8006efe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d106      	bne.n	8006e94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7fb fcca 	bl	8002828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2202      	movs	r2, #2
 8006e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	3304      	adds	r3, #4
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	4610      	mov	r0, r2
 8006ea8:	f000 f9c0 	bl	800722c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
	...

08006f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d001      	beq.n	8006f20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e04e      	b.n	8006fbe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f042 0201 	orr.w	r2, r2, #1
 8006f36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a23      	ldr	r2, [pc, #140]	; (8006fcc <HAL_TIM_Base_Start_IT+0xc4>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d022      	beq.n	8006f88 <HAL_TIM_Base_Start_IT+0x80>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f4a:	d01d      	beq.n	8006f88 <HAL_TIM_Base_Start_IT+0x80>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a1f      	ldr	r2, [pc, #124]	; (8006fd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d018      	beq.n	8006f88 <HAL_TIM_Base_Start_IT+0x80>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a1e      	ldr	r2, [pc, #120]	; (8006fd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d013      	beq.n	8006f88 <HAL_TIM_Base_Start_IT+0x80>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a1c      	ldr	r2, [pc, #112]	; (8006fd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d00e      	beq.n	8006f88 <HAL_TIM_Base_Start_IT+0x80>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a1b      	ldr	r2, [pc, #108]	; (8006fdc <HAL_TIM_Base_Start_IT+0xd4>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d009      	beq.n	8006f88 <HAL_TIM_Base_Start_IT+0x80>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a19      	ldr	r2, [pc, #100]	; (8006fe0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d004      	beq.n	8006f88 <HAL_TIM_Base_Start_IT+0x80>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a18      	ldr	r2, [pc, #96]	; (8006fe4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d111      	bne.n	8006fac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f003 0307 	and.w	r3, r3, #7
 8006f92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2b06      	cmp	r3, #6
 8006f98:	d010      	beq.n	8006fbc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f042 0201 	orr.w	r2, r2, #1
 8006fa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006faa:	e007      	b.n	8006fbc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f042 0201 	orr.w	r2, r2, #1
 8006fba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	40010000 	.word	0x40010000
 8006fd0:	40000400 	.word	0x40000400
 8006fd4:	40000800 	.word	0x40000800
 8006fd8:	40000c00 	.word	0x40000c00
 8006fdc:	40010400 	.word	0x40010400
 8006fe0:	40014000 	.word	0x40014000
 8006fe4:	40001800 	.word	0x40001800

08006fe8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f003 0302 	and.w	r3, r3, #2
 8007006:	2b00      	cmp	r3, #0
 8007008:	d020      	beq.n	800704c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d01b      	beq.n	800704c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f06f 0202 	mvn.w	r2, #2
 800701c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	f003 0303 	and.w	r3, r3, #3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f8dc 	bl	80071f0 <HAL_TIM_IC_CaptureCallback>
 8007038:	e005      	b.n	8007046 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f8ce 	bl	80071dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f8df 	bl	8007204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	f003 0304 	and.w	r3, r3, #4
 8007052:	2b00      	cmp	r3, #0
 8007054:	d020      	beq.n	8007098 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	2b00      	cmp	r3, #0
 800705e:	d01b      	beq.n	8007098 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f06f 0204 	mvn.w	r2, #4
 8007068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2202      	movs	r2, #2
 800706e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f8b6 	bl	80071f0 <HAL_TIM_IC_CaptureCallback>
 8007084:	e005      	b.n	8007092 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f8a8 	bl	80071dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f8b9 	bl	8007204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	f003 0308 	and.w	r3, r3, #8
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d020      	beq.n	80070e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f003 0308 	and.w	r3, r3, #8
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d01b      	beq.n	80070e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f06f 0208 	mvn.w	r2, #8
 80070b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2204      	movs	r2, #4
 80070ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	69db      	ldr	r3, [r3, #28]
 80070c2:	f003 0303 	and.w	r3, r3, #3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f890 	bl	80071f0 <HAL_TIM_IC_CaptureCallback>
 80070d0:	e005      	b.n	80070de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f882 	bl	80071dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f893 	bl	8007204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	f003 0310 	and.w	r3, r3, #16
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d020      	beq.n	8007130 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f003 0310 	and.w	r3, r3, #16
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d01b      	beq.n	8007130 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f06f 0210 	mvn.w	r2, #16
 8007100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2208      	movs	r2, #8
 8007106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f86a 	bl	80071f0 <HAL_TIM_IC_CaptureCallback>
 800711c:	e005      	b.n	800712a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f85c 	bl	80071dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f86d 	bl	8007204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00c      	beq.n	8007154 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	2b00      	cmp	r3, #0
 8007142:	d007      	beq.n	8007154 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f06f 0201 	mvn.w	r2, #1
 800714c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f83a 	bl	80071c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00c      	beq.n	8007178 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007164:	2b00      	cmp	r3, #0
 8007166:	d007      	beq.n	8007178 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f98c 	bl	8007490 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00c      	beq.n	800719c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007188:	2b00      	cmp	r3, #0
 800718a:	d007      	beq.n	800719c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f83e 	bl	8007218 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	f003 0320 	and.w	r3, r3, #32
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00c      	beq.n	80071c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f003 0320 	and.w	r3, r3, #32
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d007      	beq.n	80071c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f06f 0220 	mvn.w	r2, #32
 80071b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f95e 	bl	800747c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071c0:	bf00      	nop
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a46      	ldr	r2, [pc, #280]	; (8007358 <TIM_Base_SetConfig+0x12c>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d013      	beq.n	800726c <TIM_Base_SetConfig+0x40>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800724a:	d00f      	beq.n	800726c <TIM_Base_SetConfig+0x40>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a43      	ldr	r2, [pc, #268]	; (800735c <TIM_Base_SetConfig+0x130>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d00b      	beq.n	800726c <TIM_Base_SetConfig+0x40>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a42      	ldr	r2, [pc, #264]	; (8007360 <TIM_Base_SetConfig+0x134>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d007      	beq.n	800726c <TIM_Base_SetConfig+0x40>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a41      	ldr	r2, [pc, #260]	; (8007364 <TIM_Base_SetConfig+0x138>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d003      	beq.n	800726c <TIM_Base_SetConfig+0x40>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a40      	ldr	r2, [pc, #256]	; (8007368 <TIM_Base_SetConfig+0x13c>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d108      	bne.n	800727e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	4313      	orrs	r3, r2
 800727c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a35      	ldr	r2, [pc, #212]	; (8007358 <TIM_Base_SetConfig+0x12c>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d02b      	beq.n	80072de <TIM_Base_SetConfig+0xb2>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800728c:	d027      	beq.n	80072de <TIM_Base_SetConfig+0xb2>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a32      	ldr	r2, [pc, #200]	; (800735c <TIM_Base_SetConfig+0x130>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d023      	beq.n	80072de <TIM_Base_SetConfig+0xb2>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a31      	ldr	r2, [pc, #196]	; (8007360 <TIM_Base_SetConfig+0x134>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d01f      	beq.n	80072de <TIM_Base_SetConfig+0xb2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a30      	ldr	r2, [pc, #192]	; (8007364 <TIM_Base_SetConfig+0x138>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d01b      	beq.n	80072de <TIM_Base_SetConfig+0xb2>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a2f      	ldr	r2, [pc, #188]	; (8007368 <TIM_Base_SetConfig+0x13c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d017      	beq.n	80072de <TIM_Base_SetConfig+0xb2>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a2e      	ldr	r2, [pc, #184]	; (800736c <TIM_Base_SetConfig+0x140>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d013      	beq.n	80072de <TIM_Base_SetConfig+0xb2>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a2d      	ldr	r2, [pc, #180]	; (8007370 <TIM_Base_SetConfig+0x144>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d00f      	beq.n	80072de <TIM_Base_SetConfig+0xb2>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a2c      	ldr	r2, [pc, #176]	; (8007374 <TIM_Base_SetConfig+0x148>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d00b      	beq.n	80072de <TIM_Base_SetConfig+0xb2>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a2b      	ldr	r2, [pc, #172]	; (8007378 <TIM_Base_SetConfig+0x14c>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d007      	beq.n	80072de <TIM_Base_SetConfig+0xb2>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a2a      	ldr	r2, [pc, #168]	; (800737c <TIM_Base_SetConfig+0x150>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d003      	beq.n	80072de <TIM_Base_SetConfig+0xb2>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a29      	ldr	r2, [pc, #164]	; (8007380 <TIM_Base_SetConfig+0x154>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d108      	bne.n	80072f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	689a      	ldr	r2, [r3, #8]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a10      	ldr	r2, [pc, #64]	; (8007358 <TIM_Base_SetConfig+0x12c>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d003      	beq.n	8007324 <TIM_Base_SetConfig+0xf8>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a12      	ldr	r2, [pc, #72]	; (8007368 <TIM_Base_SetConfig+0x13c>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d103      	bne.n	800732c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	691a      	ldr	r2, [r3, #16]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b01      	cmp	r3, #1
 800733c:	d105      	bne.n	800734a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	f023 0201 	bic.w	r2, r3, #1
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	611a      	str	r2, [r3, #16]
  }
}
 800734a:	bf00      	nop
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	40010000 	.word	0x40010000
 800735c:	40000400 	.word	0x40000400
 8007360:	40000800 	.word	0x40000800
 8007364:	40000c00 	.word	0x40000c00
 8007368:	40010400 	.word	0x40010400
 800736c:	40014000 	.word	0x40014000
 8007370:	40014400 	.word	0x40014400
 8007374:	40014800 	.word	0x40014800
 8007378:	40001800 	.word	0x40001800
 800737c:	40001c00 	.word	0x40001c00
 8007380:	40002000 	.word	0x40002000

08007384 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007394:	2b01      	cmp	r3, #1
 8007396:	d101      	bne.n	800739c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007398:	2302      	movs	r3, #2
 800739a:	e05a      	b.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2202      	movs	r2, #2
 80073a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a21      	ldr	r2, [pc, #132]	; (8007460 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d022      	beq.n	8007426 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e8:	d01d      	beq.n	8007426 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a1d      	ldr	r2, [pc, #116]	; (8007464 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d018      	beq.n	8007426 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a1b      	ldr	r2, [pc, #108]	; (8007468 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d013      	beq.n	8007426 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a1a      	ldr	r2, [pc, #104]	; (800746c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d00e      	beq.n	8007426 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a18      	ldr	r2, [pc, #96]	; (8007470 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d009      	beq.n	8007426 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a17      	ldr	r2, [pc, #92]	; (8007474 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d004      	beq.n	8007426 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a15      	ldr	r2, [pc, #84]	; (8007478 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d10c      	bne.n	8007440 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800742c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	4313      	orrs	r3, r2
 8007436:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3714      	adds	r7, #20
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	40010000 	.word	0x40010000
 8007464:	40000400 	.word	0x40000400
 8007468:	40000800 	.word	0x40000800
 800746c:	40000c00 	.word	0x40000c00
 8007470:	40010400 	.word	0x40010400
 8007474:	40014000 	.word	0x40014000
 8007478:	40001800 	.word	0x40001800

0800747c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d101      	bne.n	80074b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e042      	b.n	800753c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d106      	bne.n	80074d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7fb f9f2 	bl	80028b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2224      	movs	r2, #36	; 0x24
 80074d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68da      	ldr	r2, [r3, #12]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fdbd 	bl	8008068 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	691a      	ldr	r2, [r3, #16]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	695a      	ldr	r2, [r3, #20]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800750c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68da      	ldr	r2, [r3, #12]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800751c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2220      	movs	r2, #32
 8007528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2220      	movs	r2, #32
 8007530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b08a      	sub	sp, #40	; 0x28
 8007548:	af02      	add	r7, sp, #8
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	603b      	str	r3, [r7, #0]
 8007550:	4613      	mov	r3, r2
 8007552:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007554:	2300      	movs	r3, #0
 8007556:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b20      	cmp	r3, #32
 8007562:	d175      	bne.n	8007650 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d002      	beq.n	8007570 <HAL_UART_Transmit+0x2c>
 800756a:	88fb      	ldrh	r3, [r7, #6]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e06e      	b.n	8007652 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2221      	movs	r2, #33	; 0x21
 800757e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007582:	f7fb fb81 	bl	8002c88 <HAL_GetTick>
 8007586:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	88fa      	ldrh	r2, [r7, #6]
 800758c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	88fa      	ldrh	r2, [r7, #6]
 8007592:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800759c:	d108      	bne.n	80075b0 <HAL_UART_Transmit+0x6c>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d104      	bne.n	80075b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	61bb      	str	r3, [r7, #24]
 80075ae:	e003      	b.n	80075b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075b4:	2300      	movs	r3, #0
 80075b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80075b8:	e02e      	b.n	8007618 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2200      	movs	r2, #0
 80075c2:	2180      	movs	r1, #128	; 0x80
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f000 fb1f 	bl	8007c08 <UART_WaitOnFlagUntilTimeout>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d005      	beq.n	80075dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2220      	movs	r2, #32
 80075d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e03a      	b.n	8007652 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10b      	bne.n	80075fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	461a      	mov	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	3302      	adds	r3, #2
 80075f6:	61bb      	str	r3, [r7, #24]
 80075f8:	e007      	b.n	800760a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	781a      	ldrb	r2, [r3, #0]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	3301      	adds	r3, #1
 8007608:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800760e:	b29b      	uxth	r3, r3
 8007610:	3b01      	subs	r3, #1
 8007612:	b29a      	uxth	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800761c:	b29b      	uxth	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1cb      	bne.n	80075ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2200      	movs	r2, #0
 800762a:	2140      	movs	r1, #64	; 0x40
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 faeb 	bl	8007c08 <UART_WaitOnFlagUntilTimeout>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d005      	beq.n	8007644 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2220      	movs	r2, #32
 800763c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	e006      	b.n	8007652 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2220      	movs	r2, #32
 8007648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	e000      	b.n	8007652 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007650:	2302      	movs	r3, #2
  }
}
 8007652:	4618      	mov	r0, r3
 8007654:	3720      	adds	r7, #32
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b084      	sub	sp, #16
 800765e:	af00      	add	r7, sp, #0
 8007660:	60f8      	str	r0, [r7, #12]
 8007662:	60b9      	str	r1, [r7, #8]
 8007664:	4613      	mov	r3, r2
 8007666:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b20      	cmp	r3, #32
 8007672:	d112      	bne.n	800769a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d002      	beq.n	8007680 <HAL_UART_Receive_IT+0x26>
 800767a:	88fb      	ldrh	r3, [r7, #6]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e00b      	b.n	800769c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800768a:	88fb      	ldrh	r3, [r7, #6]
 800768c:	461a      	mov	r2, r3
 800768e:	68b9      	ldr	r1, [r7, #8]
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f000 fb12 	bl	8007cba <UART_Start_Receive_IT>
 8007696:	4603      	mov	r3, r0
 8007698:	e000      	b.n	800769c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800769a:	2302      	movs	r3, #2
  }
}
 800769c:	4618      	mov	r0, r3
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b0ba      	sub	sp, #232	; 0xe8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80076d0:	2300      	movs	r3, #0
 80076d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80076d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076da:	f003 030f 	and.w	r3, r3, #15
 80076de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80076e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10f      	bne.n	800770a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ee:	f003 0320 	and.w	r3, r3, #32
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d009      	beq.n	800770a <HAL_UART_IRQHandler+0x66>
 80076f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076fa:	f003 0320 	and.w	r3, r3, #32
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d003      	beq.n	800770a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fbf2 	bl	8007eec <UART_Receive_IT>
      return;
 8007708:	e25b      	b.n	8007bc2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800770a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 80de 	beq.w	80078d0 <HAL_UART_IRQHandler+0x22c>
 8007714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007718:	f003 0301 	and.w	r3, r3, #1
 800771c:	2b00      	cmp	r3, #0
 800771e:	d106      	bne.n	800772e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007724:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 80d1 	beq.w	80078d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800772e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00b      	beq.n	8007752 <HAL_UART_IRQHandler+0xae>
 800773a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800773e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007742:	2b00      	cmp	r3, #0
 8007744:	d005      	beq.n	8007752 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800774a:	f043 0201 	orr.w	r2, r3, #1
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007756:	f003 0304 	and.w	r3, r3, #4
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00b      	beq.n	8007776 <HAL_UART_IRQHandler+0xd2>
 800775e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	2b00      	cmp	r3, #0
 8007768:	d005      	beq.n	8007776 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800776e:	f043 0202 	orr.w	r2, r3, #2
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800777a:	f003 0302 	and.w	r3, r3, #2
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00b      	beq.n	800779a <HAL_UART_IRQHandler+0xf6>
 8007782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b00      	cmp	r3, #0
 800778c:	d005      	beq.n	800779a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007792:	f043 0204 	orr.w	r2, r3, #4
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800779a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800779e:	f003 0308 	and.w	r3, r3, #8
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d011      	beq.n	80077ca <HAL_UART_IRQHandler+0x126>
 80077a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077aa:	f003 0320 	and.w	r3, r3, #32
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d105      	bne.n	80077be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80077b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d005      	beq.n	80077ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c2:	f043 0208 	orr.w	r2, r3, #8
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f000 81f2 	beq.w	8007bb8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d8:	f003 0320 	and.w	r3, r3, #32
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d008      	beq.n	80077f2 <HAL_UART_IRQHandler+0x14e>
 80077e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077e4:	f003 0320 	and.w	r3, r3, #32
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fb7d 	bl	8007eec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	695b      	ldr	r3, [r3, #20]
 80077f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077fc:	2b40      	cmp	r3, #64	; 0x40
 80077fe:	bf0c      	ite	eq
 8007800:	2301      	moveq	r3, #1
 8007802:	2300      	movne	r3, #0
 8007804:	b2db      	uxtb	r3, r3
 8007806:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800780e:	f003 0308 	and.w	r3, r3, #8
 8007812:	2b00      	cmp	r3, #0
 8007814:	d103      	bne.n	800781e <HAL_UART_IRQHandler+0x17a>
 8007816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800781a:	2b00      	cmp	r3, #0
 800781c:	d04f      	beq.n	80078be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fa85 	bl	8007d2e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800782e:	2b40      	cmp	r3, #64	; 0x40
 8007830:	d141      	bne.n	80078b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3314      	adds	r3, #20
 8007838:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007840:	e853 3f00 	ldrex	r3, [r3]
 8007844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007848:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800784c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007850:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3314      	adds	r3, #20
 800785a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800785e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007862:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800786a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007876:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1d9      	bne.n	8007832 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007882:	2b00      	cmp	r3, #0
 8007884:	d013      	beq.n	80078ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800788a:	4a7e      	ldr	r2, [pc, #504]	; (8007a84 <HAL_UART_IRQHandler+0x3e0>)
 800788c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007892:	4618      	mov	r0, r3
 8007894:	f7fb fdac 	bl	80033f0 <HAL_DMA_Abort_IT>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d016      	beq.n	80078cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80078a8:	4610      	mov	r0, r2
 80078aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ac:	e00e      	b.n	80078cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f994 	bl	8007bdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b4:	e00a      	b.n	80078cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f990 	bl	8007bdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078bc:	e006      	b.n	80078cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f98c 	bl	8007bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80078ca:	e175      	b.n	8007bb8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078cc:	bf00      	nop
    return;
 80078ce:	e173      	b.n	8007bb8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	f040 814f 	bne.w	8007b78 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80078da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078de:	f003 0310 	and.w	r3, r3, #16
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 8148 	beq.w	8007b78 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80078e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078ec:	f003 0310 	and.w	r3, r3, #16
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 8141 	beq.w	8007b78 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078f6:	2300      	movs	r3, #0
 80078f8:	60bb      	str	r3, [r7, #8]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	60bb      	str	r3, [r7, #8]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	60bb      	str	r3, [r7, #8]
 800790a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007916:	2b40      	cmp	r3, #64	; 0x40
 8007918:	f040 80b6 	bne.w	8007a88 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007928:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800792c:	2b00      	cmp	r3, #0
 800792e:	f000 8145 	beq.w	8007bbc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007936:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800793a:	429a      	cmp	r2, r3
 800793c:	f080 813e 	bcs.w	8007bbc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007946:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794c:	69db      	ldr	r3, [r3, #28]
 800794e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007952:	f000 8088 	beq.w	8007a66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	330c      	adds	r3, #12
 800795c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007960:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007964:	e853 3f00 	ldrex	r3, [r3]
 8007968:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800796c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007974:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	330c      	adds	r3, #12
 800797e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007982:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007986:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800798e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800799a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1d9      	bne.n	8007956 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3314      	adds	r3, #20
 80079a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079ac:	e853 3f00 	ldrex	r3, [r3]
 80079b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80079b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079b4:	f023 0301 	bic.w	r3, r3, #1
 80079b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3314      	adds	r3, #20
 80079c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80079c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80079ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80079ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80079d2:	e841 2300 	strex	r3, r2, [r1]
 80079d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80079d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e1      	bne.n	80079a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	3314      	adds	r3, #20
 80079e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079e8:	e853 3f00 	ldrex	r3, [r3]
 80079ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80079ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3314      	adds	r3, #20
 80079fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a0a:	e841 2300 	strex	r3, r2, [r1]
 8007a0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1e3      	bne.n	80079de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	330c      	adds	r3, #12
 8007a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a36:	f023 0310 	bic.w	r3, r3, #16
 8007a3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	330c      	adds	r3, #12
 8007a44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007a48:	65ba      	str	r2, [r7, #88]	; 0x58
 8007a4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a50:	e841 2300 	strex	r3, r2, [r1]
 8007a54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1e3      	bne.n	8007a24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7fb fc55 	bl	8003310 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2202      	movs	r2, #2
 8007a6a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f8b7 	bl	8007bf0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a82:	e09b      	b.n	8007bbc <HAL_UART_IRQHandler+0x518>
 8007a84:	08007df5 	.word	0x08007df5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 808e 	beq.w	8007bc0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007aa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f000 8089 	beq.w	8007bc0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	330c      	adds	r3, #12
 8007ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab8:	e853 3f00 	ldrex	r3, [r3]
 8007abc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ac4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	330c      	adds	r3, #12
 8007ace:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007ad2:	647a      	str	r2, [r7, #68]	; 0x44
 8007ad4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ad8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ada:	e841 2300 	strex	r3, r2, [r1]
 8007ade:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1e3      	bne.n	8007aae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3314      	adds	r3, #20
 8007aec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af0:	e853 3f00 	ldrex	r3, [r3]
 8007af4:	623b      	str	r3, [r7, #32]
   return(result);
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	f023 0301 	bic.w	r3, r3, #1
 8007afc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3314      	adds	r3, #20
 8007b06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b0a:	633a      	str	r2, [r7, #48]	; 0x30
 8007b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b12:	e841 2300 	strex	r3, r2, [r1]
 8007b16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1e3      	bne.n	8007ae6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2220      	movs	r2, #32
 8007b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	330c      	adds	r3, #12
 8007b32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	e853 3f00 	ldrex	r3, [r3]
 8007b3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f023 0310 	bic.w	r3, r3, #16
 8007b42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	330c      	adds	r3, #12
 8007b4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007b50:	61fa      	str	r2, [r7, #28]
 8007b52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b54:	69b9      	ldr	r1, [r7, #24]
 8007b56:	69fa      	ldr	r2, [r7, #28]
 8007b58:	e841 2300 	strex	r3, r2, [r1]
 8007b5c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d1e3      	bne.n	8007b2c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2202      	movs	r2, #2
 8007b68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b6e:	4619      	mov	r1, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f83d 	bl	8007bf0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b76:	e023      	b.n	8007bc0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d009      	beq.n	8007b98 <HAL_UART_IRQHandler+0x4f4>
 8007b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d003      	beq.n	8007b98 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f943 	bl	8007e1c <UART_Transmit_IT>
    return;
 8007b96:	e014      	b.n	8007bc2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00e      	beq.n	8007bc2 <HAL_UART_IRQHandler+0x51e>
 8007ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d008      	beq.n	8007bc2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f983 	bl	8007ebc <UART_EndTransmit_IT>
    return;
 8007bb6:	e004      	b.n	8007bc2 <HAL_UART_IRQHandler+0x51e>
    return;
 8007bb8:	bf00      	nop
 8007bba:	e002      	b.n	8007bc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8007bbc:	bf00      	nop
 8007bbe:	e000      	b.n	8007bc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8007bc0:	bf00      	nop
  }
}
 8007bc2:	37e8      	adds	r7, #232	; 0xe8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	603b      	str	r3, [r7, #0]
 8007c14:	4613      	mov	r3, r2
 8007c16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c18:	e03b      	b.n	8007c92 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c20:	d037      	beq.n	8007c92 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c22:	f7fb f831 	bl	8002c88 <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	6a3a      	ldr	r2, [r7, #32]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d302      	bcc.n	8007c38 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e03a      	b.n	8007cb2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	f003 0304 	and.w	r3, r3, #4
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d023      	beq.n	8007c92 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b80      	cmp	r3, #128	; 0x80
 8007c4e:	d020      	beq.n	8007c92 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2b40      	cmp	r3, #64	; 0x40
 8007c54:	d01d      	beq.n	8007c92 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0308 	and.w	r3, r3, #8
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	d116      	bne.n	8007c92 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007c64:	2300      	movs	r3, #0
 8007c66:	617b      	str	r3, [r7, #20]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	617b      	str	r3, [r7, #20]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	617b      	str	r3, [r7, #20]
 8007c78:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 f857 	bl	8007d2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2208      	movs	r2, #8
 8007c84:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e00f      	b.n	8007cb2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	bf0c      	ite	eq
 8007ca2:	2301      	moveq	r3, #1
 8007ca4:	2300      	movne	r3, #0
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	461a      	mov	r2, r3
 8007caa:	79fb      	ldrb	r3, [r7, #7]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d0b4      	beq.n	8007c1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3718      	adds	r7, #24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cba:	b480      	push	{r7}
 8007cbc:	b085      	sub	sp, #20
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	60f8      	str	r0, [r7, #12]
 8007cc2:	60b9      	str	r1, [r7, #8]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	88fa      	ldrh	r2, [r7, #6]
 8007cd2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	88fa      	ldrh	r2, [r7, #6]
 8007cd8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2222      	movs	r2, #34	; 0x22
 8007ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d007      	beq.n	8007d00 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68da      	ldr	r2, [r3, #12]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cfe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	695a      	ldr	r2, [r3, #20]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f042 0201 	orr.w	r2, r2, #1
 8007d0e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68da      	ldr	r2, [r3, #12]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f042 0220 	orr.w	r2, r2, #32
 8007d1e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b095      	sub	sp, #84	; 0x54
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	330c      	adds	r3, #12
 8007d3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d40:	e853 3f00 	ldrex	r3, [r3]
 8007d44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	330c      	adds	r3, #12
 8007d54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d56:	643a      	str	r2, [r7, #64]	; 0x40
 8007d58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d5e:	e841 2300 	strex	r3, r2, [r1]
 8007d62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1e5      	bne.n	8007d36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	3314      	adds	r3, #20
 8007d70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	e853 3f00 	ldrex	r3, [r3]
 8007d78:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	f023 0301 	bic.w	r3, r3, #1
 8007d80:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3314      	adds	r3, #20
 8007d88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d92:	e841 2300 	strex	r3, r2, [r1]
 8007d96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1e5      	bne.n	8007d6a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d119      	bne.n	8007dda <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	330c      	adds	r3, #12
 8007dac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	e853 3f00 	ldrex	r3, [r3]
 8007db4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	f023 0310 	bic.w	r3, r3, #16
 8007dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	330c      	adds	r3, #12
 8007dc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dc6:	61ba      	str	r2, [r7, #24]
 8007dc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dca:	6979      	ldr	r1, [r7, #20]
 8007dcc:	69ba      	ldr	r2, [r7, #24]
 8007dce:	e841 2300 	strex	r3, r2, [r1]
 8007dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1e5      	bne.n	8007da6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2220      	movs	r2, #32
 8007dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007de8:	bf00      	nop
 8007dea:	3754      	adds	r7, #84	; 0x54
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f7ff fee4 	bl	8007bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e14:	bf00      	nop
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b21      	cmp	r3, #33	; 0x21
 8007e2e:	d13e      	bne.n	8007eae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e38:	d114      	bne.n	8007e64 <UART_Transmit_IT+0x48>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d110      	bne.n	8007e64 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	881b      	ldrh	r3, [r3, #0]
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	1c9a      	adds	r2, r3, #2
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	621a      	str	r2, [r3, #32]
 8007e62:	e008      	b.n	8007e76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a1b      	ldr	r3, [r3, #32]
 8007e68:	1c59      	adds	r1, r3, #1
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	6211      	str	r1, [r2, #32]
 8007e6e:	781a      	ldrb	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	4619      	mov	r1, r3
 8007e84:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10f      	bne.n	8007eaa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68da      	ldr	r2, [r3, #12]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68da      	ldr	r2, [r3, #12]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ea8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	e000      	b.n	8007eb0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007eae:	2302      	movs	r3, #2
  }
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68da      	ldr	r2, [r3, #12]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ed2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2220      	movs	r2, #32
 8007ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7ff fe73 	bl	8007bc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08c      	sub	sp, #48	; 0x30
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b22      	cmp	r3, #34	; 0x22
 8007efe:	f040 80ae 	bne.w	800805e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f0a:	d117      	bne.n	8007f3c <UART_Receive_IT+0x50>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d113      	bne.n	8007f3c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f14:	2300      	movs	r3, #0
 8007f16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f34:	1c9a      	adds	r2, r3, #2
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	629a      	str	r2, [r3, #40]	; 0x28
 8007f3a:	e026      	b.n	8007f8a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007f42:	2300      	movs	r3, #0
 8007f44:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f4e:	d007      	beq.n	8007f60 <UART_Receive_IT+0x74>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10a      	bne.n	8007f6e <UART_Receive_IT+0x82>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d106      	bne.n	8007f6e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	b2da      	uxtb	r2, r3
 8007f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6a:	701a      	strb	r2, [r3, #0]
 8007f6c:	e008      	b.n	8007f80 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f7a:	b2da      	uxtb	r2, r3
 8007f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f84:	1c5a      	adds	r2, r3, #1
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	3b01      	subs	r3, #1
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	4619      	mov	r1, r3
 8007f98:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d15d      	bne.n	800805a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68da      	ldr	r2, [r3, #12]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f022 0220 	bic.w	r2, r2, #32
 8007fac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68da      	ldr	r2, [r3, #12]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	695a      	ldr	r2, [r3, #20]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f022 0201 	bic.w	r2, r2, #1
 8007fcc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2220      	movs	r2, #32
 8007fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d135      	bne.n	8008050 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	330c      	adds	r3, #12
 8007ff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	e853 3f00 	ldrex	r3, [r3]
 8007ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	f023 0310 	bic.w	r3, r3, #16
 8008000:	627b      	str	r3, [r7, #36]	; 0x24
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	330c      	adds	r3, #12
 8008008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800800a:	623a      	str	r2, [r7, #32]
 800800c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800e:	69f9      	ldr	r1, [r7, #28]
 8008010:	6a3a      	ldr	r2, [r7, #32]
 8008012:	e841 2300 	strex	r3, r2, [r1]
 8008016:	61bb      	str	r3, [r7, #24]
   return(result);
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1e5      	bne.n	8007fea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0310 	and.w	r3, r3, #16
 8008028:	2b10      	cmp	r3, #16
 800802a:	d10a      	bne.n	8008042 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800802c:	2300      	movs	r3, #0
 800802e:	60fb      	str	r3, [r7, #12]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	60fb      	str	r3, [r7, #12]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008046:	4619      	mov	r1, r3
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7ff fdd1 	bl	8007bf0 <HAL_UARTEx_RxEventCallback>
 800804e:	e002      	b.n	8008056 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7fa fd27 	bl	8002aa4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	e002      	b.n	8008060 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	e000      	b.n	8008060 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800805e:	2302      	movs	r3, #2
  }
}
 8008060:	4618      	mov	r0, r3
 8008062:	3730      	adds	r7, #48	; 0x30
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800806c:	b0c0      	sub	sp, #256	; 0x100
 800806e:	af00      	add	r7, sp, #0
 8008070:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008084:	68d9      	ldr	r1, [r3, #12]
 8008086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	ea40 0301 	orr.w	r3, r0, r1
 8008090:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008096:	689a      	ldr	r2, [r3, #8]
 8008098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	431a      	orrs	r2, r3
 80080a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	431a      	orrs	r2, r3
 80080a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ac:	69db      	ldr	r3, [r3, #28]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80080b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80080c0:	f021 010c 	bic.w	r1, r1, #12
 80080c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080ce:	430b      	orrs	r3, r1
 80080d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80080de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e2:	6999      	ldr	r1, [r3, #24]
 80080e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	ea40 0301 	orr.w	r3, r0, r1
 80080ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80080f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	4b8f      	ldr	r3, [pc, #572]	; (8008334 <UART_SetConfig+0x2cc>)
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d005      	beq.n	8008108 <UART_SetConfig+0xa0>
 80080fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	4b8d      	ldr	r3, [pc, #564]	; (8008338 <UART_SetConfig+0x2d0>)
 8008104:	429a      	cmp	r2, r3
 8008106:	d104      	bne.n	8008112 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008108:	f7fd fab0 	bl	800566c <HAL_RCC_GetPCLK2Freq>
 800810c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008110:	e003      	b.n	800811a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008112:	f7fd fa97 	bl	8005644 <HAL_RCC_GetPCLK1Freq>
 8008116:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800811a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800811e:	69db      	ldr	r3, [r3, #28]
 8008120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008124:	f040 810c 	bne.w	8008340 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800812c:	2200      	movs	r2, #0
 800812e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008132:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008136:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800813a:	4622      	mov	r2, r4
 800813c:	462b      	mov	r3, r5
 800813e:	1891      	adds	r1, r2, r2
 8008140:	65b9      	str	r1, [r7, #88]	; 0x58
 8008142:	415b      	adcs	r3, r3
 8008144:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008146:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800814a:	4621      	mov	r1, r4
 800814c:	eb12 0801 	adds.w	r8, r2, r1
 8008150:	4629      	mov	r1, r5
 8008152:	eb43 0901 	adc.w	r9, r3, r1
 8008156:	f04f 0200 	mov.w	r2, #0
 800815a:	f04f 0300 	mov.w	r3, #0
 800815e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008162:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008166:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800816a:	4690      	mov	r8, r2
 800816c:	4699      	mov	r9, r3
 800816e:	4623      	mov	r3, r4
 8008170:	eb18 0303 	adds.w	r3, r8, r3
 8008174:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008178:	462b      	mov	r3, r5
 800817a:	eb49 0303 	adc.w	r3, r9, r3
 800817e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800818e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008192:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008196:	460b      	mov	r3, r1
 8008198:	18db      	adds	r3, r3, r3
 800819a:	653b      	str	r3, [r7, #80]	; 0x50
 800819c:	4613      	mov	r3, r2
 800819e:	eb42 0303 	adc.w	r3, r2, r3
 80081a2:	657b      	str	r3, [r7, #84]	; 0x54
 80081a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80081a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80081ac:	f7f8 f826 	bl	80001fc <__aeabi_uldivmod>
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	4b61      	ldr	r3, [pc, #388]	; (800833c <UART_SetConfig+0x2d4>)
 80081b6:	fba3 2302 	umull	r2, r3, r3, r2
 80081ba:	095b      	lsrs	r3, r3, #5
 80081bc:	011c      	lsls	r4, r3, #4
 80081be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081c2:	2200      	movs	r2, #0
 80081c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80081cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80081d0:	4642      	mov	r2, r8
 80081d2:	464b      	mov	r3, r9
 80081d4:	1891      	adds	r1, r2, r2
 80081d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80081d8:	415b      	adcs	r3, r3
 80081da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80081e0:	4641      	mov	r1, r8
 80081e2:	eb12 0a01 	adds.w	sl, r2, r1
 80081e6:	4649      	mov	r1, r9
 80081e8:	eb43 0b01 	adc.w	fp, r3, r1
 80081ec:	f04f 0200 	mov.w	r2, #0
 80081f0:	f04f 0300 	mov.w	r3, #0
 80081f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80081f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80081fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008200:	4692      	mov	sl, r2
 8008202:	469b      	mov	fp, r3
 8008204:	4643      	mov	r3, r8
 8008206:	eb1a 0303 	adds.w	r3, sl, r3
 800820a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800820e:	464b      	mov	r3, r9
 8008210:	eb4b 0303 	adc.w	r3, fp, r3
 8008214:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008224:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008228:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800822c:	460b      	mov	r3, r1
 800822e:	18db      	adds	r3, r3, r3
 8008230:	643b      	str	r3, [r7, #64]	; 0x40
 8008232:	4613      	mov	r3, r2
 8008234:	eb42 0303 	adc.w	r3, r2, r3
 8008238:	647b      	str	r3, [r7, #68]	; 0x44
 800823a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800823e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008242:	f7f7 ffdb 	bl	80001fc <__aeabi_uldivmod>
 8008246:	4602      	mov	r2, r0
 8008248:	460b      	mov	r3, r1
 800824a:	4611      	mov	r1, r2
 800824c:	4b3b      	ldr	r3, [pc, #236]	; (800833c <UART_SetConfig+0x2d4>)
 800824e:	fba3 2301 	umull	r2, r3, r3, r1
 8008252:	095b      	lsrs	r3, r3, #5
 8008254:	2264      	movs	r2, #100	; 0x64
 8008256:	fb02 f303 	mul.w	r3, r2, r3
 800825a:	1acb      	subs	r3, r1, r3
 800825c:	00db      	lsls	r3, r3, #3
 800825e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008262:	4b36      	ldr	r3, [pc, #216]	; (800833c <UART_SetConfig+0x2d4>)
 8008264:	fba3 2302 	umull	r2, r3, r3, r2
 8008268:	095b      	lsrs	r3, r3, #5
 800826a:	005b      	lsls	r3, r3, #1
 800826c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008270:	441c      	add	r4, r3
 8008272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008276:	2200      	movs	r2, #0
 8008278:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800827c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008280:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008284:	4642      	mov	r2, r8
 8008286:	464b      	mov	r3, r9
 8008288:	1891      	adds	r1, r2, r2
 800828a:	63b9      	str	r1, [r7, #56]	; 0x38
 800828c:	415b      	adcs	r3, r3
 800828e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008290:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008294:	4641      	mov	r1, r8
 8008296:	1851      	adds	r1, r2, r1
 8008298:	6339      	str	r1, [r7, #48]	; 0x30
 800829a:	4649      	mov	r1, r9
 800829c:	414b      	adcs	r3, r1
 800829e:	637b      	str	r3, [r7, #52]	; 0x34
 80082a0:	f04f 0200 	mov.w	r2, #0
 80082a4:	f04f 0300 	mov.w	r3, #0
 80082a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80082ac:	4659      	mov	r1, fp
 80082ae:	00cb      	lsls	r3, r1, #3
 80082b0:	4651      	mov	r1, sl
 80082b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082b6:	4651      	mov	r1, sl
 80082b8:	00ca      	lsls	r2, r1, #3
 80082ba:	4610      	mov	r0, r2
 80082bc:	4619      	mov	r1, r3
 80082be:	4603      	mov	r3, r0
 80082c0:	4642      	mov	r2, r8
 80082c2:	189b      	adds	r3, r3, r2
 80082c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082c8:	464b      	mov	r3, r9
 80082ca:	460a      	mov	r2, r1
 80082cc:	eb42 0303 	adc.w	r3, r2, r3
 80082d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80082e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80082e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80082e8:	460b      	mov	r3, r1
 80082ea:	18db      	adds	r3, r3, r3
 80082ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80082ee:	4613      	mov	r3, r2
 80082f0:	eb42 0303 	adc.w	r3, r2, r3
 80082f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80082fe:	f7f7 ff7d 	bl	80001fc <__aeabi_uldivmod>
 8008302:	4602      	mov	r2, r0
 8008304:	460b      	mov	r3, r1
 8008306:	4b0d      	ldr	r3, [pc, #52]	; (800833c <UART_SetConfig+0x2d4>)
 8008308:	fba3 1302 	umull	r1, r3, r3, r2
 800830c:	095b      	lsrs	r3, r3, #5
 800830e:	2164      	movs	r1, #100	; 0x64
 8008310:	fb01 f303 	mul.w	r3, r1, r3
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	00db      	lsls	r3, r3, #3
 8008318:	3332      	adds	r3, #50	; 0x32
 800831a:	4a08      	ldr	r2, [pc, #32]	; (800833c <UART_SetConfig+0x2d4>)
 800831c:	fba2 2303 	umull	r2, r3, r2, r3
 8008320:	095b      	lsrs	r3, r3, #5
 8008322:	f003 0207 	and.w	r2, r3, #7
 8008326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4422      	add	r2, r4
 800832e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008330:	e106      	b.n	8008540 <UART_SetConfig+0x4d8>
 8008332:	bf00      	nop
 8008334:	40011000 	.word	0x40011000
 8008338:	40011400 	.word	0x40011400
 800833c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008340:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008344:	2200      	movs	r2, #0
 8008346:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800834a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800834e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008352:	4642      	mov	r2, r8
 8008354:	464b      	mov	r3, r9
 8008356:	1891      	adds	r1, r2, r2
 8008358:	6239      	str	r1, [r7, #32]
 800835a:	415b      	adcs	r3, r3
 800835c:	627b      	str	r3, [r7, #36]	; 0x24
 800835e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008362:	4641      	mov	r1, r8
 8008364:	1854      	adds	r4, r2, r1
 8008366:	4649      	mov	r1, r9
 8008368:	eb43 0501 	adc.w	r5, r3, r1
 800836c:	f04f 0200 	mov.w	r2, #0
 8008370:	f04f 0300 	mov.w	r3, #0
 8008374:	00eb      	lsls	r3, r5, #3
 8008376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800837a:	00e2      	lsls	r2, r4, #3
 800837c:	4614      	mov	r4, r2
 800837e:	461d      	mov	r5, r3
 8008380:	4643      	mov	r3, r8
 8008382:	18e3      	adds	r3, r4, r3
 8008384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008388:	464b      	mov	r3, r9
 800838a:	eb45 0303 	adc.w	r3, r5, r3
 800838e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800839e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083a2:	f04f 0200 	mov.w	r2, #0
 80083a6:	f04f 0300 	mov.w	r3, #0
 80083aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80083ae:	4629      	mov	r1, r5
 80083b0:	008b      	lsls	r3, r1, #2
 80083b2:	4621      	mov	r1, r4
 80083b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083b8:	4621      	mov	r1, r4
 80083ba:	008a      	lsls	r2, r1, #2
 80083bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80083c0:	f7f7 ff1c 	bl	80001fc <__aeabi_uldivmod>
 80083c4:	4602      	mov	r2, r0
 80083c6:	460b      	mov	r3, r1
 80083c8:	4b60      	ldr	r3, [pc, #384]	; (800854c <UART_SetConfig+0x4e4>)
 80083ca:	fba3 2302 	umull	r2, r3, r3, r2
 80083ce:	095b      	lsrs	r3, r3, #5
 80083d0:	011c      	lsls	r4, r3, #4
 80083d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083d6:	2200      	movs	r2, #0
 80083d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80083dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80083e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80083e4:	4642      	mov	r2, r8
 80083e6:	464b      	mov	r3, r9
 80083e8:	1891      	adds	r1, r2, r2
 80083ea:	61b9      	str	r1, [r7, #24]
 80083ec:	415b      	adcs	r3, r3
 80083ee:	61fb      	str	r3, [r7, #28]
 80083f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083f4:	4641      	mov	r1, r8
 80083f6:	1851      	adds	r1, r2, r1
 80083f8:	6139      	str	r1, [r7, #16]
 80083fa:	4649      	mov	r1, r9
 80083fc:	414b      	adcs	r3, r1
 80083fe:	617b      	str	r3, [r7, #20]
 8008400:	f04f 0200 	mov.w	r2, #0
 8008404:	f04f 0300 	mov.w	r3, #0
 8008408:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800840c:	4659      	mov	r1, fp
 800840e:	00cb      	lsls	r3, r1, #3
 8008410:	4651      	mov	r1, sl
 8008412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008416:	4651      	mov	r1, sl
 8008418:	00ca      	lsls	r2, r1, #3
 800841a:	4610      	mov	r0, r2
 800841c:	4619      	mov	r1, r3
 800841e:	4603      	mov	r3, r0
 8008420:	4642      	mov	r2, r8
 8008422:	189b      	adds	r3, r3, r2
 8008424:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008428:	464b      	mov	r3, r9
 800842a:	460a      	mov	r2, r1
 800842c:	eb42 0303 	adc.w	r3, r2, r3
 8008430:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	67bb      	str	r3, [r7, #120]	; 0x78
 800843e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008440:	f04f 0200 	mov.w	r2, #0
 8008444:	f04f 0300 	mov.w	r3, #0
 8008448:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800844c:	4649      	mov	r1, r9
 800844e:	008b      	lsls	r3, r1, #2
 8008450:	4641      	mov	r1, r8
 8008452:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008456:	4641      	mov	r1, r8
 8008458:	008a      	lsls	r2, r1, #2
 800845a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800845e:	f7f7 fecd 	bl	80001fc <__aeabi_uldivmod>
 8008462:	4602      	mov	r2, r0
 8008464:	460b      	mov	r3, r1
 8008466:	4611      	mov	r1, r2
 8008468:	4b38      	ldr	r3, [pc, #224]	; (800854c <UART_SetConfig+0x4e4>)
 800846a:	fba3 2301 	umull	r2, r3, r3, r1
 800846e:	095b      	lsrs	r3, r3, #5
 8008470:	2264      	movs	r2, #100	; 0x64
 8008472:	fb02 f303 	mul.w	r3, r2, r3
 8008476:	1acb      	subs	r3, r1, r3
 8008478:	011b      	lsls	r3, r3, #4
 800847a:	3332      	adds	r3, #50	; 0x32
 800847c:	4a33      	ldr	r2, [pc, #204]	; (800854c <UART_SetConfig+0x4e4>)
 800847e:	fba2 2303 	umull	r2, r3, r2, r3
 8008482:	095b      	lsrs	r3, r3, #5
 8008484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008488:	441c      	add	r4, r3
 800848a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800848e:	2200      	movs	r2, #0
 8008490:	673b      	str	r3, [r7, #112]	; 0x70
 8008492:	677a      	str	r2, [r7, #116]	; 0x74
 8008494:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008498:	4642      	mov	r2, r8
 800849a:	464b      	mov	r3, r9
 800849c:	1891      	adds	r1, r2, r2
 800849e:	60b9      	str	r1, [r7, #8]
 80084a0:	415b      	adcs	r3, r3
 80084a2:	60fb      	str	r3, [r7, #12]
 80084a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084a8:	4641      	mov	r1, r8
 80084aa:	1851      	adds	r1, r2, r1
 80084ac:	6039      	str	r1, [r7, #0]
 80084ae:	4649      	mov	r1, r9
 80084b0:	414b      	adcs	r3, r1
 80084b2:	607b      	str	r3, [r7, #4]
 80084b4:	f04f 0200 	mov.w	r2, #0
 80084b8:	f04f 0300 	mov.w	r3, #0
 80084bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80084c0:	4659      	mov	r1, fp
 80084c2:	00cb      	lsls	r3, r1, #3
 80084c4:	4651      	mov	r1, sl
 80084c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084ca:	4651      	mov	r1, sl
 80084cc:	00ca      	lsls	r2, r1, #3
 80084ce:	4610      	mov	r0, r2
 80084d0:	4619      	mov	r1, r3
 80084d2:	4603      	mov	r3, r0
 80084d4:	4642      	mov	r2, r8
 80084d6:	189b      	adds	r3, r3, r2
 80084d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80084da:	464b      	mov	r3, r9
 80084dc:	460a      	mov	r2, r1
 80084de:	eb42 0303 	adc.w	r3, r2, r3
 80084e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	663b      	str	r3, [r7, #96]	; 0x60
 80084ee:	667a      	str	r2, [r7, #100]	; 0x64
 80084f0:	f04f 0200 	mov.w	r2, #0
 80084f4:	f04f 0300 	mov.w	r3, #0
 80084f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80084fc:	4649      	mov	r1, r9
 80084fe:	008b      	lsls	r3, r1, #2
 8008500:	4641      	mov	r1, r8
 8008502:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008506:	4641      	mov	r1, r8
 8008508:	008a      	lsls	r2, r1, #2
 800850a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800850e:	f7f7 fe75 	bl	80001fc <__aeabi_uldivmod>
 8008512:	4602      	mov	r2, r0
 8008514:	460b      	mov	r3, r1
 8008516:	4b0d      	ldr	r3, [pc, #52]	; (800854c <UART_SetConfig+0x4e4>)
 8008518:	fba3 1302 	umull	r1, r3, r3, r2
 800851c:	095b      	lsrs	r3, r3, #5
 800851e:	2164      	movs	r1, #100	; 0x64
 8008520:	fb01 f303 	mul.w	r3, r1, r3
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	011b      	lsls	r3, r3, #4
 8008528:	3332      	adds	r3, #50	; 0x32
 800852a:	4a08      	ldr	r2, [pc, #32]	; (800854c <UART_SetConfig+0x4e4>)
 800852c:	fba2 2303 	umull	r2, r3, r2, r3
 8008530:	095b      	lsrs	r3, r3, #5
 8008532:	f003 020f 	and.w	r2, r3, #15
 8008536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4422      	add	r2, r4
 800853e:	609a      	str	r2, [r3, #8]
}
 8008540:	bf00      	nop
 8008542:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008546:	46bd      	mov	sp, r7
 8008548:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800854c:	51eb851f 	.word	0x51eb851f

08008550 <memset>:
 8008550:	4402      	add	r2, r0
 8008552:	4603      	mov	r3, r0
 8008554:	4293      	cmp	r3, r2
 8008556:	d100      	bne.n	800855a <memset+0xa>
 8008558:	4770      	bx	lr
 800855a:	f803 1b01 	strb.w	r1, [r3], #1
 800855e:	e7f9      	b.n	8008554 <memset+0x4>

08008560 <__libc_init_array>:
 8008560:	b570      	push	{r4, r5, r6, lr}
 8008562:	4d0d      	ldr	r5, [pc, #52]	; (8008598 <__libc_init_array+0x38>)
 8008564:	4c0d      	ldr	r4, [pc, #52]	; (800859c <__libc_init_array+0x3c>)
 8008566:	1b64      	subs	r4, r4, r5
 8008568:	10a4      	asrs	r4, r4, #2
 800856a:	2600      	movs	r6, #0
 800856c:	42a6      	cmp	r6, r4
 800856e:	d109      	bne.n	8008584 <__libc_init_array+0x24>
 8008570:	4d0b      	ldr	r5, [pc, #44]	; (80085a0 <__libc_init_array+0x40>)
 8008572:	4c0c      	ldr	r4, [pc, #48]	; (80085a4 <__libc_init_array+0x44>)
 8008574:	f000 f818 	bl	80085a8 <_init>
 8008578:	1b64      	subs	r4, r4, r5
 800857a:	10a4      	asrs	r4, r4, #2
 800857c:	2600      	movs	r6, #0
 800857e:	42a6      	cmp	r6, r4
 8008580:	d105      	bne.n	800858e <__libc_init_array+0x2e>
 8008582:	bd70      	pop	{r4, r5, r6, pc}
 8008584:	f855 3b04 	ldr.w	r3, [r5], #4
 8008588:	4798      	blx	r3
 800858a:	3601      	adds	r6, #1
 800858c:	e7ee      	b.n	800856c <__libc_init_array+0xc>
 800858e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008592:	4798      	blx	r3
 8008594:	3601      	adds	r6, #1
 8008596:	e7f2      	b.n	800857e <__libc_init_array+0x1e>
 8008598:	08008680 	.word	0x08008680
 800859c:	08008680 	.word	0x08008680
 80085a0:	08008680 	.word	0x08008680
 80085a4:	08008684 	.word	0x08008684

080085a8 <_init>:
 80085a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085aa:	bf00      	nop
 80085ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ae:	bc08      	pop	{r3}
 80085b0:	469e      	mov	lr, r3
 80085b2:	4770      	bx	lr

080085b4 <_fini>:
 80085b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b6:	bf00      	nop
 80085b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ba:	bc08      	pop	{r3}
 80085bc:	469e      	mov	lr, r3
 80085be:	4770      	bx	lr
